{"ast":null,"code":"import _classCallCheck from \"/Users/danielobedortegahernandez/Documents/GitHub/bobSeller/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/danielobedortegahernandez/Documents/GitHub/bobSeller/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/danielobedortegahernandez/Documents/GitHub/bobSeller/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/danielobedortegahernandez/Documents/GitHub/bobSeller/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/danielobedortegahernandez/Documents/GitHub/bobSeller/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/danielobedortegahernandez/Documents/GitHub/bobSeller/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/danielobedortegahernandez/Documents/GitHub/bobSeller/src/views/Owner/Geo/StatesAdd.js\";\nimport { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport DbCrud from '../../../Pojo/DbCrud';\nimport { Button, Card, CardBody, CardHeader, Col, Form, FormGroup, Input, InputGroup, Label, Row } from 'reactstrap';\nimport { TextMask, InputAdapter } from 'react-text-mask-hoc'; //Objeto que describe el nodo en la base de datos de los estados que hacen parte de un pais\n//lo usamos para reconocer la estructura no tiene funcionalidad dentro del codigo \n\nvar states = [{\n  cities: {\n    code: undefined,\n    geopoint: [undefined, undefined],\n    nameCity: undefined,\n    neighborhoods: {\n      code: undefined,\n      geopoint: [undefined, undefined],\n      nameNeighbordhood: undefined\n    }\n  },\n  code: undefined,\n  geopoint: [undefined, undefined],\n  isoCode: undefined,\n  stateName: undefined\n}];\n\nvar StatesAdd =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(StatesAdd, _Component);\n\n  function StatesAdd(props) {\n    var _this;\n\n    _classCallCheck(this, StatesAdd);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StatesAdd).call(this, props));\n    if (props.location.documentId == undefined) _this.documentId = _this.props.match.params.documentId; //Si no se envia la información para actualizar un registro se carga en blanco los campos ya que se esta \n    //creando uno nuevo\n    //console.log(\"llegando\");\n\n    if (!props.location.documentId) {\n      _this.props.history.push('/Geo/CountriesList');\n    } else {\n      //Procedemos a buscar en el objeto el estado cargado de geo cual es el nodo donde se requiere adicionar la información\n      _this.props.obj.forEach(function (country) {\n        //Dentro del objeto identificamos si el nodo en donde me encuentro parado es el que estoy editando \n        if (country.documentId == this.documentId) {\n          //una vez encontramos el objeto verificamos si este ya tiene un nodo detipo state creado \n          //ya que si el pais fue creado pero nunca se le ha adicionado un estado no tendra este nodo \n          if (country.states == undefined) {\n            //Creamos un objeto de tipo Array donde podemos almacenar los datos de este nodo \n            country.states = [{\n              countryName: '',\n              isoCode: '',\n              active: '',\n              geopoint: {\n                latitude: '',\n                longitude: ''\n              }\n            }];\n          } //Creamos el state que almacenara localmente la información que llega al componente\n\n\n          this.state = {\n            //Identificador del documento al que tenemos que afectar \n            documentId: props.location.documentId,\n            //Objeto completo de pais\n            rootObj: country,\n            //Objeto completo de estados, si no existe este objeto se creo previamente un array vacio\n            statesObj: country.states\n          }; //Eliminamos del objeto su identificador para poder utilizarlo para poder adicionar un nuevo registro hijo \n          //Esto lo hacemos ya que el objeto que se enviara a la base de datos no tiene dentro del hijo el id del documento \n\n          delete this.state.rootObj[\"documentId\"];\n        }\n      }.bind(_assertThisInitialized(_assertThisInitialized(_this))));\n    } //if(this.props.location.row){\n    // this.state = this.props.location.row;\n    //}else{\n    //  this.state = {\n    //   countryName: '',\n    //   isoCode: '',\n    //  active: '',\n    //   geopoint: {latitude:'',longitude:''}\n    // }\n    //}\n\n\n    return _this;\n  }\n\n  _createClass(StatesAdd, [{\n    key: \"callList\",\n    value: function callList() {\n      this.props.history.push('/Geo/CountriesList');\n    }\n  }, {\n    key: \"callSave\",\n    value: function callSave(e) {\n      e.preventDefault();\n\n      if (this.state.documentId) {\n        this.props.update('updateGeo', \"geo\", \"CountriesList\", this, this.state.documentId);\n        this.props.history.push('/Geo/CountriesList');\n      } else {\n        this.props.create('addGeo', \"geo\", \"CountriesList\", this);\n        this.props.history.push('/Geo/CountriesList');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"animated fadeIn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(Col, {\n        xs: \"12\",\n        sm: \"12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \"Crear nuevo Pa\\xEDs\"), React.createElement(Button, {\n        color: \"secondary\",\n        onClick: this.callList.bind(this),\n        className: \"float-right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fa icon-arrow-left-circle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }), \"\\xA0Regresar\")), React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(Form, {\n        className: \"form-horizontal\",\n        onSubmit: this.callSave.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        row: true,\n        className: \"my-0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(Col, {\n        xs: \"6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(Label, {\n        htmlFor: \"countryName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"Nombre Pais\"), React.createElement(InputGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, React.createElement(TextMask, {\n        ref: \"countryName\",\n        id: \"countryName\",\n        format: \"string\",\n        required: true,\n        autoComplete: \"off\",\n        mask: [/[A-Z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/],\n        Component: InputAdapter,\n        guide: false,\n        value: this.state.countryName,\n        className: \"form-control\",\n        placeholder: \"Colombia\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      })))), React.createElement(Col, {\n        xs: \"6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(Label, {\n        htmlFor: \"isoCode\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"Codigo ISO\"), React.createElement(InputGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(TextMask, {\n        ref: \"isoCode\",\n        id: \"isoCode\",\n        format: \"string\",\n        required: true,\n        autoComplete: \"off\",\n        mask: [/[A-Z]/, /[A-Z]/, /[A-Z]/],\n        Component: InputAdapter,\n        guide: false,\n        value: this.state.isoCode,\n        className: \"form-control\",\n        placeholder: \"COL\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }))))), React.createElement(FormGroup, {\n        row: true,\n        className: \"my-0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(Col, {\n        xs: \"6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(Label, {\n        htmlFor: \"type\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, \"Estado\"), React.createElement(Input, {\n        type: \"select\",\n        defaultValue: this.state.active,\n        id: \"active\",\n        format: \"string\",\n        ref: \"active\",\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(\"option\", {\n        value: \"1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, \"Activo\"), React.createElement(\"option\", {\n        value: \"0\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, \"Inactivo\")))), React.createElement(Col, {\n        xs: \"3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(Label, {\n        htmlFor: \"Latitud\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, \"Geo Latitud\"), React.createElement(Input, {\n        type: \"number\",\n        ref: \"latitude\",\n        id: \"latitude\",\n        format: \"latitude\",\n        required: true,\n        autoComplete: \"off\",\n        min: \"-90\",\n        max: \"90\",\n        className: \"form-control\",\n        placeholder: \"Valor entre (-90 y 90.000000)\",\n        defaultValue: this.state.geopoint.latitude,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }))), React.createElement(Col, {\n        xs: \"3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(FormGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, React.createElement(Label, {\n        htmlFor: \"Longitud\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \"Geo Longitud\"), React.createElement(Input, {\n        type: \"number\",\n        ref: \"longitude\",\n        id: \"longitude\",\n        required: true,\n        format: \"longitude\",\n        autoComplete: \"off\",\n        min: \"-180\",\n        max: \"180\",\n        className: \"form-control\",\n        placeholder: \"Valor entre (-180.000000 y 180.000000)\",\n        defaultValue: this.state.geopoint.longitude,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      })))), React.createElement(\"div\", {\n        className: \"form-actions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        type: \"submit\",\n        value: \"Submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, \"Guardar\"), \"\\xA0\\xA0\", React.createElement(Button, {\n        color: \"secondary\",\n        onClick: this.callList.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, \"Cancel\"))))))));\n    }\n  }]);\n\n  return StatesAdd;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    email: state.login.email,\n    password: state.login.password,\n    obj: state.MyAccount\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    create: function create(type, colletion, component, e) {\n      DbCrud.dbCreate(dispatch, type, colletion, component, e);\n    },\n    update: function update(type, colletion, component, e, documentId) {\n      DbCrud.dbUpdate(dispatch, type, colletion, component, e, documentId);\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StatesAdd);","map":{"version":3,"sources":["/Users/danielobedortegahernandez/Documents/GitHub/bobSeller/src/views/Owner/Geo/StatesAdd.js"],"names":["connect","React","Component","DbCrud","Button","Card","CardBody","CardHeader","Col","Form","FormGroup","Input","InputGroup","Label","Row","TextMask","InputAdapter","states","cities","code","undefined","geopoint","nameCity","neighborhoods","nameNeighbordhood","isoCode","stateName","StatesAdd","props","location","documentId","match","params","history","push","obj","forEach","country","countryName","active","latitude","longitude","state","rootObj","statesObj","bind","e","preventDefault","update","create","callList","callSave","mapStateToProps","email","login","password","MyAccount","mapDispatchToProps","dispatch","type","colletion","component","dbCreate","dbUpdate"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport DbCrud from '../../../Pojo/DbCrud';\nimport {Button, Card, CardBody, CardHeader, Col, Form, FormGroup, Input, InputGroup, Label, Row} from 'reactstrap';\nimport { TextMask, InputAdapter } from 'react-text-mask-hoc';\n\n//Objeto que describe el nodo en la base de datos de los estados que hacen parte de un pais\n//lo usamos para reconocer la estructura no tiene funcionalidad dentro del codigo \nconst states =  [\n  {\n      cities   :   {\n        code:  undefined,\n        geopoint    :  [undefined,undefined],\n        nameCity: undefined,\n        neighborhoods:{\n          code:  undefined,\n          geopoint    :  [undefined,undefined],\n          nameNeighbordhood: undefined\n        }\n      },\n      code :   undefined,\n      geopoint    :  [undefined,undefined],\n      isoCode   :   undefined,\n      stateName  :   undefined\n  }\n];\n\n\nclass StatesAdd extends Component {\n\n  constructor(props) {\n    super(props);\n    if(props.location.documentId == undefined) \n    this.documentId = this.props.match.params.documentId;\n    //Si no se envia la información para actualizar un registro se carga en blanco los campos ya que se esta \n    //creando uno nuevo\n    //console.log(\"llegando\");\n\n    if(!props.location.documentId){\n      this.props.history.push('/Geo/CountriesList');\n    }else{\n         //Procedemos a buscar en el objeto el estado cargado de geo cual es el nodo donde se requiere adicionar la información\n         this.props.obj.forEach(function(country) {\n             //Dentro del objeto identificamos si el nodo en donde me encuentro parado es el que estoy editando \n             if(country.documentId == this.documentId){\n                 //una vez encontramos el objeto verificamos si este ya tiene un nodo detipo state creado \n                 //ya que si el pais fue creado pero nunca se le ha adicionado un estado no tendra este nodo \n                 if(country.states == undefined){\n                   //Creamos un objeto de tipo Array donde podemos almacenar los datos de este nodo \n                   country.states = [\n                    {\n                      countryName: '',\n                      isoCode: '',\n                      active: '',\n                      geopoint: {latitude:'',longitude:''}\n                    }\n                   ];\n                 }\n                \n                 //Creamos el state que almacenara localmente la información que llega al componente\n                 this.state = {\n                     //Identificador del documento al que tenemos que afectar \n                     documentId: props.location.documentId,\n                     //Objeto completo de pais\n                     rootObj:country,\n                     //Objeto completo de estados, si no existe este objeto se creo previamente un array vacio\n                     statesObj:country.states\n                 };\n                \n                 //Eliminamos del objeto su identificador para poder utilizarlo para poder adicionar un nuevo registro hijo \n                 //Esto lo hacemos ya que el objeto que se enviara a la base de datos no tiene dentro del hijo el id del documento \n                 delete this.state.rootObj[\"documentId\"];\n             }\n         }.bind(this));\n    }\n    \n    \n    //if(this.props.location.row){\n     // this.state = this.props.location.row;\n    //}else{\n    //  this.state = {\n     //   countryName: '',\n     //   isoCode: '',\n      //  active: '',\n     //   geopoint: {latitude:'',longitude:''}\n     // }\n    //}\n  }\n\n  callList() { this.props.history.push('/Geo/CountriesList'); }\n\n  callSave(e) {\n    e.preventDefault();\n    if(this.state.documentId){\n      this.props.update('updateGeo', \"geo\", \"CountriesList\", this, this.state.documentId);\n      this.props.history.push('/Geo/CountriesList');\n    }else{\n      this.props.create('addGeo', \"geo\", \"CountriesList\", this);\n      this.props.history.push('/Geo/CountriesList');\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"animated fadeIn\">\n\n        <Row>\n          <Col xs=\"12\" sm=\"12\">\n            <Card>\n              <CardHeader>\n                <strong>Crear nuevo País</strong>\n                <Button color=\"secondary\" onClick={this.callList.bind(this)} className=\"float-right\"><i className=\"fa icon-arrow-left-circle\"></i>&nbsp;Regresar</Button>\n              </CardHeader>\n              <CardBody>\n                <Form className=\"form-horizontal\" onSubmit={this.callSave.bind(this)}>\n                  <FormGroup row className=\"my-0\">\n                    <Col xs=\"6\">\n                      <FormGroup>\n                        <Label htmlFor=\"countryName\">Nombre Pais</Label>\n                        <InputGroup >\n                          <TextMask ref=\"countryName\" id=\"countryName\" format=\"string\" required autoComplete=\"off\"\n                            mask={[/[A-Z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/,\n                              /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/,\n                              /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/,\n                              /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/, /[\\sa-z]/]}\n                            Component={InputAdapter}\n                            guide={false}\n                            value={this.state.countryName}\n                            className=\"form-control\" placeholder=\"Colombia\" \n                          />\n                        </InputGroup>\n                      </FormGroup>\n                    </Col>\n                    <Col xs=\"6\">\n                      <FormGroup>\n                        <Label htmlFor=\"isoCode\">Codigo ISO</Label>\n                        <InputGroup >\n                          <TextMask ref=\"isoCode\" id=\"isoCode\" format=\"string\" required autoComplete=\"off\"\n                            mask={[/[A-Z]/, /[A-Z]/, /[A-Z]/]}\n                            Component={InputAdapter}\n                            guide={false}\n                            value={this.state.isoCode}\n                            className=\"form-control\" placeholder=\"COL\"\n                          />\n                        </InputGroup>\n                      </FormGroup>\n                    </Col>\n                  </FormGroup>\n                  <FormGroup row className=\"my-0\">\n                    <Col xs=\"6\">\n                      <FormGroup>\n                        <Label htmlFor=\"type\">Estado</Label>\n                        <Input type=\"select\" defaultValue={this.state.active} id=\"active\" format=\"string\" ref=\"active\" required >\n                          <option value=\"1\" >Activo</option>\n                          <option value=\"0\" >Inactivo</option>\n                        </Input>\n                      </FormGroup>\n                    </Col>\n                    <Col xs=\"3\">\n                      <FormGroup>\n                        <Label htmlFor=\"Latitud\">Geo Latitud</Label>\n                        <Input type=\"number\" ref=\"latitude\" id=\"latitude\" \n                          format=\"latitude\" required autoComplete=\"off\" min=\"-90\" max=\"90\"\n                          className=\"form-control\" placeholder=\"Valor entre (-90 y 90.000000)\"\n                          defaultValue={this.state.geopoint.latitude}\n                        />\n                      </FormGroup>\n                    </Col>\n                    <Col xs=\"3\">\n                      <FormGroup>\n                        <Label htmlFor=\"Longitud\">Geo Longitud</Label>\n                        <Input type=\"number\" ref=\"longitude\" id=\"longitude\" \n                          required format=\"longitude\" autoComplete=\"off\" min=\"-180\" max=\"180\"\n                          className=\"form-control\" placeholder=\"Valor entre (-180.000000 y 180.000000)\"\n                          defaultValue={this.state.geopoint.longitude}\n                        />\n                      </FormGroup>\n                    </Col>\n                  </FormGroup>\n                  <div className=\"form-actions\">\n                    <Button color=\"primary\" type=\"submit\" value=\"Submit\">Guardar</Button>&nbsp;&nbsp;\n                        <Button color=\"secondary\" onClick={this.callList.bind(this)}>Cancel</Button>\n                  </div>\n                </Form>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      \n      </div>\n    );\n  }\n\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    email: state.login.email,\n    password: state.login.password,\n    obj: state.MyAccount\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    create: (type, colletion, component, e) => {\n      DbCrud.dbCreate(dispatch, type, colletion, component, e);\n    },\n    update: (type, colletion, component, e, documentId) => {\n      DbCrud.dbUpdate(dispatch, type, colletion, component, e, documentId);\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StatesAdd);"]},"metadata":{},"sourceType":"module"}