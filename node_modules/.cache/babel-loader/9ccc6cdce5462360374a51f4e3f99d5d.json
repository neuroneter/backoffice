{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { asideMenuCssClasses, checkBreakpoint, validBreakpoints } from './Shared';\nimport toggleClasses from './Shared/toggle-classes';\nvar propTypes = process.env.NODE_ENV !== \"production\" ? {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  display: PropTypes.string,\n  fixed: PropTypes.bool,\n  isOpen: PropTypes.bool,\n  offCanvas: PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n} : {};\nvar defaultProps = {\n  tag: 'aside',\n  display: '',\n  fixed: false,\n  isOpen: false,\n  offCanvas: true\n};\n\nvar AppAside =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(AppAside, _Component);\n\n  function AppAside(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.isFixed = _this.isFixed.bind(_assertThisInitialized(_this));\n    _this.isOffCanvas = _this.isOffCanvas.bind(_assertThisInitialized(_this));\n    _this.displayBreakpoint = _this.displayBreakpoint.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = AppAside.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.isFixed(this.props.fixed);\n    this.isOffCanvas(this.props.offCanvas);\n    this.displayBreakpoint(this.props.display);\n  };\n\n  _proto.isFixed = function isFixed(fixed) {\n    if (fixed) {\n      document.body.classList.add('aside-menu-fixed');\n    }\n  };\n\n  _proto.isOffCanvas = function isOffCanvas(offCanvas) {\n    if (offCanvas) {\n      document.body.classList.add('aside-menu-off-canvas');\n    }\n  };\n\n  _proto.displayBreakpoint = function displayBreakpoint(display) {\n    if (display && checkBreakpoint(display, validBreakpoints)) {\n      var cssClass = \"aside-menu-\" + display + \"-show\";\n      toggleClasses(cssClass, asideMenuCssClasses, true);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        className = _this$props.className,\n        children = _this$props.children,\n        Tag = _this$props.tag,\n        attributes = _objectWithoutPropertiesLoose(_this$props, [\"className\", \"children\", \"tag\"]);\n\n    delete attributes.display;\n    delete attributes.fixed;\n    delete attributes.offCanvas;\n    delete attributes.isOpen;\n    var classes = classNames(className, 'aside-menu');\n    return (\n      /*#__PURE__*/\n      React.createElement(Tag, _extends({}, attributes, {\n        className: classes\n      }), children)\n    );\n  };\n\n  return AppAside;\n}(Component);\n\nAppAside.propTypes = process.env.NODE_ENV !== \"production\" ? propTypes : {};\nAppAside.defaultProps = defaultProps;\nexport default AppAside;","map":null,"metadata":{},"sourceType":"module"}