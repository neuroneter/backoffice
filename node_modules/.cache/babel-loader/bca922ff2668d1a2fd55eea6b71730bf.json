{"ast":null,"code":"import firebase from './Firebase.js';\nvar db = firebase.firestore(); //Busca un registro puntual utilizando una llave o value fijo para en un campo o file \n\nfunction dbFindRegister(dispatch, type, colletion, file, value) {\n  db.collection(colletion).where(file, \"==\", value).get().then(function (snapshot) {\n    snapshot.forEach(function (doc) {\n      dispatch({\n        type: type,\n        data: doc.data()\n      });\n    });\n  }).catch(function (error) {\n    console.log(\"Error getting documents: \" + error);\n  });\n} //Recupera todos los valores de una Collection de datos \n\n\nfunction dbFindColletion(dispatch, type, colletion) {\n  db.collection(colletion).get().then(function (snapshot) {\n    dispatch({\n      type: type,\n      data: snapshot\n    });\n  }).catch(function (error) {\n    console.log(\"Error getting documents: \" + error);\n  });\n} //Crea un nuevo registro en la base de datos \n\n\nfunction dbCreate(dispatch, type, colletion, e) {\n  var dateRef = e.refs;\n  var formData = {};\n  var latitude = 0;\n  var longitude = 0;\n\n  for (var field in dateRef) {\n    if (dateRef[field].props.type == 'select') formData[field] = document.getElementsByName(field)[0].value.replace(/\\*/g, '');else {\n      if (dateRef[field].props.fileType == 'latitude') latitude = parseFloat(dateRef[field].value.replace(/\\*/g, ''));else if (dateRef[field].props.fileType == 'longitude') longitude = parseFloat(dateRef[field].value.replace(/\\*/g, ''));else formData[field] = dateRef[field].value.replace(/\\*/g, '');\n    }\n  }\n\n  if (latitude != 0 && longitude != 0) dateRef[\"geopoint\"] = new firebase.firestore.GeoPoint(latitude, longitude);\n  db.collection(colletion).add({\n    dateRef: dateRef\n  }).then(function (docRef) {\n    console.log(\"Documento creado \", docRef.id);\n  }).catch(function (error) {\n    console.error(\"Error al crear documento \", error);\n  });\n}\n\nvar DbCrud = {\n  dbFindRegister: dbFindRegister,\n  dbFindColletion: dbFindColletion,\n  dbCreate: dbCreate\n};\nexport default DbCrud;","map":{"version":3,"sources":["/Users/danielobedortegahernandez/Documents/GitHub/bobSeller/src/Pojo/DbCrud.js"],"names":["firebase","db","firestore","dbFindRegister","dispatch","type","colletion","file","value","collection","where","get","then","snapshot","forEach","doc","data","catch","error","console","log","dbFindColletion","dbCreate","e","dateRef","refs","formData","latitude","longitude","field","props","document","getElementsByName","replace","fileType","parseFloat","GeoPoint","add","docRef","id","DbCrud"],"mappings":"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","sourcesContent":["import firebase from './Firebase.js';\nlet db = firebase.firestore();\n\n\n//Busca un registro puntual utilizando una llave o value fijo para en un campo o file \nfunction dbFindRegister(dispatch, type, colletion, file, value){\n    db.collection(colletion).where(file, \"==\", value).get()\n        .then(function(snapshot) {\n            snapshot.forEach(function (doc) {\n                dispatch({type:type,data:doc.data()})\n            });\n        }).catch(function(error) {\n            console.log(\"Error getting documents: \"+error);\n    });\n}\n\n//Recupera todos los valores de una Collection de datos \nfunction dbFindColletion(dispatch, type, colletion){\n    db.collection(colletion).get()\n        .then(function(snapshot) {\n            dispatch({type:type,data:snapshot});\n        }).catch(function(error) {\n            console.log(\"Error getting documents: \"+error);\n    });\n}\n\n//Crea un nuevo registro en la base de datos \nfunction dbCreate(dispatch, type, colletion, e){\n    const dateRef = e.refs;\n    const formData = {};\n    var latitude = 0;\n    var longitude = 0;\n    for (const field in dateRef){\n        if(dateRef[field].props.type == 'select')  formData[field] = document.getElementsByName(field)[0].value.replace(/\\*/g,'');\n        else{\n            if(dateRef[field].props.fileType == 'latitude') latitude = parseFloat(dateRef[field].value.replace(/\\*/g,''));\n            else if(dateRef[field].props.fileType == 'longitude') longitude = parseFloat(dateRef[field].value.replace(/\\*/g,''));\n            else formData[field] = dateRef[field].value.replace(/\\*/g,'');\n        }\n    }\n\n    if(latitude != 0 && longitude != 0) dateRef[\"geopoint\"] = new firebase.firestore.GeoPoint( latitude, longitude);\n\n    db.collection(colletion).add({dateRef})\n    .then(function(docRef) { console.log(\"Documento creado \", docRef.id);})\n    .catch(function(error) { console.error(\"Error al crear documento \", error); });\n\n}\n\n\nconst DbCrud = {dbFindRegister, dbFindColletion, dbCreate}\n\nexport default DbCrud;"]},"metadata":{},"sourceType":"module"}