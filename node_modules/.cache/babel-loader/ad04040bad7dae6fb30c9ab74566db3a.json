{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { sidebarCssClasses } from './Shared';\nimport ClickOutHandler from 'react-onclickout';\nimport './Shared/element-closest';\nimport LayoutHelper from './Shared/layout/layout';\nvar propTypes = process.env.NODE_ENV !== \"production\" ? {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  compact: PropTypes.bool,\n  display: PropTypes.string,\n  fixed: PropTypes.bool,\n  minimized: PropTypes.bool,\n  isOpen: PropTypes.bool,\n  offCanvas: PropTypes.bool,\n  staticContext: PropTypes.any,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n} : {};\nvar defaultProps = {\n  tag: 'div',\n  compact: false,\n  display: '',\n  fixed: false,\n  minimized: false,\n  isOpen: false,\n  offCanvas: false\n};\n\nvar AppSidebar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(AppSidebar, _Component);\n\n  function AppSidebar(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.isCompact = _this.isCompact.bind(_assertThisInitialized(_this));\n    _this.isFixed = _this.isFixed.bind(_assertThisInitialized(_this));\n    _this.isMinimized = _this.isMinimized.bind(_assertThisInitialized(_this));\n    _this.isOffCanvas = _this.isOffCanvas.bind(_assertThisInitialized(_this));\n    _this.displayBreakpoint = _this.displayBreakpoint.bind(_assertThisInitialized(_this));\n    _this.hideMobile = _this.hideMobile.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = AppSidebar.prototype;\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.displayBreakpoint(this.props.display);\n    this.isCompact(this.props.compact);\n    this.isFixed(this.props.fixed);\n    this.isMinimized(this.props.minimized);\n    this.isOffCanvas(this.props.offCanvas);\n  };\n\n  _proto.isCompact = function isCompact(compact) {\n    if (compact) {\n      document.body.classList.add('sidebar-compact');\n    }\n  };\n\n  _proto.isFixed = function isFixed(fixed) {\n    if (fixed) {\n      document.body.classList.add('sidebar-fixed');\n    }\n  };\n\n  _proto.isMinimized = function isMinimized(minimized) {\n    LayoutHelper.sidebarToggle(minimized);\n  };\n\n  _proto.isOffCanvas = function isOffCanvas(offCanvas) {\n    if (offCanvas) {\n      document.body.classList.add('sidebar-off-canvas');\n    }\n  };\n\n  _proto.displayBreakpoint = function displayBreakpoint(display) {\n    var cssTemplate = \"sidebar-\" + display + \"-show\";\n    var _sidebarCssClasses$ = sidebarCssClasses[0],\n        cssClass = _sidebarCssClasses$[0];\n\n    if (display && sidebarCssClasses.indexOf(cssTemplate) > -1) {\n      cssClass = cssTemplate;\n    }\n\n    document.body.classList.add(cssClass);\n  };\n\n  _proto.hideMobile = function hideMobile() {\n    if (document.body.classList.contains('sidebar-show')) {\n      document.body.classList.remove('sidebar-show');\n    }\n  };\n\n  _proto.onClickOut = function onClickOut(e) {\n    if (typeof window !== 'undefined' && document.body.classList.contains('sidebar-show')) {\n      if (!e.target.closest('[data-sidebar-toggler]')) {\n        this.hideMobile();\n      }\n    }\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        className = _this$props.className,\n        children = _this$props.children,\n        Tag = _this$props.tag,\n        attributes = _objectWithoutPropertiesLoose(_this$props, [\"className\", \"children\", \"tag\"]);\n\n    delete attributes.compact;\n    delete attributes.display;\n    delete attributes.fixed;\n    delete attributes.minimized;\n    delete attributes.offCanvas;\n    delete attributes.isOpen;\n    delete attributes.staticContext;\n    var classes = classNames(className, 'sidebar'); // sidebar-nav root\n\n    return (\n      /*#__PURE__*/\n      React.createElement(ClickOutHandler, {\n        onClickOut: function onClickOut(e) {\n          _this2.onClickOut(e);\n        }\n      },\n      /*#__PURE__*/\n      React.createElement(Tag, _extends({\n        className: classes\n      }, attributes), children))\n    );\n  };\n\n  return AppSidebar;\n}(Component);\n\nAppSidebar.propTypes = process.env.NODE_ENV !== \"production\" ? propTypes : {};\nAppSidebar.defaultProps = defaultProps;\nexport default AppSidebar;","map":null,"metadata":{},"sourceType":"module"}