{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { sidebarCssClasses, validBreakpoints, checkBreakpoint } from './Shared/index';\nimport toggleClasses from './Shared/toggle-classes';\nvar propTypes = process.env.NODE_ENV !== \"production\" ? {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  display: PropTypes.any,\n  mobile: PropTypes.bool,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  type: PropTypes.string\n} : {};\nvar defaultProps = {\n  display: 'lg',\n  mobile: false,\n  tag: 'button',\n  type: 'button'\n};\n\nvar AppSidebarToggler =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(AppSidebarToggler, _Component);\n\n  function AppSidebarToggler(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.sidebarToggle = _this.sidebarToggle.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = AppSidebarToggler.prototype;\n\n  _proto.sidebarToggle = function sidebarToggle(e) {\n    e.preventDefault();\n    this.toggle();\n  };\n\n  _proto.toggle = function toggle(force) {\n    var _ref = [this.props.display, this.props.mobile],\n        display = _ref[0],\n        mobile = _ref[1];\n    var cssClass = sidebarCssClasses[0];\n\n    if (!mobile && display && checkBreakpoint(display, validBreakpoints)) {\n      cssClass = \"sidebar-\" + display + \"-show\";\n    }\n\n    toggleClasses(cssClass, sidebarCssClasses, force);\n  };\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props = this.props,\n        className = _this$props.className,\n        children = _this$props.children,\n        Tag = _this$props.tag,\n        attributes = _objectWithoutPropertiesLoose(_this$props, [\"className\", \"children\", \"tag\"]);\n\n    delete attributes.mobile;\n    delete attributes.display;\n    var classes = classNames(className, 'navbar-toggler');\n    return (\n      /*#__PURE__*/\n      React.createElement(Tag, _extends({\n        type: \"button\",\n        className: classes\n      }, attributes, {\n        onClick: function onClick(event) {\n          return _this2.sidebarToggle(event);\n        },\n        \"data-sidebar-toggler\": true\n      }), children ||\n      /*#__PURE__*/\n      React.createElement(\"span\", {\n        className: \"navbar-toggler-icon\"\n      }))\n    );\n  };\n\n  return AppSidebarToggler;\n}(Component);\n\nAppSidebarToggler.propTypes = process.env.NODE_ENV !== \"production\" ? propTypes : {};\nAppSidebarToggler.defaultProps = defaultProps;\nexport default AppSidebarToggler;","map":null,"metadata":{},"sourceType":"module"}