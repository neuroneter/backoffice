{"ast":null,"code":"import firebase from './Firebase.js';\nvar db = firebase.firestore(); //Busca un registro puntual utilizando una llave o value fijo para en un campo o file \n\nfunction dbFindRegister(dispatch, type, colletion, file, value) {\n  db.collection(colletion).where(file, \"==\", value).get().then(function (snapshot) {\n    snapshot.forEach(function (doc) {\n      dispatch({\n        type: type,\n        data: doc.data()\n      });\n    });\n  }).catch(function (error) {\n    console.log(\"Error getting documents: \" + error);\n  });\n} //Recupera todos los valores de una Collection de datos \n\n\nfunction dbFindColletion(dispatch, type, colletion) {\n  db.collection(colletion).get().then(function (snapshot) {\n    dispatch({\n      type: type,\n      data: snapshot\n    });\n  }).catch(function (error) {\n    console.log(\"Error getting documents: \" + error);\n  });\n} //Crea un nuevo registro en la base de datos \n\n\nfunction dbCreate(dispatch, type, colletion, values) {\n  var formData = {};\n\n  for (var field in values) {\n    formData[field] = values[field].value;\n  } //{countryName: \"A______________________________\", isoCode: \"\", active: undefined, Longitud: \"\", Latitud: \"\"}\n\n\n  var dataCountry;\n  dataCountry['active'] = formData['active'];\n  dataCountry['countryName'] = formData['countryName'];\n  dataCountry['geopoint'] = formData['geopoint'];\n  dataCountry['isoCode'] = formData['isoCode'];\n  dataCountry['states'] = new array();\n  console.log('-->', dataCountry);\n}\n\nvar DbCrud = {\n  dbFindRegister: dbFindRegister,\n  dbFindColletion: dbFindColletion,\n  dbCreate: dbCreate\n};\nexport default DbCrud;","map":{"version":3,"sources":["/Users/danielobedortegahernandez/Documents/GitHub/bobSeller/src/Pojo/DbCrud.js"],"names":["firebase","db","firestore","dbFindRegister","dispatch","type","colletion","file","value","collection","where","get","then","snapshot","forEach","doc","data","catch","error","console","log","dbFindColletion","dbCreate","values","formData","field","dataCountry","array","DbCrud"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,eAArB;AACA,IAAIC,EAAE,GAAGD,QAAQ,CAACE,SAAT,EAAT,C,CAGA;;AACA,SAASC,cAAT,CAAwBC,QAAxB,EAAkCC,IAAlC,EAAwCC,SAAxC,EAAmDC,IAAnD,EAAyDC,KAAzD,EAA+D;AAC3DP,EAAAA,EAAE,CAACQ,UAAH,CAAcH,SAAd,EAAyBI,KAAzB,CAA+BH,IAA/B,EAAqC,IAArC,EAA2CC,KAA3C,EAAkDG,GAAlD,GACKC,IADL,CACU,UAASC,QAAT,EAAmB;AACrBA,IAAAA,QAAQ,CAACC,OAAT,CAAiB,UAAUC,GAAV,EAAe;AAC5BX,MAAAA,QAAQ,CAAC;AAACC,QAAAA,IAAI,EAACA,IAAN;AAAWW,QAAAA,IAAI,EAACD,GAAG,CAACC,IAAJ;AAAhB,OAAD,CAAR;AACH,KAFD;AAGH,GALL,EAKOC,KALP,CAKa,UAASC,KAAT,EAAgB;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAA4BF,KAAxC;AACP,GAPD;AAQH,C,CAED;;;AACA,SAASG,eAAT,CAAyBjB,QAAzB,EAAmCC,IAAnC,EAAyCC,SAAzC,EAAmD;AAC/CL,EAAAA,EAAE,CAACQ,UAAH,CAAcH,SAAd,EAAyBK,GAAzB,GACKC,IADL,CACU,UAASC,QAAT,EAAmB;AACrBT,IAAAA,QAAQ,CAAC;AAACC,MAAAA,IAAI,EAACA,IAAN;AAAWW,MAAAA,IAAI,EAACH;AAAhB,KAAD,CAAR;AACH,GAHL,EAGOI,KAHP,CAGa,UAASC,KAAT,EAAgB;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAA4BF,KAAxC;AACP,GALD;AAMH,C,CAED;;;AACA,SAASI,QAAT,CAAkBlB,QAAlB,EAA4BC,IAA5B,EAAkCC,SAAlC,EAA6CiB,MAA7C,EAAoD;AAChD,MAAMC,QAAQ,GAAG,EAAjB;;AACA,OAAK,IAAMC,KAAX,IAAoBF,MAApB;AAA4BC,IAAAA,QAAQ,CAACC,KAAD,CAAR,GAAkBF,MAAM,CAACE,KAAD,CAAN,CAAcjB,KAAhC;AAA5B,GAFgD,CAGhD;;;AACA,MAAIkB,WAAJ;AACAA,EAAAA,WAAW,CAAC,QAAD,CAAX,GAAwBF,QAAQ,CAAC,QAAD,CAAhC;AACAE,EAAAA,WAAW,CAAC,aAAD,CAAX,GAA6BF,QAAQ,CAAC,aAAD,CAArC;AACAE,EAAAA,WAAW,CAAC,UAAD,CAAX,GAA0BF,QAAQ,CAAC,UAAD,CAAlC;AACAE,EAAAA,WAAW,CAAC,SAAD,CAAX,GAAyBF,QAAQ,CAAC,SAAD,CAAjC;AACAE,EAAAA,WAAW,CAAC,QAAD,CAAX,GAAwB,IAAIC,KAAJ,EAAxB;AACAR,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBM,WAAnB;AACH;;AAGD,IAAME,MAAM,GAAG;AAACzB,EAAAA,cAAc,EAAdA,cAAD;AAAiBkB,EAAAA,eAAe,EAAfA,eAAjB;AAAkCC,EAAAA,QAAQ,EAARA;AAAlC,CAAf;AAEA,eAAeM,MAAf","sourcesContent":["import firebase from './Firebase.js';\nlet db = firebase.firestore();\n\n\n//Busca un registro puntual utilizando una llave o value fijo para en un campo o file \nfunction dbFindRegister(dispatch, type, colletion, file, value){\n    db.collection(colletion).where(file, \"==\", value).get()\n        .then(function(snapshot) {\n            snapshot.forEach(function (doc) {\n                dispatch({type:type,data:doc.data()})\n            });\n        }).catch(function(error) {\n            console.log(\"Error getting documents: \"+error);\n    });\n}\n\n//Recupera todos los valores de una Collection de datos \nfunction dbFindColletion(dispatch, type, colletion){\n    db.collection(colletion).get()\n        .then(function(snapshot) {\n            dispatch({type:type,data:snapshot});\n        }).catch(function(error) {\n            console.log(\"Error getting documents: \"+error);\n    });\n}\n\n//Crea un nuevo registro en la base de datos \nfunction dbCreate(dispatch, type, colletion, values){\n    const formData = {};\n    for (const field in values) formData[field] = values[field].value;\n    //{countryName: \"A______________________________\", isoCode: \"\", active: undefined, Longitud: \"\", Latitud: \"\"}\n    var dataCountry;\n    dataCountry['active'] = formData['active'];\n    dataCountry['countryName'] = formData['countryName'];\n    dataCountry['geopoint'] = formData['geopoint'];\n    dataCountry['isoCode'] = formData['isoCode'];\n    dataCountry['states'] = new array;\n    console.log('-->', dataCountry);\n}\n\n\nconst DbCrud = {dbFindRegister, dbFindColletion, dbCreate}\n\nexport default DbCrud;"]},"metadata":{},"sourceType":"module"}