{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nvar propTypes = process.env.NODE_ENV !== \"production\" ? {\n  color: PropTypes.string,\n  label: PropTypes.bool,\n  outline: PropTypes.oneOfType([PropTypes.bool, PropTypes.string, PropTypes.oneOf(['', 'alt'])]),\n  size: PropTypes.oneOf(['', 'lg', 'sm']),\n  checked: PropTypes.bool,\n  defaultChecked: PropTypes.bool,\n  defaultValue: PropTypes.any,\n  value: PropTypes.string,\n  disabled: PropTypes.bool,\n  form: PropTypes.any,\n  name: PropTypes.string,\n  required: PropTypes.bool,\n  onChange: PropTypes.func,\n  type: PropTypes.oneOf(['checkbox', 'radio']),\n  variant: PropTypes.oneOf(['', '3d', 'pill']),\n  className: PropTypes.string,\n  dataOn: PropTypes.string,\n  dataOff: PropTypes.string\n} : {};\nvar defaultProps = {\n  color: 'secondary',\n  label: false,\n  outline: false,\n  size: '',\n  checked: false,\n  defaultChecked: undefined,\n  disabled: undefined,\n  required: undefined,\n  type: 'checkbox',\n  variant: '',\n  dataOn: 'On',\n  dataOff: 'Off'\n};\n\nvar AppSwitch =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(AppSwitch, _Component);\n\n  function AppSwitch(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    _this.handleKeyDown = _this.handleKeyDown.bind(_assertThisInitialized(_this));\n    _this.handleKeyUp = _this.handleKeyUp.bind(_assertThisInitialized(_this));\n    _this.state = {\n      uncontrolled: !!_this.props.defaultChecked,\n      checked: _this.props.defaultChecked || _this.props.checked,\n      selected: []\n    };\n    return _this;\n  }\n\n  var _proto = AppSwitch.prototype;\n\n  _proto.toggleState = function toggleState(check) {\n    this.setState({\n      checked: check\n    });\n  };\n\n  _proto.handleChange = function handleChange(event) {\n    var target = event.target;\n    this.toggleState(target.checked);\n\n    if (this.props.onChange) {\n      this.props.onChange(event);\n    }\n  };\n\n  _proto.handleKeyDown = function handleKeyDown(event) {\n    if (event.key === ' ') {\n      event.preventDefault();\n    }\n  };\n\n  _proto.handleKeyUp = function handleKeyUp(event) {\n    if (event.key === 'Enter' || event.key === ' ') {\n      this.toggleState(!this.state.checked);\n    }\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    if (!this.state.uncontrolled && this.props.checked !== prevState.checked) {\n      this.toggleState(this.props.checked);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        className = _this$props.className,\n        disabled = _this$props.disabled,\n        color = _this$props.color,\n        name = _this$props.name,\n        label = _this$props.label,\n        outline = _this$props.outline,\n        size = _this$props.size,\n        required = _this$props.required,\n        type = _this$props.type,\n        value = _this$props.value,\n        dataOn = _this$props.dataOn,\n        dataOff = _this$props.dataOff,\n        variant = _this$props.variant,\n        attributes = _objectWithoutPropertiesLoose(_this$props, [\"className\", \"disabled\", \"color\", \"name\", \"label\", \"outline\", \"size\", \"required\", \"type\", \"value\", \"dataOn\", \"dataOff\", \"variant\"]);\n\n    var tabindex = attributes.tabIndex;\n    delete attributes.tabIndex;\n    delete attributes.checked;\n    delete attributes.defaultChecked;\n    delete attributes.onChange;\n    var classes = classNames(className, 'switch', label ? 'switch-label' : false, size ? \"switch-\" + size : false, variant ? \"switch-\" + variant : false, \"switch\" + (outline ? '-outline' : '') + \"-\" + color + (outline === 'alt' ? '-alt' : ''), 'form-check-label');\n    var inputClasses = classNames('switch-input', 'form-check-input');\n    var sliderClasses = classNames('switch-slider');\n    return (\n      /*#__PURE__*/\n      React.createElement(\"label\", {\n        className: classes,\n        tabIndex: tabindex,\n        onKeyUp: this.handleKeyUp,\n        onKeyDown: this.handleKeyDown\n      },\n      /*#__PURE__*/\n      React.createElement(\"input\", _extends({\n        type: type,\n        className: inputClasses,\n        onChange: this.handleChange,\n        checked: this.state.checked,\n        name: name,\n        required: required,\n        disabled: disabled,\n        value: value,\n        \"aria-checked\": this.state.checked,\n        \"aria-disabled\": disabled,\n        \"aria-readonly\": disabled\n      }, attributes)),\n      /*#__PURE__*/\n      React.createElement(\"span\", {\n        className: sliderClasses,\n        \"data-checked\": dataOn,\n        \"data-unchecked\": dataOff\n      }))\n    );\n  };\n\n  return AppSwitch;\n}(Component);\n\nAppSwitch.propTypes = process.env.NODE_ENV !== \"production\" ? propTypes : {};\nAppSwitch.defaultProps = defaultProps;\nexport default AppSwitch;","map":null,"metadata":{},"sourceType":"module"}