{"ast":null,"code":"import { Cloudinary as CoreCloudinary, Util } from 'cloudinary-core';\nexport var url = function url(publicId, options) {\n  try {\n    var scOptions = Util.withSnakeCaseKeys(options);\n    var cl = CoreCloudinary.new();\n    return cl.url(publicId, scOptions);\n  } catch (e) {\n    console.error(e);\n    return null;\n  }\n};\nexport var openUploadWidget = function openUploadWidget(options, callback) {\n  var scOptions = Util.withSnakeCaseKeys(options);\n  window.cloudinary.openUploadWidget(scOptions, callback);\n};\nexport var fetchPhotos = function fetchPhotos(cloudName) {\n  // instead of maintaining the list of images, we rely on the 'myphotoalbum' tag\n  // and simply retrieve a list of all images with that tag.\n  // the version property is used for cache bust (lists are cached by the CDN for 1 minute)\n  // *************************************************************************\n  // Note that this practice is DISCOURAGED in production code and is here\n  // for demonstration purposes only\n  // *************************************************************************\n  var options = {\n    cloudName: cloudName,\n    format: 'json',\n    type: 'list',\n    version: Math.ceil(new Date().getTime() / 1000)\n  };\n  var urlPath = url('myphotoalbum', options);\n  return fetch(urlPath).then(function (res) {\n    return res.text();\n  }).then(function (text) {\n    return text ? JSON.parse(text).resources : [];\n  });\n};","map":{"version":3,"sources":["/Users/danielobedortegahernandez/iCloud/Documents/GitHub/backoffice/src/Reducers/utils/CloudinaryService.js"],"names":["Cloudinary","CoreCloudinary","Util","url","publicId","options","scOptions","withSnakeCaseKeys","cl","new","e","console","error","openUploadWidget","callback","window","cloudinary","fetchPhotos","cloudName","format","type","version","Math","ceil","Date","getTime","urlPath","fetch","then","res","text","JSON","parse","resources"],"mappings":"AAAA,SAASA,UAAU,IAAIC,cAAvB,EAAuCC,IAAvC,QAAmD,iBAAnD;AAEA,OAAO,IAAMC,GAAG,GAAG,SAANA,GAAM,CAACC,QAAD,EAAWC,OAAX,EAAuB;AACtC,MAAI;AACA,QAAMC,SAAS,GAAGJ,IAAI,CAACK,iBAAL,CAAuBF,OAAvB,CAAlB;AACA,QAAMG,EAAE,GAAGP,cAAc,CAACQ,GAAf,EAAX;AACA,WAAOD,EAAE,CAACL,GAAH,CAAOC,QAAP,EAAiBE,SAAjB,CAAP;AACH,GAJD,CAIE,OAAOI,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,WAAO,IAAP;AACH;AACJ,CATM;AAWP,OAAO,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACR,OAAD,EAAUS,QAAV,EAAuB;AACnD,MAAMR,SAAS,GAAGJ,IAAI,CAACK,iBAAL,CAAuBF,OAAvB,CAAlB;AACAU,EAAAA,MAAM,CAACC,UAAP,CAAkBH,gBAAlB,CAAmCP,SAAnC,EAA8CQ,QAA9C;AACH,CAHM;AAKP,OAAO,IAAMG,WAAW,GAAG,SAAdA,WAAc,CAAAC,SAAS,EAAI;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMb,OAAO,GAAG;AACZa,IAAAA,SAAS,EAAEA,SADC;AAEZC,IAAAA,MAAM,EAAE,MAFI;AAGZC,IAAAA,IAAI,EAAE,MAHM;AAIZC,IAAAA,OAAO,EAAEC,IAAI,CAACC,IAAL,CAAU,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAjC;AAJG,GAAhB;AAOA,MAAMC,OAAO,GAAGvB,GAAG,CAAC,cAAD,EAAiBE,OAAjB,CAAnB;AAEA,SAAOsB,KAAK,CAACD,OAAD,CAAL,CACFE,IADE,CACG,UAAAC,GAAG;AAAA,WAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,GADN,EAEFF,IAFE,CAEG,UAAAE,IAAI;AAAA,WAAKA,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWF,IAAX,EAAiBG,SAApB,GAAgC,EAAzC;AAAA,GAFP,CAAP;AAGH,CApBM","sourcesContent":["import { Cloudinary as CoreCloudinary, Util } from 'cloudinary-core';\n\nexport const url = (publicId, options) => {\n    try {\n        const scOptions = Util.withSnakeCaseKeys(options);\n        const cl = CoreCloudinary.new();\n        return cl.url(publicId, scOptions);\n    } catch (e) {\n        console.error(e);\n        return null;\n    }\n};\n\nexport const openUploadWidget = (options, callback) => {\n    const scOptions = Util.withSnakeCaseKeys(options);\n    window.cloudinary.openUploadWidget(scOptions, callback);\n};\n\nexport const fetchPhotos = cloudName => {\n    // instead of maintaining the list of images, we rely on the 'myphotoalbum' tag\n    // and simply retrieve a list of all images with that tag.\n    // the version property is used for cache bust (lists are cached by the CDN for 1 minute)\n    // *************************************************************************\n    // Note that this practice is DISCOURAGED in production code and is here\n    // for demonstration purposes only\n    // *************************************************************************\n    const options = {\n        cloudName: cloudName,\n        format: 'json',\n        type: 'list',\n        version: Math.ceil(new Date().getTime() / 1000),\n    };\n\n    const urlPath = url('myphotoalbum', options);\n\n    return fetch(urlPath)\n        .then(res => res.text())\n        .then(text => (text ? JSON.parse(text).resources : []));\n};\n"]},"metadata":{},"sourceType":"module"}