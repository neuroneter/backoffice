{"map":"{\"version\":3,\"sources\":[\"/Users/danielobedortegahernandez/iCloud/Documents/GitHub/bobSeller/src/views/Owner/Geo/StatesList.js\"],\"names\":[\"flat\",\"CountriesList\",\"props\",\"_this\",\"Object\",\"_Users_danielobedortegahernandez_iCloud_Documents_GitHub_bobSeller_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__\",\"this\",\"_Users_danielobedortegahernandez_iCloud_Documents_GitHub_bobSeller_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__\",\"_Users_danielobedortegahernandez_iCloud_Documents_GitHub_bobSeller_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__\",\"call\",\"state\",\"tmpRow\",\"danger\",\"documentId\",\"match\",\"params\",\"rootObj\",\"statesObj\",\"obj\",\"forEach\",\"country\",\"undefined\",\"states\",\"Array\",\"bind\",\"_Users_danielobedortegahernandez_iCloud_Documents_GitHub_bobSeller_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_5__\",\"history\",\"push\",\"options\",\"sortIndicator\",\"hideSizePerPage\",\"paginationSize\",\"hidePageListOnlyOnePage\",\"alwaysShowAllBtns\",\"withFirstAndLast\",\"toggleDanger\",\"loadReducer\",\"row\",\"setState\",\"deleteReducer\",\"cell\",\"react__WEBPACK_IMPORTED_MODULE_6___default\",\"a\",\"createElement\",\"reactstrap__WEBPACK_IMPORTED_MODULE_8__\",\"onClick\",\"callEdit\",\"size\",\"className\",\"pathname\",\"active\",\"editFileReducer\",\"_this2\",\"callChild\",\"geopoint\",\"latitude\",\"longitude\",\"_coreui_react__WEBPACK_IMPORTED_MODULE_9__\",\"callEditActive\",\"variant\",\"color\",\"label\",\"checked\",\"href\",\"rel\",\"target\",\"isOpen\",\"toggle\",\"trashButton\",\"callAdd\",\"react_bootstrap_table__WEBPACK_IMPORTED_MODULE_10__\",\"data\",\"striped\",\"hover\",\"pagination\",\"search\",\"dataField\",\"dataSort\",\"isKey\",\"hidden\",\"dataFormat\",\"dataAlign\",\"loadStates\",\"editFormatter\",\"Component\",\"connect\",\"DaoGeo\",\"dispatch\",\"type\",\"colletion\",\"DbCrud\",\"dbFindColletion\",\"component\",\"dbDelete\",\"fileEdit\",\"newFileEdit\",\"dbEditFile\"],\"mappings\":\"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\",\"sourcesContent\":[\"import React, { Component } from 'react';\\nimport PropTypes from 'prop-types';\\nimport { connect } from 'react-redux';\\nimport { Card, CardHeader, CardBody, Modal, ModalHeader, ModalBody, ModalFooter, Button, ButtonGroup } from 'reactstrap';\\nimport { AppSwitch } from '@coreui/react'\\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\\nimport 'react-bootstrap-table/dist//react-bootstrap-table-all.min.css';\\nimport DbCrud from '../../../Actions/DbCrud';\\n\\nvar flat = true;\\n\\n/**\\n * Compoenente que permite listar todos los paises que existen en la base de datos\\n*/\\nclass CountriesList extends Component {\\n\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      tmpRow : '',\\n      danger: false\\n    }\\n    this.state = {\\n      //Cargamos en el estado el identificador del documento en el que menencuentro \\n      documentId: this.props.match.params.documentId,\\n      //Creamos un objeto donde almacenaremos toda la informaci√≥n de este nodo\\n      rootObj:\\\"\\\",\\n      //Creamos un objeto donde almacenaremos la informacion de los estados de este nodo \\n      statesObj:\\\"\\\"\\n    }; \\n\\n    //Si la url es llamada sin enviar el identificador del documento se retorna a el listado de las paises\\n    if(!this.props.match.params.documentId){\\n      this.props.history.push('/Geo/CountriesList');\\n    }else{\\n      //Recorremos todo el objeto de paises para identificar cual es el pais al que le estamos listando los estados \\n      this.props.obj.forEach(function(country) {\\n          //Identificamos si el nodo que estamos visitando es el nodo equivalente al pais seleccionado\\n          if(country.documentId == this.props.match.params.documentId){\\n              //Si no existen estados creados ya que el pais es nuevo se crea un array vacio\\n              if(country.states == undefined){\\n                country.states = new Array();\\n              }\\n              //se construye el objeto de estado y se le cargan los siguientes datos \\n              this.state = {\\n                  //Identificador del documento que estamos trabajando\\n                  documentId: this.props.match.params.documentId,\\n                  //Objeto completo del pais que estamos trabajando\\n                  rootObj:country,\\n                  //Objeto completo de todos los estados que hacen parte de est pais \\n                  statesObj:country.states\\n              };\\n              //Eliminamos del objeto su identificador para poder utilizarlo para poder adicionar un nuevo registro hijo \\n              delete this.state.rootObj[\\\"documentId\\\"];\\n          }\\n      }.bind(this));\\n  }\\n\\n\\n    this.options = {\\n      sortIndicator: true,\\n      hideSizePerPage: true,\\n      paginationSize: 3,\\n      hidePageListOnlyOnePage: true,\\n      alwaysShowAllBtns: false,\\n      withFirstAndLast: false\\n    }\\n    this.toggleDanger = this.toggleDanger.bind(this);\\n  }\\n\\n  /**Metodo que se ejecuta automaticamente cada vez que el componente es llamado */\\n  componentDidMount() {\\n    if (flat) {\\n      flat = false;\\n      this.props.loadReducer('loadGeo', \\\"geo\\\");\\n    }\\n  }\\n\\n  //Cambia el valor a visible del mensaje de alerta \\n  //guarda el identificador de la fila que sera afectada \\n  toggleDanger(row) {\\n    this.setState({\\n      danger: !this.state.danger,\\n      tmpRow: row.documentId\\n    });\\n  }\\n  \\n  //Funcion que elimina el resgistro o documento seleccionado de la base de datos \\n  trashButton() {\\n    //Llamada a eliminar el registro\\n    this.props.deleteReducer('deleteGeo', \\\"geo\\\", \\\"CountriesList\\\", this.state.tmpRow);\\n    //Desactivar la pantalla de aviso que fue ejecutada para eliminar el registro \\n    this.setState({\\n      danger: !this.state.danger,\\n      tmpRow: ''\\n    });\\n  }\\n\\n  //Funcion que construye los botones de ediccion para cada registro listado en la tabla \\n  editFormatter(cell, row) {\\n    return (\\n      <ButtonGroup>\\n        <Button onClick={this.callEdit.bind(this, row)} size=\\\"sm\\\" className=\\\"btn-spotify btn-brand icon mr-1 mb-1 btn btn-secondary btn-sm\\\">\\n          <i className=\\\"icon-pencil\\\"></i>\\n        </Button>\\n        <Button onClick={this.toggleDanger.bind(this, row)} size=\\\"sm\\\" className=\\\"btn-reddit btn-brand icon mr-1 mb-1 btn btn-secondary btn-sm\\\">\\n          <i className=\\\"icon-trash\\\"></i>\\n        </Button>\\n      </ButtonGroup>\\n    )\\n  }\\n\\n  //Funcion que permite hacer la llamada a un hijo de country \\n  callChild(row) {\\n    this.props.history.push({\\n      pathname: '/Geo/StatesList/'+row.documentId\\n    })\\n  }\\n\\n  //Funcion que permite hacer la llamada al formulario para crear un nuevo registro \\n  callAdd() { this.props.history.push('/Geo/CountriesAdd'); }\\n\\n  //Funcion que permite hacer la llamada al formulario para editar un nuevo registro \\n  callEdit(row) {\\n    this.props.history.push({\\n      pathname: '/Geo/CountriesAdd',\\n      row: row\\n    })\\n  }\\n\\n  //Editar un campo en este caso si esta activo  \\n  callEditActive(row) {\\n    (row.active == 1)? row.active = 0 : row.active = 1;\\n    this.props.editFileReducer('editFileGeo', \\\"geo\\\", \\\"CountriesList\\\", row.documentId, \\\"active\\\", row.active);\\n  }\\n\\n  //Funcion que construye el boton que permite llamar la funcion callChild para redireccionar a los hijos de Country \\n  loadStates(cell, row) {\\n    return (\\n      <Button size=\\\"sm\\\" onClick={() => this.callChild(row)} className=\\\"btn-dropbox btn-brand text mr-1 mb-1 btn btn-secondary btn-lg\\\">\\n        Ver Estados\\n      </Button>\\n    )\\n  }\\n\\n  //Funcion que construye el campo GEO para ser mostrado de una forma mas facil \\n  geopoint(cell, row) {\\n    return (\\n      <div>\\n        Lat: {row.geopoint.latitude} Lon:{row.geopoint.longitude}\\n      </div>\\n    );\\n  }\\n\\n  //Funcion que permite crear el control de estado activo o no del resgistro \\n  active(cell, row) {\\n    if (row.active == '1') {\\n      return (\\n        <AppSwitch onClick={this.callEditActive.bind(this,row)} className={'mx-1'} variant={'pill'} color={'success'} label checked />\\n      );\\n    } else {\\n      return (\\n        <AppSwitch onClick={this.callEditActive.bind(this,row)} className={'mx-1'} variant={'pill'} color={'success'} label />\\n      );\\n    }\\n  }\\n\\n  render() {\\n\\n    return (\\n      <div className=\\\"animated\\\">\\n\\n        <Card>\\n          <CardHeader>\\n            Lista de Paises\\n            <div className=\\\"card-header-actions\\\">\\n              <a href=\\\"https://github.com/AllenFang/react-bootstrap-table\\\" rel=\\\"noopener noreferrer\\\" target=\\\"_blank\\\" className=\\\"card-header-action\\\">\\n                <small className=\\\"text-muted\\\">Aprende</small>\\n              </a>\\n            </div>\\n          </CardHeader>\\n\\n          <Modal isOpen={this.state.danger} toggle={this.toggleDanger}\\n            className={'modal-danger ' + this.props.className}>\\n            <ModalHeader toggle={this.toggleDanger}>Modal title</ModalHeader>\\n            <ModalBody>Esta seguro que desea eliminar el Pais, al hacerlo se eliminaran todos los Estados y ciudades Asociados</ModalBody>\\n            <ModalFooter>\\n              <Button color=\\\"danger\\\" onClick={this.trashButton.bind(this)}>Eliminar</Button>{' '}\\n              <Button color=\\\"secondary\\\" onClick={this.toggleDanger}>Cancel</Button>\\n            </ModalFooter>\\n          </Modal>\\n\\n\\n          <CardBody>\\n            <Button color=\\\"primary\\\" onClick={this.callAdd.bind(this)} ><i className=\\\"fa icon-plus\\\"></i>&nbsp;Crear Pais</Button>\\n            <BootstrapTable data={this.props.obj} striped hover pagination search options={this.options}>\\n              <TableHeaderColumn dataField='countryName' dataSort>Pais</TableHeaderColumn>\\n              <TableHeaderColumn dataField='isoCode' >Iso Code</TableHeaderColumn>\\n              <TableHeaderColumn isKey={true} dataField='documentId' hidden>Identifier ID</TableHeaderColumn>\\n              <TableHeaderColumn dataFormat={this.geopoint} >Geo Punto</TableHeaderColumn>\\n              <TableHeaderColumn dataFormat={this.active.bind(this)} dataAlign='center' >Activo</TableHeaderColumn>\\n              <TableHeaderColumn dataFormat={this.loadStates.bind(this)} dataAlign='right' >Estados</TableHeaderColumn>\\n              <TableHeaderColumn dataFormat={this.editFormatter.bind(this)} dataAlign='right' >Action</TableHeaderColumn>\\n            </BootstrapTable>\\n          </CardBody>\\n        </Card>\\n      </div>\\n    );\\n  }\\n\\n}\\n\\nconst mapStateToProps = (state) => { return { obj: state.DaoGeo } }\\n\\nconst mapDispatchToProps = (dispatch) => {\\n  return {\\n    //type: se utiliza para identificar la accion en el store \\n    //colletion: la collection de la base de datos\\n    //component: componente a resetear para que el cambio se vea automaticamente \\n    //documentId: Identificador del registro a modificar \\n    loadReducer: (type, colletion) => { \\n      DbCrud.dbFindColletion(dispatch, type, colletion); \\n    },\\n    deleteReducer: (type, colletion, component, documentId) => { \\n      DbCrud.dbDelete(dispatch, type, colletion, component, documentId); \\n    },\\n    editFileReducer: (type, colletion, component, documentId, fileEdit, newFileEdit) => { \\n      DbCrud.dbEditFile(dispatch, type, colletion, component, documentId, fileEdit, newFileEdit); \\n    }\\n  }\\n}\\n\\nexport default connect(mapStateToProps, mapDispatchToProps)(CountriesList);\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{1198:function(e,t,a){\"use strict\";a.r(t);var n=a(7),i=a(8),o=a(10),s=a(9),r=a(11),l=a(36),c=a(1),d=a.n(c),m=a(37),u=a(2),h=a(5),p=a(422),b=(a(423),a(193)),g=!0,E=function(e){function t(e){var a;return Object(n.a)(this,t),(a=Object(o.a)(this,Object(s.a)(t).call(this,e))).state={tmpRow:\"\",danger:!1},a.state={documentId:a.props.match.params.documentId,rootObj:\"\",statesObj:\"\"},a.props.match.params.documentId?a.props.obj.forEach(function(e){e.documentId==this.props.match.params.documentId&&(void 0==e.states&&(e.states=new Array),this.state={documentId:this.props.match.params.documentId,rootObj:e,statesObj:e.states},delete this.state.rootObj.documentId)}.bind(Object(l.a)(Object(l.a)(a)))):a.props.history.push(\"/Geo/CountriesList\"),a.options={sortIndicator:!0,hideSizePerPage:!0,paginationSize:3,hidePageListOnlyOnePage:!0,alwaysShowAllBtns:!1,withFirstAndLast:!1},a.toggleDanger=a.toggleDanger.bind(Object(l.a)(Object(l.a)(a))),a}return Object(r.a)(t,e),Object(i.a)(t,[{key:\"componentDidMount\",value:function(){g&&(g=!1,this.props.loadReducer(\"loadGeo\",\"geo\"))}},{key:\"toggleDanger\",value:function(e){this.setState({danger:!this.state.danger,tmpRow:e.documentId})}},{key:\"trashButton\",value:function(){this.props.deleteReducer(\"deleteGeo\",\"geo\",\"CountriesList\",this.state.tmpRow),this.setState({danger:!this.state.danger,tmpRow:\"\"})}},{key:\"editFormatter\",value:function(e,t){return d.a.createElement(u.g,null,d.a.createElement(u.e,{onClick:this.callEdit.bind(this,t),size:\"sm\",className:\"btn-spotify btn-brand icon mr-1 mb-1 btn btn-secondary btn-sm\"},d.a.createElement(\"i\",{className:\"icon-pencil\"})),d.a.createElement(u.e,{onClick:this.toggleDanger.bind(this,t),size:\"sm\",className:\"btn-reddit btn-brand icon mr-1 mb-1 btn btn-secondary btn-sm\"},d.a.createElement(\"i\",{className:\"icon-trash\"})))}},{key:\"callChild\",value:function(e){this.props.history.push({pathname:\"/Geo/StatesList/\"+e.documentId})}},{key:\"callAdd\",value:function(){this.props.history.push(\"/Geo/CountriesAdd\")}},{key:\"callEdit\",value:function(e){this.props.history.push({pathname:\"/Geo/CountriesAdd\",row:e})}},{key:\"callEditActive\",value:function(e){1==e.active?e.active=0:e.active=1,this.props.editFileReducer(\"editFileGeo\",\"geo\",\"CountriesList\",e.documentId,\"active\",e.active)}},{key:\"loadStates\",value:function(e,t){var a=this;return d.a.createElement(u.e,{size:\"sm\",onClick:function(){return a.callChild(t)},className:\"btn-dropbox btn-brand text mr-1 mb-1 btn btn-secondary btn-lg\"},\"Ver Estados\")}},{key:\"geopoint\",value:function(e,t){return d.a.createElement(\"div\",null,\"Lat: \",t.geopoint.latitude,\" Lon:\",t.geopoint.longitude)}},{key:\"active\",value:function(e,t){return\"1\"==t.active?d.a.createElement(h.m,{onClick:this.callEditActive.bind(this,t),className:\"mx-1\",variant:\"pill\",color:\"success\",label:!0,checked:!0}):d.a.createElement(h.m,{onClick:this.callEditActive.bind(this,t),className:\"mx-1\",variant:\"pill\",color:\"success\",label:!0})}},{key:\"render\",value:function(){return d.a.createElement(\"div\",{className:\"animated\"},d.a.createElement(u.i,null,d.a.createElement(u.n,null,\"Lista de Paises\",d.a.createElement(\"div\",{className:\"card-header-actions\"},d.a.createElement(\"a\",{href:\"https://github.com/AllenFang/react-bootstrap-table\",rel:\"noopener noreferrer\",target:\"_blank\",className:\"card-header-action\"},d.a.createElement(\"small\",{className:\"text-muted\"},\"Aprende\")))),d.a.createElement(u.R,{isOpen:this.state.danger,toggle:this.toggleDanger,className:\"modal-danger \"+this.props.className},d.a.createElement(u.U,{toggle:this.toggleDanger},\"Modal title\"),d.a.createElement(u.S,null,\"Esta seguro que desea eliminar el Pais, al hacerlo se eliminaran todos los Estados y ciudades Asociados\"),d.a.createElement(u.T,null,d.a.createElement(u.e,{color:\"danger\",onClick:this.trashButton.bind(this)},\"Eliminar\"),\" \",d.a.createElement(u.e,{color:\"secondary\",onClick:this.toggleDanger},\"Cancel\"))),d.a.createElement(u.j,null,d.a.createElement(u.e,{color:\"primary\",onClick:this.callAdd.bind(this)},d.a.createElement(\"i\",{className:\"fa icon-plus\"}),\"\\xa0Crear Pais\"),d.a.createElement(p.BootstrapTable,{data:this.props.obj,striped:!0,hover:!0,pagination:!0,search:!0,options:this.options},d.a.createElement(p.TableHeaderColumn,{dataField:\"countryName\",dataSort:!0},\"Pais\"),d.a.createElement(p.TableHeaderColumn,{dataField:\"isoCode\"},\"Iso Code\"),d.a.createElement(p.TableHeaderColumn,{isKey:!0,dataField:\"documentId\",hidden:!0},\"Identifier ID\"),d.a.createElement(p.TableHeaderColumn,{dataFormat:this.geopoint},\"Geo Punto\"),d.a.createElement(p.TableHeaderColumn,{dataFormat:this.active.bind(this),dataAlign:\"center\"},\"Activo\"),d.a.createElement(p.TableHeaderColumn,{dataFormat:this.loadStates.bind(this),dataAlign:\"right\"},\"Estados\"),d.a.createElement(p.TableHeaderColumn,{dataFormat:this.editFormatter.bind(this),dataAlign:\"right\"},\"Action\")))))}}]),t}(c.Component);t.default=Object(m.b)(function(e){return{obj:e.DaoGeo}},function(e){return{loadReducer:function(t,a){b.a.dbFindColletion(e,t,a)},deleteReducer:function(t,a,n,i){b.a.dbDelete(e,t,a,n,i)},editFileReducer:function(t,a,n,i,o,s){b.a.dbEditFile(e,t,a,n,i,o,s)}}})(E)}}]);","extractedComments":[]}