{"ast":null,"code":"var orders = {\n  listOrders: [],\n  listFilters: [],\n  pagination: [],\n  listOrdersEdit: [],\n  listOrdersEditHistory: [],\n  listOrdersEditStatus: [],\n  listOrdersEditUnits: [] //se pasa un estado por defecto para definicion de estructura\n\n};\n\nfunction Orders() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : orders;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  //console.log(action.data);\n  var NewState = Object.assign({}, state);\n\n  if (action.type == \"loadOrders\") {\n    NewState.pagination = action.data.info;\n    NewState.listOrders = action.data.data;\n  }\n\n  if (action.type == \"loadFilters\") {\n    //action.data.data.unshift({_id:0,code:0,name:\"Todas los Proveedores\"});\n    //console.log(action.data.status);\n    NewState.listFilters = action.data;\n  }\n\n  if (action.type == \"loadOrdersEdit\") {\n    NewState.listOrdersEditStatus = action.data.status;\n    NewState.listOrdersEditUnits = action.data.units;\n    NewState.listOrdersEdit = action.data.order;\n    NewState.listOrdersEditHistory = action.data.history;\n  }\n\n  if (action.type == \"loadOrdersUpdate\") {\n    /*\n    console.log(action.data);\n    console.log(NewState.listOrdersEdit);\n    if(action.data.nModified == \"1\"){\n        NewState.listOrdersEdit.forEach((val, item) => {\n            if(val._id == action.data._id){\n                if(action.data.file == \"status\") NewState.listOrdersEdit.status = action.data.value;\n                if(action.data.file == \"unit\") NewState.listOrdersEdit.unit = action.data.value;\n            }\n        })\n    }*/\n  }\n\n  return NewState;\n}\n\nvar DaoOrders = {\n  Orders: Orders\n};\nexport default DaoOrders;","map":{"version":3,"sources":["/Users/danielobedortegahernandez/iCloud/Documents/GitHub/backoffice/src/Reducers/DaoOrders.js"],"names":["orders","listOrders","listFilters","pagination","listOrdersEdit","listOrdersEditHistory","listOrdersEditStatus","listOrdersEditUnits","Orders","state","action","NewState","Object","assign","type","data","info","status","units","order","history","DaoOrders"],"mappings":"AAEA,IAAMA,MAAM,GAAG;AACXC,EAAAA,UAAU,EAAC,EADA;AAEXC,EAAAA,WAAW,EAAC,EAFD;AAGXC,EAAAA,UAAU,EAAC,EAHA;AAIXC,EAAAA,cAAc,EAAC,EAJJ;AAKXC,EAAAA,qBAAqB,EAAC,EALX;AAMXC,EAAAA,oBAAoB,EAAC,EANV;AAOXC,EAAAA,mBAAmB,EAAC,EAPT,CAUf;;AAVe,CAAf;;AAWA,SAASC,MAAT,GAAuC;AAAA,MAAvBC,KAAuB,uEAAfT,MAAe;AAAA,MAAPU,MAAO;AACnC;AACA,MAAIC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAiBJ,KAAjB,CAAf;;AACA,MAAGC,MAAM,CAACI,IAAP,IAAe,YAAlB,EAA+B;AAC3BH,IAAAA,QAAQ,CAACR,UAAT,GAAsBO,MAAM,CAACK,IAAP,CAAYC,IAAlC;AACAL,IAAAA,QAAQ,CAACV,UAAT,GAAsBS,MAAM,CAACK,IAAP,CAAYA,IAAlC;AACH;;AACD,MAAGL,MAAM,CAACI,IAAP,IAAe,aAAlB,EAAgC;AAC5B;AACA;AACAH,IAAAA,QAAQ,CAACT,WAAT,GAAuBQ,MAAM,CAACK,IAA9B;AACH;;AACD,MAAGL,MAAM,CAACI,IAAP,IAAe,gBAAlB,EAAmC;AAC/BH,IAAAA,QAAQ,CAACL,oBAAT,GAAgCI,MAAM,CAACK,IAAP,CAAYE,MAA5C;AACAN,IAAAA,QAAQ,CAACJ,mBAAT,GAA+BG,MAAM,CAACK,IAAP,CAAYG,KAA3C;AACAP,IAAAA,QAAQ,CAACP,cAAT,GAA0BM,MAAM,CAACK,IAAP,CAAYI,KAAtC;AACAR,IAAAA,QAAQ,CAACN,qBAAT,GAAiCK,MAAM,CAACK,IAAP,CAAYK,OAA7C;AACH;;AACD,MAAGV,MAAM,CAACI,IAAP,IAAe,kBAAlB,EAAqC;AACjC;;;;;;;;;;;AAYH;;AACD,SAAOH,QAAP;AACH;;AAED,IAAMU,SAAS,GAAG;AAACb,EAAAA,MAAM,EAANA;AAAD,CAAlB;AAEA,eAAea,SAAf","sourcesContent":["\n\nconst orders = {\n    listOrders:[], \n    listFilters:[], \n    pagination:[], \n    listOrdersEdit:[],\n    listOrdersEditHistory:[],\n    listOrdersEditStatus:[],\n    listOrdersEditUnits:[]\n}\n\n//se pasa un estado por defecto para definicion de estructura\nfunction Orders(state = orders, action){\n    //console.log(action.data);\n    var NewState = Object.assign({},state);\n    if(action.type == \"loadOrders\"){\n        NewState.pagination = action.data.info;\n        NewState.listOrders = action.data.data;\n    }\n    if(action.type == \"loadFilters\"){\n        //action.data.data.unshift({_id:0,code:0,name:\"Todas los Proveedores\"});\n        //console.log(action.data.status);\n        NewState.listFilters = action.data;\n    }\n    if(action.type == \"loadOrdersEdit\"){\n        NewState.listOrdersEditStatus = action.data.status;\n        NewState.listOrdersEditUnits = action.data.units;\n        NewState.listOrdersEdit = action.data.order;\n        NewState.listOrdersEditHistory = action.data.history;\n    }\n    if(action.type == \"loadOrdersUpdate\"){\n        /*\n        console.log(action.data);\n        console.log(NewState.listOrdersEdit);\n        if(action.data.nModified == \"1\"){\n            NewState.listOrdersEdit.forEach((val, item) => {\n                if(val._id == action.data._id){\n                    if(action.data.file == \"status\") NewState.listOrdersEdit.status = action.data.value;\n                    if(action.data.file == \"unit\") NewState.listOrdersEdit.unit = action.data.value;\n                }\n            })\n        }*/\n        \n    }\n    return NewState;\n}\n\nconst DaoOrders = {Orders}\n\nexport default DaoOrders;"]},"metadata":{},"sourceType":"module"}