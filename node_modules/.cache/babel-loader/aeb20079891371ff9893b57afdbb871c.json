{"ast":null,"code":"import _classCallCheck from \"/Users/danielobedortegahernandez/Documents/GitHub/bobSeller/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/danielobedortegahernandez/Documents/GitHub/bobSeller/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/danielobedortegahernandez/Documents/GitHub/bobSeller/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/danielobedortegahernandez/Documents/GitHub/bobSeller/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/danielobedortegahernandez/Documents/GitHub/bobSeller/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/danielobedortegahernandez/Documents/GitHub/bobSeller/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/danielobedortegahernandez/Documents/GitHub/bobSeller/src/views/Owner/Geo/CountriesList.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Card, CardHeader, CardBody, Modal, ModalHeader, ModalBody, ModalFooter, Button, ButtonGroup } from 'reactstrap';\nimport { AppSwitch } from '@coreui/react';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nimport 'react-bootstrap-table/dist//react-bootstrap-table-all.min.css';\nimport DbCrud from '../../../Pojo/DbCrud';\nvar flat = true;\n\nvar CountriesList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CountriesList, _Component);\n\n  function CountriesList(props) {\n    var _this;\n\n    _classCallCheck(this, CountriesList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CountriesList).call(this, props));\n    _this.state = {\n      tmpRow: '',\n      danger: false\n    };\n    _this.options = {\n      sortIndicator: true,\n      hideSizePerPage: true,\n      paginationSize: 3,\n      hidePageListOnlyOnePage: true,\n      alwaysShowAllBtns: false,\n      withFirstAndLast: false\n    };\n    _this.toggleDanger = _this.toggleDanger.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(CountriesList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (flat) {\n        flat = false;\n        this.props.loadReducer('loadGeo', \"geo\");\n      }\n    } //Cambia el valor a visible del mensaje de alerta \n    //guarda el identificador de la fila que sera afectada \n\n  }, {\n    key: \"toggleDanger\",\n    value: function toggleDanger(row) {\n      this.setState({\n        danger: !this.state.danger,\n        tmpRow: row.documentId\n      });\n    } //Funcion que elimina el resgistro o documento seleccionado de la base de datos \n\n  }, {\n    key: \"trashButton\",\n    value: function trashButton() {\n      //Llamada a eliminar el registro\n      this.props.deleteReducer('deleteGeo', \"geo\", \"CountriesList\", this.state.tmpRow); //Desactivar la pantalla de aviso que fue ejecutada para eliminar el registro \n\n      this.setState({\n        danger: !this.state.danger,\n        tmpRow: ''\n      });\n    } //Funcion que construye los botones de ediccion para cada registro listado en la tabla \n\n  }, {\n    key: \"editFormatter\",\n    value: function editFormatter(cell, row) {\n      return React.createElement(ButtonGroup, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: this.callEdit.bind(this, row),\n        size: \"sm\",\n        className: \"btn-spotify btn-brand icon mr-1 mb-1 btn btn-secondary btn-sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"icon-pencil\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      })), React.createElement(Button, {\n        onClick: this.toggleDanger.bind(this, row),\n        size: \"sm\",\n        className: \"btn-reddit btn-brand icon mr-1 mb-1 btn btn-secondary btn-sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"icon-trash\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      })));\n    } //Funcion que permite hacer la llamada a un hijo de country \n\n  }, {\n    key: \"callChild\",\n    value: function callChild(row) {\n      this.props.history.push({\n        pathname: '/Geo/StatesList/' + row.documentId\n      });\n    } //Funcion que permite hacer la llamada al formulario para crear un nuevo registro \n\n  }, {\n    key: \"callAdd\",\n    value: function callAdd() {\n      this.props.history.push('/Geo/CountriesAdd');\n    } //Funcion que permite hacer la llamada al formulario para editar un nuevo registro \n\n  }, {\n    key: \"callEdit\",\n    value: function callEdit(row) {\n      this.props.history.push({\n        pathname: '/Geo/CountriesAdd',\n        row: row\n      });\n    } //Editar un campo en este caso si esta activo  \n\n  }, {\n    key: \"callEditActive\",\n    value: function callEditActive(row) {\n      row.active == 1 ? row.active = 0 : row.active = 1;\n      this.props.editFileReducer('editFileGeo', \"geo\", \"CountriesList\", row.documentId, \"active\", row.active);\n    } //Funcion que construye el boton que permite llamar la funcion callChild para redireccionar a los hijos de Country \n\n  }, {\n    key: \"loadStates\",\n    value: function loadStates(cell, row) {\n      var _this2 = this;\n\n      return React.createElement(Button, {\n        size: \"sm\",\n        onClick: function onClick() {\n          return _this2.callChild(row);\n        },\n        className: \"btn-dropbox btn-brand text mr-1 mb-1 btn btn-secondary btn-lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"Ver Estados\");\n    } //Funcion que construye el campo GEO para ser mostrado de una forma mas facil \n\n  }, {\n    key: \"geopoint\",\n    value: function geopoint(cell, row) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"Lat: \", row.geopoint.latitude, \" Lon:\", row.geopoint.longitude);\n    } //Funcion que permite crear el control de estado activo o no del resgistro \n\n  }, {\n    key: \"active\",\n    value: function active(cell, row) {\n      if (row.active == '1') {\n        return React.createElement(AppSwitch, {\n          onClick: this.callEditActive.bind(this, row),\n          className: 'mx-1',\n          variant: 'pill',\n          color: 'success',\n          label: true,\n          checked: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        });\n      } else {\n        return React.createElement(AppSwitch, {\n          onClick: this.callEditActive.bind(this, row),\n          className: 'mx-1',\n          variant: 'pill',\n          color: 'success',\n          label: true,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"animated\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"Lista de Paises\", React.createElement(\"div\", {\n        className: \"card-header-actions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"https://github.com/AllenFang/react-bootstrap-table\",\n        rel: \"noopener noreferrer\",\n        target: \"_blank\",\n        className: \"card-header-action\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        className: \"text-muted\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"Aprende\")))), React.createElement(Modal, {\n        isOpen: this.state.danger,\n        toggle: this.toggleDanger,\n        className: 'modal-danger ' + this.props.className,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(ModalHeader, {\n        toggle: this.toggleDanger,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"Modal title\"), React.createElement(ModalBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, \"Esta seguro que desea eliminar el Pais, al hacerlo se eliminaran todos los Estados y ciudades Asociados\"), React.createElement(ModalFooter, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"danger\",\n        onClick: this.trashButton.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, \"Eliminar\"), ' ', React.createElement(Button, {\n        color: \"secondary\",\n        onClick: this.toggleDanger,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, \"Cancel\"))), React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"primary\",\n        onClick: this.callAdd.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: \"fa icon-plus\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }), \"\\xA0Crear Pais\"), React.createElement(BootstrapTable, {\n        data: this.props.obj,\n        striped: true,\n        hover: true,\n        pagination: true,\n        search: true,\n        options: this.options,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(TableHeaderColumn, {\n        dataField: \"countryName\",\n        dataSort: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, \"Pais\"), React.createElement(TableHeaderColumn, {\n        dataField: \"isoCode\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, \"Iso Code\"), React.createElement(TableHeaderColumn, {\n        isKey: true,\n        dataField: \"documentId\",\n        hidden: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \"Identifier ID\"), React.createElement(TableHeaderColumn, {\n        dataFormat: this.geopoint,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"Geo Punto\"), React.createElement(TableHeaderColumn, {\n        dataFormat: this.active.bind(this),\n        dataAlign: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, \"Activo\"), React.createElement(TableHeaderColumn, {\n        dataFormat: this.loadStates.bind(this),\n        dataAlign: \"right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \"Estados\"), React.createElement(TableHeaderColumn, {\n        dataFormat: this.editFormatter.bind(this),\n        dataAlign: \"right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, \"Action\")))));\n    }\n  }]);\n\n  return CountriesList;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    obj: state.DaoGeo\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    //type: se utiliza para identificar la accion en el store \n    //colletion: la collection de la base de datos\n    //component: componente a resetear para que el cambio se vea automaticamente \n    //documentId: Identificador del registro a modificar \n    loadReducer: function loadReducer(type, colletion) {\n      DbCrud.dbFindColletion(dispatch, type, colletion);\n    },\n    deleteReducer: function deleteReducer(type, colletion, component, documentId) {\n      DbCrud.dbDelete(dispatch, type, colletion, component, documentId);\n    },\n    editFileReducer: function editFileReducer(type, colletion, component, documentId, fileEdit, newFileEdit) {\n      DbCrud.dbEditFile(dispatch, type, colletion, component, documentId, fileEdit, newFileEdit);\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CountriesList);","map":{"version":3,"sources":["/Users/danielobedortegahernandez/Documents/GitHub/bobSeller/src/views/Owner/Geo/CountriesList.js"],"names":["React","Component","connect","Card","CardHeader","CardBody","Modal","ModalHeader","ModalBody","ModalFooter","Button","ButtonGroup","AppSwitch","BootstrapTable","TableHeaderColumn","DbCrud","flat","CountriesList","props","state","tmpRow","danger","options","sortIndicator","hideSizePerPage","paginationSize","hidePageListOnlyOnePage","alwaysShowAllBtns","withFirstAndLast","toggleDanger","bind","loadReducer","row","setState","documentId","deleteReducer","cell","callEdit","history","push","pathname","active","editFileReducer","callChild","geopoint","latitude","longitude","callEditActive","className","trashButton","callAdd","obj","loadStates","editFormatter","mapStateToProps","DaoGeo","mapDispatchToProps","dispatch","type","colletion","dbFindColletion","component","dbDelete","fileEdit","newFileEdit","dbEditFile"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Card, CardHeader, CardBody, Modal, ModalHeader, ModalBody, ModalFooter, Button, ButtonGroup } from 'reactstrap';\nimport { AppSwitch } from '@coreui/react'\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nimport 'react-bootstrap-table/dist//react-bootstrap-table-all.min.css';\nimport DbCrud from '../../../Pojo/DbCrud';\n\nvar flat = true;\n\nclass CountriesList extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      tmpRow : '',\n      danger: false\n    }\n    this.options = {\n      sortIndicator: true,\n      hideSizePerPage: true,\n      paginationSize: 3,\n      hidePageListOnlyOnePage: true,\n      alwaysShowAllBtns: false,\n      withFirstAndLast: false\n    }\n    this.toggleDanger = this.toggleDanger.bind(this);\n  }\n\n  componentDidMount() {\n    if (flat) {\n      flat = false;\n      this.props.loadReducer('loadGeo', \"geo\");\n    }\n  }\n\n  //Cambia el valor a visible del mensaje de alerta \n  //guarda el identificador de la fila que sera afectada \n  toggleDanger(row) {\n    this.setState({\n      danger: !this.state.danger,\n      tmpRow: row.documentId\n    });\n  }\n  \n  //Funcion que elimina el resgistro o documento seleccionado de la base de datos \n  trashButton() {\n    //Llamada a eliminar el registro\n    this.props.deleteReducer('deleteGeo', \"geo\", \"CountriesList\", this.state.tmpRow);\n    //Desactivar la pantalla de aviso que fue ejecutada para eliminar el registro \n    this.setState({\n      danger: !this.state.danger,\n      tmpRow: ''\n    });\n  }\n\n  //Funcion que construye los botones de ediccion para cada registro listado en la tabla \n  editFormatter(cell, row) {\n    return (\n      <ButtonGroup>\n        <Button onClick={this.callEdit.bind(this, row)} size=\"sm\" className=\"btn-spotify btn-brand icon mr-1 mb-1 btn btn-secondary btn-sm\">\n          <i className=\"icon-pencil\"></i>\n        </Button>\n        <Button onClick={this.toggleDanger.bind(this, row)} size=\"sm\" className=\"btn-reddit btn-brand icon mr-1 mb-1 btn btn-secondary btn-sm\">\n          <i className=\"icon-trash\"></i>\n        </Button>\n      </ButtonGroup>\n    )\n  }\n\n  //Funcion que permite hacer la llamada a un hijo de country \n  callChild(row) {\n    this.props.history.push({\n      pathname: '/Geo/StatesList/'+row.documentId\n    })\n  }\n\n  //Funcion que permite hacer la llamada al formulario para crear un nuevo registro \n  callAdd() { this.props.history.push('/Geo/CountriesAdd'); }\n\n  //Funcion que permite hacer la llamada al formulario para editar un nuevo registro \n  callEdit(row) {\n    this.props.history.push({\n      pathname: '/Geo/CountriesAdd',\n      row: row\n    })\n  }\n\n  //Editar un campo en este caso si esta activo  \n  callEditActive(row) {\n    (row.active == 1)? row.active = 0 : row.active = 1;\n    this.props.editFileReducer('editFileGeo', \"geo\", \"CountriesList\", row.documentId, \"active\", row.active);\n  }\n\n  //Funcion que construye el boton que permite llamar la funcion callChild para redireccionar a los hijos de Country \n  loadStates(cell, row) {\n    return (\n      <Button size=\"sm\" onClick={() => this.callChild(row)} className=\"btn-dropbox btn-brand text mr-1 mb-1 btn btn-secondary btn-lg\">\n        Ver Estados\n      </Button>\n    )\n  }\n\n  //Funcion que construye el campo GEO para ser mostrado de una forma mas facil \n  geopoint(cell, row) {\n    return (\n      <div>\n        Lat: {row.geopoint.latitude} Lon:{row.geopoint.longitude}\n      </div>\n    );\n  }\n\n  //Funcion que permite crear el control de estado activo o no del resgistro \n  active(cell, row) {\n    if (row.active == '1') {\n      return (\n        <AppSwitch onClick={this.callEditActive.bind(this,row)} className={'mx-1'} variant={'pill'} color={'success'} label checked />\n      );\n    } else {\n      return (\n        <AppSwitch onClick={this.callEditActive.bind(this,row)} className={'mx-1'} variant={'pill'} color={'success'} label />\n      );\n    }\n  }\n\n  render() {\n\n    return (\n      <div className=\"animated\">\n\n        <Card>\n          <CardHeader>\n            Lista de Paises\n            <div className=\"card-header-actions\">\n              <a href=\"https://github.com/AllenFang/react-bootstrap-table\" rel=\"noopener noreferrer\" target=\"_blank\" className=\"card-header-action\">\n                <small className=\"text-muted\">Aprende</small>\n              </a>\n            </div>\n          </CardHeader>\n\n          <Modal isOpen={this.state.danger} toggle={this.toggleDanger}\n            className={'modal-danger ' + this.props.className}>\n            <ModalHeader toggle={this.toggleDanger}>Modal title</ModalHeader>\n            <ModalBody>Esta seguro que desea eliminar el Pais, al hacerlo se eliminaran todos los Estados y ciudades Asociados</ModalBody>\n            <ModalFooter>\n              <Button color=\"danger\" onClick={this.trashButton.bind(this)}>Eliminar</Button>{' '}\n              <Button color=\"secondary\" onClick={this.toggleDanger}>Cancel</Button>\n            </ModalFooter>\n          </Modal>\n\n\n          <CardBody>\n            <Button color=\"primary\" onClick={this.callAdd.bind(this)} ><i className=\"fa icon-plus\"></i>&nbsp;Crear Pais</Button>\n            <BootstrapTable data={this.props.obj} striped hover pagination search options={this.options}>\n              <TableHeaderColumn dataField='countryName' dataSort>Pais</TableHeaderColumn>\n              <TableHeaderColumn dataField='isoCode' >Iso Code</TableHeaderColumn>\n              <TableHeaderColumn isKey={true} dataField='documentId' hidden>Identifier ID</TableHeaderColumn>\n              <TableHeaderColumn dataFormat={this.geopoint} >Geo Punto</TableHeaderColumn>\n              <TableHeaderColumn dataFormat={this.active.bind(this)} dataAlign='center' >Activo</TableHeaderColumn>\n              <TableHeaderColumn dataFormat={this.loadStates.bind(this)} dataAlign='right' >Estados</TableHeaderColumn>\n              <TableHeaderColumn dataFormat={this.editFormatter.bind(this)} dataAlign='right' >Action</TableHeaderColumn>\n            </BootstrapTable>\n          </CardBody>\n        </Card>\n      </div>\n    );\n  }\n\n}\n\nconst mapStateToProps = (state) => { return { obj: state.DaoGeo } }\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    //type: se utiliza para identificar la accion en el store \n    //colletion: la collection de la base de datos\n    //component: componente a resetear para que el cambio se vea automaticamente \n    //documentId: Identificador del registro a modificar \n    loadReducer: (type, colletion) => { \n      DbCrud.dbFindColletion(dispatch, type, colletion); \n    },\n    deleteReducer: (type, colletion, component, documentId) => { \n      DbCrud.dbDelete(dispatch, type, colletion, component, documentId); \n    },\n    editFileReducer: (type, colletion, component, documentId, fileEdit, newFileEdit) => { \n      DbCrud.dbEditFile(dispatch, type, colletion, component, documentId, fileEdit, newFileEdit); \n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CountriesList);\n"]},"metadata":{},"sourceType":"module"}