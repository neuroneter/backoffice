{"ast":null,"code":"import _classCallCheck from \"/Users/danielobedortegahernandez/iCloud/Documents/GitHub/bobSeller/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/danielobedortegahernandez/iCloud/Documents/GitHub/bobSeller/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/danielobedortegahernandez/iCloud/Documents/GitHub/bobSeller/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/danielobedortegahernandez/iCloud/Documents/GitHub/bobSeller/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/danielobedortegahernandez/iCloud/Documents/GitHub/bobSeller/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/danielobedortegahernandez/iCloud/Documents/GitHub/bobSeller/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/danielobedortegahernandez/iCloud/Documents/GitHub/bobSeller/src/views/Owner/Orders/OrdersList.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Card, CardHeader, CardBody, Modal, ModalHeader, ModalBody, ModalFooter, Button, ButtonGroup } from 'reactstrap';\nimport { AppSwitch } from '@coreui/react';\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nimport 'react-bootstrap-table/dist//react-bootstrap-table-all.min.css';\nimport DbCrud from '../../../Pojo/DbCrud';\nvar flat = true;\n/**\n * Compoenente que permite listar todos los paises que existen en la base de datos\n*/\n\nvar OrdersList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(OrdersList, _Component);\n\n  function OrdersList(props) {\n    var _this;\n\n    _classCallCheck(this, OrdersList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(OrdersList).call(this, props));\n    _this.state = {\n      tmpRow: '',\n      danger: false\n    };\n    _this.state = {\n      //Cargamos en el estado el identificador del documento en el que menencuentro \n      documentId: _this.props.match.params.documentId,\n      //Creamos un objeto donde almacenaremos toda la informaci√≥n de este nodo\n      rootObj: \"\",\n      //Creamos un objeto donde almacenaremos la informacion de los estados de este nodo \n      statesObj: \"\"\n    }; //Si la url es llamada sin enviar el identificador del documento se retorna a el listado de las paises\n\n    if (!_this.props.match.params.documentId) {// this.props.history.push('/Geo/CountriesList');\n    } else {\n      //Recorremos todo el objeto de paises para identificar cual es el pais al que le estamos listando los estados \n      _this.props.obj.forEach(function (country) {\n        //Identificamos si el nodo que estamos visitando es el nodo equivalente al pais seleccionado\n        if (country.documentId == this.props.match.params.documentId) {\n          //Si no existen estados creados ya que el pais es nuevo se crea un array vacio\n          if (country.states == undefined) {\n            country.states = new Array();\n          } //se construye el objeto de estado y se le cargan los siguientes datos \n\n\n          this.state = {\n            //Identificador del documento que estamos trabajando\n            documentId: this.props.match.params.documentId,\n            //Objeto completo del pais que estamos trabajando\n            rootObj: country,\n            //Objeto completo de todos los estados que hacen parte de est pais \n            statesObj: country.states\n          }; //Eliminamos del objeto su identificador para poder utilizarlo para poder adicionar un nuevo registro hijo \n\n          delete this.state.rootObj[\"documentId\"];\n        }\n      }.bind(_assertThisInitialized(_assertThisInitialized(_this))));\n    }\n\n    _this.options = {\n      sortIndicator: true,\n      hideSizePerPage: true,\n      paginationSize: 3,\n      hidePageListOnlyOnePage: true,\n      alwaysShowAllBtns: false,\n      withFirstAndLast: false\n    };\n    _this.toggleDanger = _this.toggleDanger.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /**Metodo que se ejecuta automaticamente cada vez que el componente es llamado */\n\n\n  _createClass(OrdersList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (flat) {\n        flat = false;\n        this.props.loadReducer('loadOrders', \"orders/find\");\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"animated\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, React.createElement(CardHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \"Lista Ordenes\", React.createElement(\"div\", {\n        className: \"card-header-actions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"https://github.com/AllenFang/react-bootstrap-table\",\n        rel: \"noopener noreferrer\",\n        target: \"_blank\",\n        className: \"card-header-action\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        className: \"text-muted\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"Aprende\")))), React.createElement(CardBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return OrdersList;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  console.log(\"mapStateToProps\");\n  return {\n    obj: state.DaoOrders\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    //type: se utiliza para identificar la accion en el store \n    //colletion: la collection de la base de datos\n    //component: componente a resetear para que el cambio se vea automaticamente \n    //documentId: Identificador del registro a modificar \n    loadReducer: function loadReducer(type, colletion) {\n      DbCrud.dbMLoad(dispatch, type, colletion); //DbCrud.dbFindColletion(dispatch, type, colletion); \n    },\n    deleteReducer: function deleteReducer(type, colletion, component, documentId) {\n      DbCrud.dbDelete(dispatch, type, colletion, component, documentId);\n    },\n    editFileReducer: function editFileReducer(type, colletion, component, documentId, fileEdit, newFileEdit) {\n      DbCrud.dbEditFile(dispatch, type, colletion, component, documentId, fileEdit, newFileEdit);\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrdersList);","map":{"version":3,"sources":["/Users/danielobedortegahernandez/iCloud/Documents/GitHub/bobSeller/src/views/Owner/Orders/OrdersList.js"],"names":["React","Component","connect","Card","CardHeader","CardBody","Modal","ModalHeader","ModalBody","ModalFooter","Button","ButtonGroup","AppSwitch","BootstrapTable","TableHeaderColumn","DbCrud","flat","OrdersList","props","state","tmpRow","danger","documentId","match","params","rootObj","statesObj","obj","forEach","country","states","undefined","Array","bind","options","sortIndicator","hideSizePerPage","paginationSize","hidePageListOnlyOnePage","alwaysShowAllBtns","withFirstAndLast","toggleDanger","loadReducer","mapStateToProps","console","log","DaoOrders","mapDispatchToProps","dispatch","type","colletion","dbMLoad","deleteReducer","component","dbDelete","editFileReducer","fileEdit","newFileEdit","dbEditFile"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Card, CardHeader, CardBody, Modal, ModalHeader, ModalBody, ModalFooter, Button, ButtonGroup } from 'reactstrap';\nimport { AppSwitch } from '@coreui/react'\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nimport 'react-bootstrap-table/dist//react-bootstrap-table-all.min.css';\nimport DbCrud from '../../../Pojo/DbCrud';\n\nvar flat = true;\n\n/**\n * Compoenente que permite listar todos los paises que existen en la base de datos\n*/\nclass OrdersList extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      tmpRow : '',\n      danger: false\n    }\n    this.state = {\n      //Cargamos en el estado el identificador del documento en el que menencuentro \n      documentId: this.props.match.params.documentId,\n      //Creamos un objeto donde almacenaremos toda la informaci√≥n de este nodo\n      rootObj:\"\",\n      //Creamos un objeto donde almacenaremos la informacion de los estados de este nodo \n      statesObj:\"\"\n    }; \n\n    //Si la url es llamada sin enviar el identificador del documento se retorna a el listado de las paises\n    if(!this.props.match.params.documentId){\n     // this.props.history.push('/Geo/CountriesList');\n    }else{\n      //Recorremos todo el objeto de paises para identificar cual es el pais al que le estamos listando los estados \n      this.props.obj.forEach(function(country) {\n          //Identificamos si el nodo que estamos visitando es el nodo equivalente al pais seleccionado\n          if(country.documentId == this.props.match.params.documentId){\n              //Si no existen estados creados ya que el pais es nuevo se crea un array vacio\n              if(country.states == undefined){\n                country.states = new Array();\n              }\n              //se construye el objeto de estado y se le cargan los siguientes datos \n              this.state = {\n                  //Identificador del documento que estamos trabajando\n                  documentId: this.props.match.params.documentId,\n                  //Objeto completo del pais que estamos trabajando\n                  rootObj:country,\n                  //Objeto completo de todos los estados que hacen parte de est pais \n                  statesObj:country.states\n              };\n              //Eliminamos del objeto su identificador para poder utilizarlo para poder adicionar un nuevo registro hijo \n              delete this.state.rootObj[\"documentId\"];\n          }\n      }.bind(this));\n  }\n\n\n    this.options = {\n      sortIndicator: true,\n      hideSizePerPage: true,\n      paginationSize: 3,\n      hidePageListOnlyOnePage: true,\n      alwaysShowAllBtns: false,\n      withFirstAndLast: false\n    }\n    this.toggleDanger = this.toggleDanger.bind(this);\n  }\n\n  /**Metodo que se ejecuta automaticamente cada vez que el componente es llamado */\n  componentDidMount() {\n    if (flat) {\n      flat = false;\n      this.props.loadReducer('loadOrders', \"orders/find\");\n    }\n  }\n\n  render() {\n\n    return (\n      <div className=\"animated\">\n\n        <Card>\n          <CardHeader>\n            Lista Ordenes\n            <div className=\"card-header-actions\">\n              <a href=\"https://github.com/AllenFang/react-bootstrap-table\" rel=\"noopener noreferrer\" target=\"_blank\" className=\"card-header-action\">\n                <small className=\"text-muted\">Aprende</small>\n              </a>\n            </div>\n          </CardHeader>\n          <CardBody></CardBody>\n        </Card>\n      </div>\n    );\n  }\n\n}\n\nconst mapStateToProps = (state) => { \n  console.log(\"mapStateToProps\");\n  return { obj: state.DaoOrders } \n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    //type: se utiliza para identificar la accion en el store \n    //colletion: la collection de la base de datos\n    //component: componente a resetear para que el cambio se vea automaticamente \n    //documentId: Identificador del registro a modificar \n    loadReducer: (type, colletion) => { \n      DbCrud.dbMLoad(dispatch, type, colletion);\n      //DbCrud.dbFindColletion(dispatch, type, colletion); \n    },\n    deleteReducer: (type, colletion, component, documentId) => { \n      DbCrud.dbDelete(dispatch, type, colletion, component, documentId); \n    },\n    editFileReducer: (type, colletion, component, documentId, fileEdit, newFileEdit) => { \n      DbCrud.dbEditFile(dispatch, type, colletion, component, documentId, fileEdit, newFileEdit); \n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(OrdersList);\n"]},"metadata":{},"sourceType":"module"}