{"ast":null,"code":"import _regeneratorRuntime from \"/Users/danielobedortegahernandez/iCloud/Documents/GitHub/backoffice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/danielobedortegahernandez/iCloud/Documents/GitHub/backoffice/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Cloudinary as CoreCloudinary, Util } from 'cloudinary-core';\nexport var url = function url(publicId, options) {\n  try {\n    var scOptions = Util.withSnakeCaseKeys(options);\n    var cl = CoreCloudinary.new();\n    return cl.url(publicId, scOptions);\n  } catch (e) {}\n};\nexport var openUploadWidget = function openUploadWidget(options, callback) {\n  try {\n    var scOptions = Util.withSnakeCaseKeys(options);\n    window.cloudinary.openUploadWidget(scOptions, callback);\n  } catch (e) {}\n};\nexport function fetchPhotos(_x, _x2) {\n  return _fetchPhotos.apply(this, arguments);\n}\n\nfunction _fetchPhotos() {\n  _fetchPhotos = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(imageTag, setter) {\n    var options, urlPath;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            try {\n              options = {\n                cloudName: 'emkaydee',\n                format: 'json',\n                type: 'list',\n                version: Math.ceil(new Date().getTime() / 1000)\n              };\n              urlPath = url(imageTag.toString(), options);\n              fetch(urlPath).then(function (res) {\n                return res.text();\n              }).then(function (text) {\n                return text ? setter(JSON.parse(text).resources.map(function (image) {\n                  return image.public_id;\n                })) : [];\n              }).catch(function (err) {\n                return console.log(err);\n              });\n            } catch (e) {}\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchPhotos.apply(this, arguments);\n}\n\n;","map":{"version":3,"sources":["/Users/danielobedortegahernandez/iCloud/Documents/GitHub/backoffice/src/views/Owner/Utils/CloudinaryService.js"],"names":["Cloudinary","CoreCloudinary","Util","url","publicId","options","scOptions","withSnakeCaseKeys","cl","new","e","openUploadWidget","callback","window","cloudinary","fetchPhotos","imageTag","setter","cloudName","format","type","version","Math","ceil","Date","getTime","urlPath","toString","fetch","then","res","text","JSON","parse","resources","map","image","public_id","catch","err","console","log"],"mappings":";;AAAA,SAASA,UAAU,IAAIC,cAAvB,EAAuCC,IAAvC,QAAmD,iBAAnD;AAEA,OAAO,IAAMC,GAAG,GAAG,SAANA,GAAM,CAACC,QAAD,EAAWC,OAAX,EAAuB;AACxC,MAAG;AACD,QAAMC,SAAS,GAAGJ,IAAI,CAACK,iBAAL,CAAuBF,OAAvB,CAAlB;AACA,QAAMG,EAAE,GAAGP,cAAc,CAACQ,GAAf,EAAX;AACA,WAAOD,EAAE,CAACL,GAAH,CAAOC,QAAP,EAAiBE,SAAjB,CAAP;AACD,GAJD,CAIC,OAAMI,CAAN,EAAQ,CAAE;AACZ,CANM;AAQP,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACN,OAAD,EAAUO,QAAV,EAAuB;AACnD,MAAG;AACL,QAAMN,SAAS,GAAGJ,IAAI,CAACK,iBAAL,CAAuBF,OAAvB,CAAlB;AACAQ,IAAAA,MAAM,CAACC,UAAP,CAAkBH,gBAAlB,CAAmCL,SAAnC,EAA8CM,QAA9C;AACD,GAHG,CAGH,OAAMF,CAAN,EAAQ,CAAE;AACV,CALM;AAOP,gBAAuBK,WAAvB;AAAA;AAAA;;;;;2BAAO,iBAA8BC,QAA9B,EAAwCC,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,gBAAG;AACCZ,cAAAA,OADD,GACW;AAChBa,gBAAAA,SAAS,EAAE,UADK;AAEhBC,gBAAAA,MAAM,EAAE,MAFQ;AAGhBC,gBAAAA,IAAI,EAAE,MAHU;AAIhBC,gBAAAA,OAAO,EAAEC,IAAI,CAACC,IAAL,CAAU,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAjC;AAJO,eADX;AAQDC,cAAAA,OARC,GAQSvB,GAAG,CAACa,QAAQ,CAACW,QAAT,EAAD,EAAsBtB,OAAtB,CARZ;AAUPuB,cAAAA,KAAK,CAACF,OAAD,CAAL,CACCG,IADD,CACM,UAAAC,GAAG;AAAA,uBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,eADT,EAECF,IAFD,CAEM,UAAAE,IAAI;AAAA,uBAAKA,IAAI,GAAGd,MAAM,CAACe,IAAI,CAACC,KAAL,CAAWF,IAAX,EAAiBG,SAAjB,CAA2BC,GAA3B,CAA+B,UAAAC,KAAK;AAAA,yBAAIA,KAAK,CAACC,SAAV;AAAA,iBAApC,CAAD,CAAT,GAAsE,EAA/E;AAAA,eAFV,EAGCC,KAHD,CAGO,UAAAC,GAAG;AAAA,uBAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAJ;AAAA,eAHV;AAIC,aAdG,CAcH,OAAM7B,CAAN,EAAQ,CAAE;;AAfJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAgBN","sourcesContent":["import { Cloudinary as CoreCloudinary, Util } from 'cloudinary-core';\n\nexport const url = (publicId, options) => {\n  try{\n    const scOptions = Util.withSnakeCaseKeys(options);\n    const cl = CoreCloudinary.new();\n    return cl.url(publicId, scOptions);\n  }catch(e){}\n};\n\nexport const openUploadWidget = (options, callback) => {\n    try{\n  const scOptions = Util.withSnakeCaseKeys(options);\n  window.cloudinary.openUploadWidget(scOptions, callback);\n}catch(e){}\n};\n\nexport async function  fetchPhotos  (imageTag, setter)  {\n    try{\n  const options = {\n  cloudName: 'emkaydee',\n  format: 'json',\n  type: 'list',\n  version: Math.ceil(new Date().getTime() / 1000),\n};\n\nconst urlPath = url(imageTag.toString(), options);\n\nfetch(urlPath)\n.then(res => res.text())\n.then(text => (text ? setter(JSON.parse(text).resources.map(image => image.public_id)) : []))\n.catch(err => console.log(err));\n}catch(e){}\n};"]},"metadata":{},"sourceType":"module"}