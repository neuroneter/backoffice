{"ast":null,"code":"import AutosizeInput from 'react-input-autosize';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { findDOMNode } from 'react-dom';\n\nvar arrowRenderer = function arrowRenderer(_ref) {\n  var onMouseDown = _ref.onMouseDown;\n  return React.createElement('span', {\n    className: 'Select-arrow',\n    onMouseDown: onMouseDown\n  });\n};\n\narrowRenderer.propTypes = {\n  onMouseDown: PropTypes.func\n};\n\nvar clearRenderer = function clearRenderer() {\n  return React.createElement('span', {\n    className: 'Select-clear',\n    dangerouslySetInnerHTML: {\n      __html: '&times;'\n    }\n  });\n};\n\nvar map = [{\n  'base': 'A',\n  'letters': /[\\u0041\\u24B6\\uFF21\\u00C0\\u00C1\\u00C2\\u1EA6\\u1EA4\\u1EAA\\u1EA8\\u00C3\\u0100\\u0102\\u1EB0\\u1EAE\\u1EB4\\u1EB2\\u0226\\u01E0\\u00C4\\u01DE\\u1EA2\\u00C5\\u01FA\\u01CD\\u0200\\u0202\\u1EA0\\u1EAC\\u1EB6\\u1E00\\u0104\\u023A\\u2C6F]/g\n}, {\n  'base': 'AA',\n  'letters': /[\\uA732]/g\n}, {\n  'base': 'AE',\n  'letters': /[\\u00C6\\u01FC\\u01E2]/g\n}, {\n  'base': 'AO',\n  'letters': /[\\uA734]/g\n}, {\n  'base': 'AU',\n  'letters': /[\\uA736]/g\n}, {\n  'base': 'AV',\n  'letters': /[\\uA738\\uA73A]/g\n}, {\n  'base': 'AY',\n  'letters': /[\\uA73C]/g\n}, {\n  'base': 'B',\n  'letters': /[\\u0042\\u24B7\\uFF22\\u1E02\\u1E04\\u1E06\\u0243\\u0182\\u0181]/g\n}, {\n  'base': 'C',\n  'letters': /[\\u0043\\u24B8\\uFF23\\u0106\\u0108\\u010A\\u010C\\u00C7\\u1E08\\u0187\\u023B\\uA73E]/g\n}, {\n  'base': 'D',\n  'letters': /[\\u0044\\u24B9\\uFF24\\u1E0A\\u010E\\u1E0C\\u1E10\\u1E12\\u1E0E\\u0110\\u018B\\u018A\\u0189\\uA779]/g\n}, {\n  'base': 'DZ',\n  'letters': /[\\u01F1\\u01C4]/g\n}, {\n  'base': 'Dz',\n  'letters': /[\\u01F2\\u01C5]/g\n}, {\n  'base': 'E',\n  'letters': /[\\u0045\\u24BA\\uFF25\\u00C8\\u00C9\\u00CA\\u1EC0\\u1EBE\\u1EC4\\u1EC2\\u1EBC\\u0112\\u1E14\\u1E16\\u0114\\u0116\\u00CB\\u1EBA\\u011A\\u0204\\u0206\\u1EB8\\u1EC6\\u0228\\u1E1C\\u0118\\u1E18\\u1E1A\\u0190\\u018E]/g\n}, {\n  'base': 'F',\n  'letters': /[\\u0046\\u24BB\\uFF26\\u1E1E\\u0191\\uA77B]/g\n}, {\n  'base': 'G',\n  'letters': /[\\u0047\\u24BC\\uFF27\\u01F4\\u011C\\u1E20\\u011E\\u0120\\u01E6\\u0122\\u01E4\\u0193\\uA7A0\\uA77D\\uA77E]/g\n}, {\n  'base': 'H',\n  'letters': /[\\u0048\\u24BD\\uFF28\\u0124\\u1E22\\u1E26\\u021E\\u1E24\\u1E28\\u1E2A\\u0126\\u2C67\\u2C75\\uA78D]/g\n}, {\n  'base': 'I',\n  'letters': /[\\u0049\\u24BE\\uFF29\\u00CC\\u00CD\\u00CE\\u0128\\u012A\\u012C\\u0130\\u00CF\\u1E2E\\u1EC8\\u01CF\\u0208\\u020A\\u1ECA\\u012E\\u1E2C\\u0197]/g\n}, {\n  'base': 'J',\n  'letters': /[\\u004A\\u24BF\\uFF2A\\u0134\\u0248]/g\n}, {\n  'base': 'K',\n  'letters': /[\\u004B\\u24C0\\uFF2B\\u1E30\\u01E8\\u1E32\\u0136\\u1E34\\u0198\\u2C69\\uA740\\uA742\\uA744\\uA7A2]/g\n}, {\n  'base': 'L',\n  'letters': /[\\u004C\\u24C1\\uFF2C\\u013F\\u0139\\u013D\\u1E36\\u1E38\\u013B\\u1E3C\\u1E3A\\u0141\\u023D\\u2C62\\u2C60\\uA748\\uA746\\uA780]/g\n}, {\n  'base': 'LJ',\n  'letters': /[\\u01C7]/g\n}, {\n  'base': 'Lj',\n  'letters': /[\\u01C8]/g\n}, {\n  'base': 'M',\n  'letters': /[\\u004D\\u24C2\\uFF2D\\u1E3E\\u1E40\\u1E42\\u2C6E\\u019C]/g\n}, {\n  'base': 'N',\n  'letters': /[\\u004E\\u24C3\\uFF2E\\u01F8\\u0143\\u00D1\\u1E44\\u0147\\u1E46\\u0145\\u1E4A\\u1E48\\u0220\\u019D\\uA790\\uA7A4]/g\n}, {\n  'base': 'NJ',\n  'letters': /[\\u01CA]/g\n}, {\n  'base': 'Nj',\n  'letters': /[\\u01CB]/g\n}, {\n  'base': 'O',\n  'letters': /[\\u004F\\u24C4\\uFF2F\\u00D2\\u00D3\\u00D4\\u1ED2\\u1ED0\\u1ED6\\u1ED4\\u00D5\\u1E4C\\u022C\\u1E4E\\u014C\\u1E50\\u1E52\\u014E\\u022E\\u0230\\u00D6\\u022A\\u1ECE\\u0150\\u01D1\\u020C\\u020E\\u01A0\\u1EDC\\u1EDA\\u1EE0\\u1EDE\\u1EE2\\u1ECC\\u1ED8\\u01EA\\u01EC\\u00D8\\u01FE\\u0186\\u019F\\uA74A\\uA74C]/g\n}, {\n  'base': 'OI',\n  'letters': /[\\u01A2]/g\n}, {\n  'base': 'OO',\n  'letters': /[\\uA74E]/g\n}, {\n  'base': 'OU',\n  'letters': /[\\u0222]/g\n}, {\n  'base': 'P',\n  'letters': /[\\u0050\\u24C5\\uFF30\\u1E54\\u1E56\\u01A4\\u2C63\\uA750\\uA752\\uA754]/g\n}, {\n  'base': 'Q',\n  'letters': /[\\u0051\\u24C6\\uFF31\\uA756\\uA758\\u024A]/g\n}, {\n  'base': 'R',\n  'letters': /[\\u0052\\u24C7\\uFF32\\u0154\\u1E58\\u0158\\u0210\\u0212\\u1E5A\\u1E5C\\u0156\\u1E5E\\u024C\\u2C64\\uA75A\\uA7A6\\uA782]/g\n}, {\n  'base': 'S',\n  'letters': /[\\u0053\\u24C8\\uFF33\\u1E9E\\u015A\\u1E64\\u015C\\u1E60\\u0160\\u1E66\\u1E62\\u1E68\\u0218\\u015E\\u2C7E\\uA7A8\\uA784]/g\n}, {\n  'base': 'T',\n  'letters': /[\\u0054\\u24C9\\uFF34\\u1E6A\\u0164\\u1E6C\\u021A\\u0162\\u1E70\\u1E6E\\u0166\\u01AC\\u01AE\\u023E\\uA786]/g\n}, {\n  'base': 'TZ',\n  'letters': /[\\uA728]/g\n}, {\n  'base': 'U',\n  'letters': /[\\u0055\\u24CA\\uFF35\\u00D9\\u00DA\\u00DB\\u0168\\u1E78\\u016A\\u1E7A\\u016C\\u00DC\\u01DB\\u01D7\\u01D5\\u01D9\\u1EE6\\u016E\\u0170\\u01D3\\u0214\\u0216\\u01AF\\u1EEA\\u1EE8\\u1EEE\\u1EEC\\u1EF0\\u1EE4\\u1E72\\u0172\\u1E76\\u1E74\\u0244]/g\n}, {\n  'base': 'V',\n  'letters': /[\\u0056\\u24CB\\uFF36\\u1E7C\\u1E7E\\u01B2\\uA75E\\u0245]/g\n}, {\n  'base': 'VY',\n  'letters': /[\\uA760]/g\n}, {\n  'base': 'W',\n  'letters': /[\\u0057\\u24CC\\uFF37\\u1E80\\u1E82\\u0174\\u1E86\\u1E84\\u1E88\\u2C72]/g\n}, {\n  'base': 'X',\n  'letters': /[\\u0058\\u24CD\\uFF38\\u1E8A\\u1E8C]/g\n}, {\n  'base': 'Y',\n  'letters': /[\\u0059\\u24CE\\uFF39\\u1EF2\\u00DD\\u0176\\u1EF8\\u0232\\u1E8E\\u0178\\u1EF6\\u1EF4\\u01B3\\u024E\\u1EFE]/g\n}, {\n  'base': 'Z',\n  'letters': /[\\u005A\\u24CF\\uFF3A\\u0179\\u1E90\\u017B\\u017D\\u1E92\\u1E94\\u01B5\\u0224\\u2C7F\\u2C6B\\uA762]/g\n}, {\n  'base': 'a',\n  'letters': /[\\u0061\\u24D0\\uFF41\\u1E9A\\u00E0\\u00E1\\u00E2\\u1EA7\\u1EA5\\u1EAB\\u1EA9\\u00E3\\u0101\\u0103\\u1EB1\\u1EAF\\u1EB5\\u1EB3\\u0227\\u01E1\\u00E4\\u01DF\\u1EA3\\u00E5\\u01FB\\u01CE\\u0201\\u0203\\u1EA1\\u1EAD\\u1EB7\\u1E01\\u0105\\u2C65\\u0250]/g\n}, {\n  'base': 'aa',\n  'letters': /[\\uA733]/g\n}, {\n  'base': 'ae',\n  'letters': /[\\u00E6\\u01FD\\u01E3]/g\n}, {\n  'base': 'ao',\n  'letters': /[\\uA735]/g\n}, {\n  'base': 'au',\n  'letters': /[\\uA737]/g\n}, {\n  'base': 'av',\n  'letters': /[\\uA739\\uA73B]/g\n}, {\n  'base': 'ay',\n  'letters': /[\\uA73D]/g\n}, {\n  'base': 'b',\n  'letters': /[\\u0062\\u24D1\\uFF42\\u1E03\\u1E05\\u1E07\\u0180\\u0183\\u0253]/g\n}, {\n  'base': 'c',\n  'letters': /[\\u0063\\u24D2\\uFF43\\u0107\\u0109\\u010B\\u010D\\u00E7\\u1E09\\u0188\\u023C\\uA73F\\u2184]/g\n}, {\n  'base': 'd',\n  'letters': /[\\u0064\\u24D3\\uFF44\\u1E0B\\u010F\\u1E0D\\u1E11\\u1E13\\u1E0F\\u0111\\u018C\\u0256\\u0257\\uA77A]/g\n}, {\n  'base': 'dz',\n  'letters': /[\\u01F3\\u01C6]/g\n}, {\n  'base': 'e',\n  'letters': /[\\u0065\\u24D4\\uFF45\\u00E8\\u00E9\\u00EA\\u1EC1\\u1EBF\\u1EC5\\u1EC3\\u1EBD\\u0113\\u1E15\\u1E17\\u0115\\u0117\\u00EB\\u1EBB\\u011B\\u0205\\u0207\\u1EB9\\u1EC7\\u0229\\u1E1D\\u0119\\u1E19\\u1E1B\\u0247\\u025B\\u01DD]/g\n}, {\n  'base': 'f',\n  'letters': /[\\u0066\\u24D5\\uFF46\\u1E1F\\u0192\\uA77C]/g\n}, {\n  'base': 'g',\n  'letters': /[\\u0067\\u24D6\\uFF47\\u01F5\\u011D\\u1E21\\u011F\\u0121\\u01E7\\u0123\\u01E5\\u0260\\uA7A1\\u1D79\\uA77F]/g\n}, {\n  'base': 'h',\n  'letters': /[\\u0068\\u24D7\\uFF48\\u0125\\u1E23\\u1E27\\u021F\\u1E25\\u1E29\\u1E2B\\u1E96\\u0127\\u2C68\\u2C76\\u0265]/g\n}, {\n  'base': 'hv',\n  'letters': /[\\u0195]/g\n}, {\n  'base': 'i',\n  'letters': /[\\u0069\\u24D8\\uFF49\\u00EC\\u00ED\\u00EE\\u0129\\u012B\\u012D\\u00EF\\u1E2F\\u1EC9\\u01D0\\u0209\\u020B\\u1ECB\\u012F\\u1E2D\\u0268\\u0131]/g\n}, {\n  'base': 'j',\n  'letters': /[\\u006A\\u24D9\\uFF4A\\u0135\\u01F0\\u0249]/g\n}, {\n  'base': 'k',\n  'letters': /[\\u006B\\u24DA\\uFF4B\\u1E31\\u01E9\\u1E33\\u0137\\u1E35\\u0199\\u2C6A\\uA741\\uA743\\uA745\\uA7A3]/g\n}, {\n  'base': 'l',\n  'letters': /[\\u006C\\u24DB\\uFF4C\\u0140\\u013A\\u013E\\u1E37\\u1E39\\u013C\\u1E3D\\u1E3B\\u017F\\u0142\\u019A\\u026B\\u2C61\\uA749\\uA781\\uA747]/g\n}, {\n  'base': 'lj',\n  'letters': /[\\u01C9]/g\n}, {\n  'base': 'm',\n  'letters': /[\\u006D\\u24DC\\uFF4D\\u1E3F\\u1E41\\u1E43\\u0271\\u026F]/g\n}, {\n  'base': 'n',\n  'letters': /[\\u006E\\u24DD\\uFF4E\\u01F9\\u0144\\u00F1\\u1E45\\u0148\\u1E47\\u0146\\u1E4B\\u1E49\\u019E\\u0272\\u0149\\uA791\\uA7A5]/g\n}, {\n  'base': 'nj',\n  'letters': /[\\u01CC]/g\n}, {\n  'base': 'o',\n  'letters': /[\\u006F\\u24DE\\uFF4F\\u00F2\\u00F3\\u00F4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\u00F5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\u00F6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\u00F8\\u01FF\\u0254\\uA74B\\uA74D\\u0275]/g\n}, {\n  'base': 'oi',\n  'letters': /[\\u01A3]/g\n}, {\n  'base': 'ou',\n  'letters': /[\\u0223]/g\n}, {\n  'base': 'oo',\n  'letters': /[\\uA74F]/g\n}, {\n  'base': 'p',\n  'letters': /[\\u0070\\u24DF\\uFF50\\u1E55\\u1E57\\u01A5\\u1D7D\\uA751\\uA753\\uA755]/g\n}, {\n  'base': 'q',\n  'letters': /[\\u0071\\u24E0\\uFF51\\u024B\\uA757\\uA759]/g\n}, {\n  'base': 'r',\n  'letters': /[\\u0072\\u24E1\\uFF52\\u0155\\u1E59\\u0159\\u0211\\u0213\\u1E5B\\u1E5D\\u0157\\u1E5F\\u024D\\u027D\\uA75B\\uA7A7\\uA783]/g\n}, {\n  'base': 's',\n  'letters': /[\\u0073\\u24E2\\uFF53\\u00DF\\u015B\\u1E65\\u015D\\u1E61\\u0161\\u1E67\\u1E63\\u1E69\\u0219\\u015F\\u023F\\uA7A9\\uA785\\u1E9B]/g\n}, {\n  'base': 't',\n  'letters': /[\\u0074\\u24E3\\uFF54\\u1E6B\\u1E97\\u0165\\u1E6D\\u021B\\u0163\\u1E71\\u1E6F\\u0167\\u01AD\\u0288\\u2C66\\uA787]/g\n}, {\n  'base': 'tz',\n  'letters': /[\\uA729]/g\n}, {\n  'base': 'u',\n  'letters': /[\\u0075\\u24E4\\uFF55\\u00F9\\u00FA\\u00FB\\u0169\\u1E79\\u016B\\u1E7B\\u016D\\u00FC\\u01DC\\u01D8\\u01D6\\u01DA\\u1EE7\\u016F\\u0171\\u01D4\\u0215\\u0217\\u01B0\\u1EEB\\u1EE9\\u1EEF\\u1EED\\u1EF1\\u1EE5\\u1E73\\u0173\\u1E77\\u1E75\\u0289]/g\n}, {\n  'base': 'v',\n  'letters': /[\\u0076\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C]/g\n}, {\n  'base': 'vy',\n  'letters': /[\\uA761]/g\n}, {\n  'base': 'w',\n  'letters': /[\\u0077\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73]/g\n}, {\n  'base': 'x',\n  'letters': /[\\u0078\\u24E7\\uFF58\\u1E8B\\u1E8D]/g\n}, {\n  'base': 'y',\n  'letters': /[\\u0079\\u24E8\\uFF59\\u1EF3\\u00FD\\u0177\\u1EF9\\u0233\\u1E8F\\u00FF\\u1EF7\\u1E99\\u1EF5\\u01B4\\u024F\\u1EFF]/g\n}, {\n  'base': 'z',\n  'letters': /[\\u007A\\u24E9\\uFF5A\\u017A\\u1E91\\u017C\\u017E\\u1E93\\u1E95\\u01B6\\u0225\\u0240\\u2C6C\\uA763]/g\n}];\n\nvar stripDiacritics = function stripDiacritics(str) {\n  for (var i = 0; i < map.length; i++) {\n    str = str.replace(map[i].letters, map[i].base);\n  }\n\n  return str;\n};\n\nvar trim = function trim(str) {\n  return str.replace(/^\\s+|\\s+$/g, '');\n};\n\nvar isValid = function isValid(value) {\n  return typeof value !== 'undefined' && value !== null && value !== '';\n};\n\nvar filterOptions = function filterOptions(options, filterValue, excludeOptions, props) {\n  if (props.ignoreAccents) {\n    filterValue = stripDiacritics(filterValue);\n  }\n\n  if (props.ignoreCase) {\n    filterValue = filterValue.toLowerCase();\n  }\n\n  if (props.trimFilter) {\n    filterValue = trim(filterValue);\n  }\n\n  if (excludeOptions) excludeOptions = excludeOptions.map(function (i) {\n    return i[props.valueKey];\n  });\n  return options.filter(function (option) {\n    if (excludeOptions && excludeOptions.indexOf(option[props.valueKey]) > -1) return false;\n    if (props.filterOption) return props.filterOption.call(undefined, option, filterValue);\n    if (!filterValue) return true;\n    var value = option[props.valueKey];\n    var label = option[props.labelKey];\n    var hasValue = isValid(value);\n    var hasLabel = isValid(label);\n\n    if (!hasValue && !hasLabel) {\n      return false;\n    }\n\n    var valueTest = hasValue ? String(value) : null;\n    var labelTest = hasLabel ? String(label) : null;\n\n    if (props.ignoreAccents) {\n      if (valueTest && props.matchProp !== 'label') valueTest = stripDiacritics(valueTest);\n      if (labelTest && props.matchProp !== 'value') labelTest = stripDiacritics(labelTest);\n    }\n\n    if (props.ignoreCase) {\n      if (valueTest && props.matchProp !== 'label') valueTest = valueTest.toLowerCase();\n      if (labelTest && props.matchProp !== 'value') labelTest = labelTest.toLowerCase();\n    }\n\n    return props.matchPos === 'start' ? valueTest && props.matchProp !== 'label' && valueTest.substr(0, filterValue.length) === filterValue || labelTest && props.matchProp !== 'value' && labelTest.substr(0, filterValue.length) === filterValue : valueTest && props.matchProp !== 'label' && valueTest.indexOf(filterValue) >= 0 || labelTest && props.matchProp !== 'value' && labelTest.indexOf(filterValue) >= 0;\n  });\n};\n\nvar menuRenderer = function menuRenderer(_ref) {\n  var focusedOption = _ref.focusedOption,\n      focusOption = _ref.focusOption,\n      inputValue = _ref.inputValue,\n      instancePrefix = _ref.instancePrefix,\n      onFocus = _ref.onFocus,\n      onOptionRef = _ref.onOptionRef,\n      onSelect = _ref.onSelect,\n      optionClassName = _ref.optionClassName,\n      optionComponent = _ref.optionComponent,\n      optionRenderer = _ref.optionRenderer,\n      options = _ref.options,\n      removeValue = _ref.removeValue,\n      selectValue = _ref.selectValue,\n      valueArray = _ref.valueArray,\n      valueKey = _ref.valueKey;\n  var Option = optionComponent;\n  return options.map(function (option, i) {\n    var isSelected = valueArray && valueArray.some(function (x) {\n      return x[valueKey] === option[valueKey];\n    });\n    var isFocused = option === focusedOption;\n    var optionClass = classNames(optionClassName, {\n      'Select-option': true,\n      'is-selected': isSelected,\n      'is-focused': isFocused,\n      'is-disabled': option.disabled\n    });\n    return React.createElement(Option, {\n      className: optionClass,\n      focusOption: focusOption,\n      inputValue: inputValue,\n      instancePrefix: instancePrefix,\n      isDisabled: option.disabled,\n      isFocused: isFocused,\n      isSelected: isSelected,\n      key: 'option-' + i + '-' + option[valueKey],\n      onFocus: onFocus,\n      onSelect: onSelect,\n      option: option,\n      optionIndex: i,\n      ref: function ref(_ref2) {\n        onOptionRef(_ref2, isFocused);\n      },\n      removeValue: removeValue,\n      selectValue: selectValue\n    }, optionRenderer(option, i, inputValue));\n  });\n};\n\nmenuRenderer.propTypes = {\n  focusOption: PropTypes.func,\n  focusedOption: PropTypes.object,\n  inputValue: PropTypes.string,\n  instancePrefix: PropTypes.string,\n  onFocus: PropTypes.func,\n  onOptionRef: PropTypes.func,\n  onSelect: PropTypes.func,\n  optionClassName: PropTypes.string,\n  optionComponent: PropTypes.func,\n  optionRenderer: PropTypes.func,\n  options: PropTypes.array,\n  removeValue: PropTypes.func,\n  selectValue: PropTypes.func,\n  valueArray: PropTypes.array,\n  valueKey: PropTypes.string\n};\n\nvar blockEvent = function blockEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n\n  if (event.target.tagName !== 'A' || !('href' in event.target)) {\n    return;\n  }\n\n  if (event.target.target) {\n    window.open(event.target.href, event.target.target);\n  } else {\n    window.location.href = event.target.href;\n  }\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar asyncGenerator = function () {\n  function AwaitValue(value) {\n    this.value = value;\n  }\n\n  function AsyncGenerator(gen) {\n    var front, back;\n\n    function send(key, arg) {\n      return new Promise(function (resolve, reject) {\n        var request = {\n          key: key,\n          arg: arg,\n          resolve: resolve,\n          reject: reject,\n          next: null\n        };\n\n        if (back) {\n          back = back.next = request;\n        } else {\n          front = back = request;\n          resume(key, arg);\n        }\n      });\n    }\n\n    function resume(key, arg) {\n      try {\n        var result = gen[key](arg);\n        var value = result.value;\n\n        if (value instanceof AwaitValue) {\n          Promise.resolve(value.value).then(function (arg) {\n            resume(\"next\", arg);\n          }, function (arg) {\n            resume(\"throw\", arg);\n          });\n        } else {\n          settle(result.done ? \"return\" : \"normal\", result.value);\n        }\n      } catch (err) {\n        settle(\"throw\", err);\n      }\n    }\n\n    function settle(type, value) {\n      switch (type) {\n        case \"return\":\n          front.resolve({\n            value: value,\n            done: true\n          });\n          break;\n\n        case \"throw\":\n          front.reject(value);\n          break;\n\n        default:\n          front.resolve({\n            value: value,\n            done: false\n          });\n          break;\n      }\n\n      front = front.next;\n\n      if (front) {\n        resume(front.key, front.arg);\n      } else {\n        back = null;\n      }\n    }\n\n    this._invoke = send;\n\n    if (typeof gen.return !== \"function\") {\n      this.return = undefined;\n    }\n  }\n\n  if (typeof Symbol === \"function\" && Symbol.asyncIterator) {\n    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {\n      return this;\n    };\n  }\n\n  AsyncGenerator.prototype.next = function (arg) {\n    return this._invoke(\"next\", arg);\n  };\n\n  AsyncGenerator.prototype.throw = function (arg) {\n    return this._invoke(\"throw\", arg);\n  };\n\n  AsyncGenerator.prototype.return = function (arg) {\n    return this._invoke(\"return\", arg);\n  };\n\n  return {\n    wrap: function wrap(fn) {\n      return function () {\n        return new AsyncGenerator(fn.apply(this, arguments));\n      };\n    },\n    await: function _await(value) {\n      return new AwaitValue(value);\n    }\n  };\n}();\n\nvar classCallCheck = function classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar defineProperty = function defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar inherits = function inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar objectWithoutProperties = function objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nvar possibleConstructorReturn = function possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar Option = function (_React$Component) {\n  inherits(Option, _React$Component);\n\n  function Option(props) {\n    classCallCheck(this, Option);\n\n    var _this = possibleConstructorReturn(this, (Option.__proto__ || Object.getPrototypeOf(Option)).call(this, props));\n\n    _this.handleMouseDown = _this.handleMouseDown.bind(_this);\n    _this.handleMouseEnter = _this.handleMouseEnter.bind(_this);\n    _this.handleMouseMove = _this.handleMouseMove.bind(_this);\n    _this.handleTouchStart = _this.handleTouchStart.bind(_this);\n    _this.handleTouchEnd = _this.handleTouchEnd.bind(_this);\n    _this.handleTouchMove = _this.handleTouchMove.bind(_this);\n    _this.onFocus = _this.onFocus.bind(_this);\n    return _this;\n  }\n\n  createClass(Option, [{\n    key: 'handleMouseDown',\n    value: function handleMouseDown(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.props.onSelect(this.props.option, event);\n    }\n  }, {\n    key: 'handleMouseEnter',\n    value: function handleMouseEnter(event) {\n      this.onFocus(event);\n    }\n  }, {\n    key: 'handleMouseMove',\n    value: function handleMouseMove(event) {\n      this.onFocus(event);\n    }\n  }, {\n    key: 'handleTouchEnd',\n    value: function handleTouchEnd(event) {\n      // Check if the view is being dragged, In this case\n      // we don't want to fire the click event (because the user only wants to scroll)\n      if (this.dragging) return;\n      this.handleMouseDown(event);\n    }\n  }, {\n    key: 'handleTouchMove',\n    value: function handleTouchMove() {\n      // Set a flag that the view is being dragged\n      this.dragging = true;\n    }\n  }, {\n    key: 'handleTouchStart',\n    value: function handleTouchStart() {\n      // Set a flag that the view is not being dragged\n      this.dragging = false;\n    }\n  }, {\n    key: 'onFocus',\n    value: function onFocus(event) {\n      if (!this.props.isFocused) {\n        this.props.onFocus(this.props.option, event);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          option = _props.option,\n          instancePrefix = _props.instancePrefix,\n          optionIndex = _props.optionIndex;\n      var className = classNames(this.props.className, option.className);\n      return option.disabled ? React.createElement('div', {\n        className: className,\n        onMouseDown: blockEvent,\n        onClick: blockEvent\n      }, this.props.children) : React.createElement('div', {\n        className: className,\n        style: option.style,\n        role: 'option',\n        'aria-label': option.label,\n        onMouseDown: this.handleMouseDown,\n        onMouseEnter: this.handleMouseEnter,\n        onMouseMove: this.handleMouseMove,\n        onTouchStart: this.handleTouchStart,\n        onTouchMove: this.handleTouchMove,\n        onTouchEnd: this.handleTouchEnd,\n        id: instancePrefix + '-option-' + optionIndex,\n        title: option.title\n      }, this.props.children);\n    }\n  }]);\n  return Option;\n}(React.Component);\n\nOption.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  // className (based on mouse position)\n  instancePrefix: PropTypes.string.isRequired,\n  // unique prefix for the ids (used for aria)\n  isDisabled: PropTypes.bool,\n  // the option is disabled\n  isFocused: PropTypes.bool,\n  // the option is focused\n  isSelected: PropTypes.bool,\n  // the option is selected\n  onFocus: PropTypes.func,\n  // method to handle mouseEnter on option element\n  onSelect: PropTypes.func,\n  // method to handle click on option element\n  onUnfocus: PropTypes.func,\n  // method to handle mouseLeave on option element\n  option: PropTypes.object.isRequired,\n  // object that is base for that option\n  optionIndex: PropTypes.number // index of the option, used to generate unique ids for aria\n\n};\n\nvar Value = function (_React$Component) {\n  inherits(Value, _React$Component);\n\n  function Value(props) {\n    classCallCheck(this, Value);\n\n    var _this = possibleConstructorReturn(this, (Value.__proto__ || Object.getPrototypeOf(Value)).call(this, props));\n\n    _this.handleMouseDown = _this.handleMouseDown.bind(_this);\n    _this.onRemove = _this.onRemove.bind(_this);\n    _this.handleTouchEndRemove = _this.handleTouchEndRemove.bind(_this);\n    _this.handleTouchMove = _this.handleTouchMove.bind(_this);\n    _this.handleTouchStart = _this.handleTouchStart.bind(_this);\n    return _this;\n  }\n\n  createClass(Value, [{\n    key: 'handleMouseDown',\n    value: function handleMouseDown(event) {\n      if (event.type === 'mousedown' && event.button !== 0) {\n        return;\n      }\n\n      if (this.props.onClick) {\n        event.stopPropagation();\n        this.props.onClick(this.props.value, event);\n        return;\n      }\n\n      if (this.props.value.href) {\n        event.stopPropagation();\n      }\n    }\n  }, {\n    key: 'onRemove',\n    value: function onRemove(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      this.props.onRemove(this.props.value);\n    }\n  }, {\n    key: 'handleTouchEndRemove',\n    value: function handleTouchEndRemove(event) {\n      // Check if the view is being dragged, In this case\n      // we don't want to fire the click event (because the user only wants to scroll)\n      if (this.dragging) return; // Fire the mouse events\n\n      this.onRemove(event);\n    }\n  }, {\n    key: 'handleTouchMove',\n    value: function handleTouchMove() {\n      // Set a flag that the view is being dragged\n      this.dragging = true;\n    }\n  }, {\n    key: 'handleTouchStart',\n    value: function handleTouchStart() {\n      // Set a flag that the view is not being dragged\n      this.dragging = false;\n    }\n  }, {\n    key: 'renderRemoveIcon',\n    value: function renderRemoveIcon() {\n      if (this.props.disabled || !this.props.onRemove) return;\n      return React.createElement('span', {\n        className: 'Select-value-icon',\n        'aria-hidden': 'true',\n        onMouseDown: this.onRemove,\n        onTouchEnd: this.handleTouchEndRemove,\n        onTouchStart: this.handleTouchStart,\n        onTouchMove: this.handleTouchMove\n      }, '\\xD7');\n    }\n  }, {\n    key: 'renderLabel',\n    value: function renderLabel() {\n      var className = 'Select-value-label';\n      return this.props.onClick || this.props.value.href ? React.createElement('a', {\n        className: className,\n        href: this.props.value.href,\n        target: this.props.value.target,\n        onMouseDown: this.handleMouseDown,\n        onTouchEnd: this.handleMouseDown\n      }, this.props.children) : React.createElement('span', {\n        className: className,\n        role: 'option',\n        'aria-selected': 'true',\n        id: this.props.id\n      }, this.props.children);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return React.createElement('div', {\n        className: classNames('Select-value', this.props.value.disabled ? 'Select-value-disabled' : '', this.props.value.className),\n        style: this.props.value.style,\n        title: this.props.value.title\n      }, this.renderRemoveIcon(), this.renderLabel());\n    }\n  }]);\n  return Value;\n}(React.Component);\n\nValue.propTypes = {\n  children: PropTypes.node,\n  disabled: PropTypes.bool,\n  // disabled prop passed to ReactSelect\n  id: PropTypes.string,\n  // Unique id for the value - used for aria\n  onClick: PropTypes.func,\n  // method to handle click on value label\n  onRemove: PropTypes.func,\n  // method to handle removal of the value\n  value: PropTypes.object.isRequired // the option object for this value\n\n};\n/*!\n  Copyright (c) 2018 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/react-select\n*/\n\nvar stringifyValue = function stringifyValue(value) {\n  return typeof value === 'string' ? value : value !== null && JSON.stringify(value) || '';\n};\n\nvar stringOrNode = PropTypes.oneOfType([PropTypes.string, PropTypes.node]);\nvar stringOrNumber = PropTypes.oneOfType([PropTypes.string, PropTypes.number]);\nvar instanceId = 1;\n\nvar shouldShowValue = function shouldShowValue(state, props) {\n  var inputValue = state.inputValue,\n      isPseudoFocused = state.isPseudoFocused,\n      isFocused = state.isFocused;\n  var onSelectResetsInput = props.onSelectResetsInput;\n  if (!inputValue) return true;\n\n  if (!onSelectResetsInput) {\n    return !(!isFocused && isPseudoFocused || isFocused && !isPseudoFocused);\n  }\n\n  return false;\n};\n\nvar shouldShowPlaceholder = function shouldShowPlaceholder(state, props, isOpen) {\n  var inputValue = state.inputValue,\n      isPseudoFocused = state.isPseudoFocused,\n      isFocused = state.isFocused;\n  var onSelectResetsInput = props.onSelectResetsInput;\n  return !inputValue || !onSelectResetsInput && !isOpen && !isPseudoFocused && !isFocused;\n};\n/**\n * Retrieve a value from the given options and valueKey\n * @param {String|Number|Array} value\t- the selected value(s)\n * @param {Object}\t\t props\t- the Select component's props (or nextProps)\n */\n\n\nvar expandValue = function expandValue(value, props) {\n  var valueType = typeof value === 'undefined' ? 'undefined' : _typeof(value);\n  if (valueType !== 'string' && valueType !== 'number' && valueType !== 'boolean') return value;\n  var options = props.options,\n      valueKey = props.valueKey;\n  if (!options) return;\n\n  for (var i = 0; i < options.length; i++) {\n    if (String(options[i][valueKey]) === String(value)) return options[i];\n  }\n};\n\nvar handleRequired = function handleRequired(value, multi) {\n  if (!value) return true;\n  return multi ? value.length === 0 : Object.keys(value).length === 0;\n};\n\nvar Select$1 = function (_React$Component) {\n  inherits(Select, _React$Component);\n\n  function Select(props) {\n    classCallCheck(this, Select);\n\n    var _this = possibleConstructorReturn(this, (Select.__proto__ || Object.getPrototypeOf(Select)).call(this, props));\n\n    ['clearValue', 'focusOption', 'getOptionLabel', 'handleInputBlur', 'handleInputChange', 'handleInputFocus', 'handleInputValueChange', 'handleKeyDown', 'handleMenuScroll', 'handleMouseDown', 'handleMouseDownOnArrow', 'handleMouseDownOnMenu', 'handleTouchEnd', 'handleTouchEndClearValue', 'handleTouchMove', 'handleTouchOutside', 'handleTouchStart', 'handleValueClick', 'onOptionRef', 'removeValue', 'selectValue'].forEach(function (fn) {\n      return _this[fn] = _this[fn].bind(_this);\n    });\n    _this.state = {\n      inputValue: '',\n      isFocused: false,\n      isOpen: false,\n      isPseudoFocused: false,\n      required: false\n    };\n    return _this;\n  }\n\n  createClass(Select, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      this._instancePrefix = 'react-select-' + (this.props.instanceId || ++instanceId) + '-';\n      var valueArray = this.getValueArray(this.props.value);\n\n      if (this.props.required) {\n        this.setState({\n          required: handleRequired(valueArray[0], this.props.multi)\n        });\n      }\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (typeof this.props.autofocus !== 'undefined' && typeof console !== 'undefined') {\n        console.warn('Warning: The autofocus prop has changed to autoFocus, support will be removed after react-select@1.0');\n      }\n\n      if (this.props.autoFocus || this.props.autofocus) {\n        this.focus();\n      }\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      var valueArray = this.getValueArray(nextProps.value, nextProps);\n\n      if (nextProps.required) {\n        this.setState({\n          required: handleRequired(valueArray[0], nextProps.multi)\n        });\n      } else if (this.props.required) {\n        // Used to be required but it's not any more\n        this.setState({\n          required: false\n        });\n      }\n\n      if (this.state.inputValue && this.props.value !== nextProps.value && nextProps.onSelectResetsInput) {\n        this.setState({\n          inputValue: this.handleInputValueChange('')\n        });\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      // focus to the selected option\n      if (this.menu && this.focused && this.state.isOpen && !this.hasScrolledToOption) {\n        var focusedOptionNode = findDOMNode(this.focused);\n        var menuNode = findDOMNode(this.menu);\n        var scrollTop = menuNode.scrollTop;\n        var scrollBottom = scrollTop + menuNode.offsetHeight;\n        var optionTop = focusedOptionNode.offsetTop;\n        var optionBottom = optionTop + focusedOptionNode.offsetHeight;\n\n        if (scrollTop > optionTop || scrollBottom < optionBottom) {\n          menuNode.scrollTop = focusedOptionNode.offsetTop;\n        } // We still set hasScrolledToOption to true even if we didn't\n        // actually need to scroll, as we've still confirmed that the\n        // option is in view.\n\n\n        this.hasScrolledToOption = true;\n      } else if (!this.state.isOpen) {\n        this.hasScrolledToOption = false;\n      }\n\n      if (this._scrollToFocusedOptionOnUpdate && this.focused && this.menu) {\n        this._scrollToFocusedOptionOnUpdate = false;\n        var focusedDOM = findDOMNode(this.focused);\n        var menuDOM = findDOMNode(this.menu);\n        var focusedRect = focusedDOM.getBoundingClientRect();\n        var menuRect = menuDOM.getBoundingClientRect();\n\n        if (focusedRect.bottom > menuRect.bottom) {\n          menuDOM.scrollTop = focusedDOM.offsetTop + focusedDOM.clientHeight - menuDOM.offsetHeight;\n        } else if (focusedRect.top < menuRect.top) {\n          menuDOM.scrollTop = focusedDOM.offsetTop;\n        }\n      }\n\n      if (this.props.scrollMenuIntoView && this.menuContainer) {\n        var menuContainerRect = this.menuContainer.getBoundingClientRect();\n\n        if (window.innerHeight < menuContainerRect.bottom + this.props.menuBuffer) {\n          window.scrollBy(0, menuContainerRect.bottom + this.props.menuBuffer - window.innerHeight);\n        }\n      }\n\n      if (prevProps.disabled !== this.props.disabled) {\n        this.setState({\n          isFocused: false\n        }); // eslint-disable-line react/no-did-update-set-state\n\n        this.closeMenu();\n      }\n\n      if (prevState.isOpen !== this.state.isOpen) {\n        this.toggleTouchOutsideEvent(this.state.isOpen);\n        var handler = this.state.isOpen ? this.props.onOpen : this.props.onClose;\n        handler && handler();\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.toggleTouchOutsideEvent(false);\n    }\n  }, {\n    key: 'toggleTouchOutsideEvent',\n    value: function toggleTouchOutsideEvent(enabled) {\n      var eventTogglerName = enabled ? document.addEventListener ? 'addEventListener' : 'attachEvent' : document.removeEventListener ? 'removeEventListener' : 'detachEvent';\n      var pref = document.addEventListener ? '' : 'on';\n      document[eventTogglerName](pref + 'touchstart', this.handleTouchOutside);\n      document[eventTogglerName](pref + 'mousedown', this.handleTouchOutside);\n    }\n  }, {\n    key: 'handleTouchOutside',\n    value: function handleTouchOutside(event) {\n      // handle touch outside on ios to dismiss menu\n      if (this.wrapper && !this.wrapper.contains(event.target)) {\n        this.closeMenu();\n      }\n    }\n  }, {\n    key: 'focus',\n    value: function focus() {\n      if (!this.input) return;\n      this.input.focus();\n    }\n  }, {\n    key: 'blurInput',\n    value: function blurInput() {\n      if (!this.input) return;\n      this.input.blur();\n    }\n  }, {\n    key: 'handleTouchMove',\n    value: function handleTouchMove() {\n      // Set a flag that the view is being dragged\n      this.dragging = true;\n    }\n  }, {\n    key: 'handleTouchStart',\n    value: function handleTouchStart() {\n      // Set a flag that the view is not being dragged\n      this.dragging = false;\n    }\n  }, {\n    key: 'handleTouchEnd',\n    value: function handleTouchEnd(event) {\n      // Check if the view is being dragged, In this case\n      // we don't want to fire the click event (because the user only wants to scroll)\n      if (this.dragging) return; // Fire the mouse events\n\n      this.handleMouseDown(event);\n    }\n  }, {\n    key: 'handleTouchEndClearValue',\n    value: function handleTouchEndClearValue(event) {\n      // Check if the view is being dragged, In this case\n      // we don't want to fire the click event (because the user only wants to scroll)\n      if (this.dragging) return; // Clear the value\n\n      this.clearValue(event);\n    }\n  }, {\n    key: 'handleMouseDown',\n    value: function handleMouseDown(event) {\n      // if the event was triggered by a mousedown and not the primary\n      // button, or if the component is disabled, ignore it.\n      if (this.props.disabled || event.type === 'mousedown' && event.button !== 0) {\n        return;\n      }\n\n      if (event.target.tagName === 'INPUT') {\n        if (!this.state.isFocused) {\n          this._openAfterFocus = this.props.openOnClick;\n          this.focus();\n        } else if (!this.state.isOpen) {\n          this.setState({\n            isOpen: true,\n            isPseudoFocused: false,\n            focusedOption: null\n          });\n        }\n\n        return;\n      } // prevent default event handlers\n\n\n      event.preventDefault(); // for the non-searchable select, toggle the menu\n\n      if (!this.props.searchable) {\n        // This code means that if a select is searchable, onClick the options menu will not appear, only on subsequent click will it open.\n        this.focus();\n        return this.setState({\n          isOpen: !this.state.isOpen,\n          focusedOption: null\n        });\n      }\n\n      if (this.state.isFocused) {\n        // On iOS, we can get into a state where we think the input is focused but it isn't really,\n        // since iOS ignores programmatic calls to input.focus() that weren't triggered by a click event.\n        // Call focus() again here to be safe.\n        this.focus();\n        var input = this.input;\n        var toOpen = true;\n\n        if (typeof input.getInput === 'function') {\n          // Get the actual DOM input if the ref is an <AutosizeInput /> component\n          input = input.getInput();\n        } // clears the value so that the cursor will be at the end of input when the component re-renders\n\n\n        input.value = '';\n\n        if (this._focusAfterClear) {\n          toOpen = false;\n          this._focusAfterClear = false;\n        } // if the input is focused, ensure the menu is open\n\n\n        this.setState({\n          isOpen: toOpen,\n          isPseudoFocused: false,\n          focusedOption: null\n        });\n      } else {\n        // otherwise, focus the input and open the menu\n        this._openAfterFocus = this.props.openOnClick;\n        this.focus();\n        this.setState({\n          focusedOption: null\n        });\n      }\n    }\n  }, {\n    key: 'handleMouseDownOnArrow',\n    value: function handleMouseDownOnArrow(event) {\n      // if the event was triggered by a mousedown and not the primary\n      // button, or if the component is disabled, ignore it.\n      if (this.props.disabled || event.type === 'mousedown' && event.button !== 0) {\n        return;\n      }\n\n      if (this.state.isOpen) {\n        // prevent default event handlers\n        event.stopPropagation();\n        event.preventDefault(); // close the menu\n\n        this.closeMenu();\n      } else {\n        // If the menu isn't open, let the event bubble to the main handleMouseDown\n        this.setState({\n          isOpen: true\n        });\n      }\n    }\n  }, {\n    key: 'handleMouseDownOnMenu',\n    value: function handleMouseDownOnMenu(event) {\n      // if the event was triggered by a mousedown and not the primary\n      // button, or if the component is disabled, ignore it.\n      if (this.props.disabled || event.type === 'mousedown' && event.button !== 0) {\n        return;\n      }\n\n      event.stopPropagation();\n      event.preventDefault();\n      this._openAfterFocus = true;\n      this.focus();\n    }\n  }, {\n    key: 'closeMenu',\n    value: function closeMenu() {\n      if (this.props.onCloseResetsInput) {\n        this.setState({\n          inputValue: this.handleInputValueChange(''),\n          isOpen: false,\n          isPseudoFocused: this.state.isFocused && !this.props.multi\n        });\n      } else {\n        this.setState({\n          isOpen: false,\n          isPseudoFocused: this.state.isFocused && !this.props.multi\n        });\n      }\n\n      this.hasScrolledToOption = false;\n    }\n  }, {\n    key: 'handleInputFocus',\n    value: function handleInputFocus(event) {\n      if (this.props.disabled) return;\n      var toOpen = this.state.isOpen || this._openAfterFocus || this.props.openOnFocus;\n      toOpen = this._focusAfterClear ? false : toOpen; //if focus happens after clear values, don't open dropdown yet.\n\n      if (this.props.onFocus) {\n        this.props.onFocus(event);\n      }\n\n      this.setState({\n        isFocused: true,\n        isOpen: !!toOpen\n      });\n      this._focusAfterClear = false;\n      this._openAfterFocus = false;\n    }\n  }, {\n    key: 'handleInputBlur',\n    value: function handleInputBlur(event) {\n      // The check for menu.contains(activeElement) is necessary to prevent IE11's scrollbar from closing the menu in certain contexts.\n      if (this.menu && (this.menu === document.activeElement || this.menu.contains(document.activeElement))) {\n        this.focus();\n        return;\n      }\n\n      if (this.props.onBlur) {\n        this.props.onBlur(event);\n      }\n\n      var onBlurredState = {\n        isFocused: false,\n        isOpen: false,\n        isPseudoFocused: false\n      };\n\n      if (this.props.onBlurResetsInput) {\n        onBlurredState.inputValue = this.handleInputValueChange('');\n      }\n\n      this.setState(onBlurredState);\n    }\n  }, {\n    key: 'handleInputChange',\n    value: function handleInputChange(event) {\n      var newInputValue = event.target.value;\n\n      if (this.state.inputValue !== event.target.value) {\n        newInputValue = this.handleInputValueChange(newInputValue);\n      }\n\n      this.setState({\n        inputValue: newInputValue,\n        isOpen: true,\n        isPseudoFocused: false\n      });\n    }\n  }, {\n    key: 'setInputValue',\n    value: function setInputValue(newValue) {\n      if (this.props.onInputChange) {\n        var nextState = this.props.onInputChange(newValue);\n\n        if (nextState != null && (typeof nextState === 'undefined' ? 'undefined' : _typeof(nextState)) !== 'object') {\n          newValue = '' + nextState;\n        }\n      }\n\n      this.setState({\n        inputValue: newValue\n      });\n    }\n  }, {\n    key: 'handleInputValueChange',\n    value: function handleInputValueChange(newValue) {\n      if (this.props.onInputChange) {\n        var nextState = this.props.onInputChange(newValue); // Note: != used deliberately here to catch undefined and null\n\n        if (nextState != null && (typeof nextState === 'undefined' ? 'undefined' : _typeof(nextState)) !== 'object') {\n          newValue = '' + nextState;\n        }\n      }\n\n      return newValue;\n    }\n  }, {\n    key: 'handleKeyDown',\n    value: function handleKeyDown(event) {\n      if (this.props.disabled) return;\n\n      if (typeof this.props.onInputKeyDown === 'function') {\n        this.props.onInputKeyDown(event);\n\n        if (event.defaultPrevented) {\n          return;\n        }\n      }\n\n      switch (event.keyCode) {\n        case 8:\n          // backspace\n          if (!this.state.inputValue && this.props.backspaceRemoves) {\n            event.preventDefault();\n            this.popValue();\n          }\n\n          break;\n\n        case 9:\n          // tab\n          if (event.shiftKey || !this.state.isOpen || !this.props.tabSelectsValue) {\n            break;\n          }\n\n          event.preventDefault();\n          this.selectFocusedOption();\n          break;\n\n        case 13:\n          // enter\n          event.preventDefault();\n          event.stopPropagation();\n\n          if (this.state.isOpen) {\n            this.selectFocusedOption();\n          } else {\n            this.focusNextOption();\n          }\n\n          break;\n\n        case 27:\n          // escape\n          event.preventDefault();\n\n          if (this.state.isOpen) {\n            this.closeMenu();\n            event.stopPropagation();\n          } else if (this.props.clearable && this.props.escapeClearsValue) {\n            this.clearValue(event);\n            event.stopPropagation();\n          }\n\n          break;\n\n        case 32:\n          // space\n          if (this.props.searchable) {\n            break;\n          }\n\n          event.preventDefault();\n\n          if (!this.state.isOpen) {\n            this.focusNextOption();\n            break;\n          }\n\n          event.stopPropagation();\n          this.selectFocusedOption();\n          break;\n\n        case 38:\n          // up\n          event.preventDefault();\n          this.focusPreviousOption();\n          break;\n\n        case 40:\n          // down\n          event.preventDefault();\n          this.focusNextOption();\n          break;\n\n        case 33:\n          // page up\n          event.preventDefault();\n          this.focusPageUpOption();\n          break;\n\n        case 34:\n          // page down\n          event.preventDefault();\n          this.focusPageDownOption();\n          break;\n\n        case 35:\n          // end key\n          if (event.shiftKey) {\n            break;\n          }\n\n          event.preventDefault();\n          this.focusEndOption();\n          break;\n\n        case 36:\n          // home key\n          if (event.shiftKey) {\n            break;\n          }\n\n          event.preventDefault();\n          this.focusStartOption();\n          break;\n\n        case 46:\n          // delete\n          if (!this.state.inputValue && this.props.deleteRemoves) {\n            event.preventDefault();\n            this.popValue();\n          }\n\n          break;\n      }\n    }\n  }, {\n    key: 'handleValueClick',\n    value: function handleValueClick(option, event) {\n      if (!this.props.onValueClick) return;\n      this.props.onValueClick(option, event);\n    }\n  }, {\n    key: 'handleMenuScroll',\n    value: function handleMenuScroll(event) {\n      if (!this.props.onMenuScrollToBottom) return;\n      var target = event.target;\n\n      if (target.scrollHeight > target.offsetHeight && target.scrollHeight - target.offsetHeight - target.scrollTop <= 0) {\n        this.props.onMenuScrollToBottom();\n      }\n    }\n  }, {\n    key: 'getOptionLabel',\n    value: function getOptionLabel(op) {\n      return op[this.props.labelKey];\n    }\n    /**\n     * Turns a value into an array from the given options\n     * @param {String|Number|Array} value\t\t- the value of the select input\n     * @param {Object}\t\tnextProps\t- optionally specify the nextProps so the returned array uses the latest configuration\n     * @returns\t{Array}\tthe value of the select represented in an array\n     */\n\n  }, {\n    key: 'getValueArray',\n    value: function getValueArray(value) {\n      var nextProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n      /** support optionally passing in the `nextProps` so `componentWillReceiveProps` updates will function as expected */\n\n      var props = (typeof nextProps === 'undefined' ? 'undefined' : _typeof(nextProps)) === 'object' ? nextProps : this.props;\n\n      if (props.multi) {\n        if (typeof value === 'string') {\n          value = value.split(props.delimiter);\n        }\n\n        if (!Array.isArray(value)) {\n          if (value === null || value === undefined) return [];\n          value = [value];\n        }\n\n        return value.map(function (value) {\n          return expandValue(value, props);\n        }).filter(function (i) {\n          return i;\n        });\n      }\n\n      var expandedValue = expandValue(value, props);\n      return expandedValue ? [expandedValue] : [];\n    }\n  }, {\n    key: 'setValue',\n    value: function setValue(value) {\n      var _this2 = this;\n\n      if (this.props.autoBlur) {\n        this.blurInput();\n      }\n\n      if (this.props.required) {\n        var required = handleRequired(value, this.props.multi);\n        this.setState({\n          required: required\n        });\n      }\n\n      if (this.props.simpleValue && value) {\n        value = this.props.multi ? value.map(function (i) {\n          return i[_this2.props.valueKey];\n        }).join(this.props.delimiter) : value[this.props.valueKey];\n      }\n\n      if (this.props.onChange) {\n        this.props.onChange(value);\n      }\n    }\n  }, {\n    key: 'selectValue',\n    value: function selectValue(value) {\n      var _this3 = this; // NOTE: we actually add/set the value in a callback to make sure the\n      // input value is empty to avoid styling issues in Chrome\n\n\n      if (this.props.closeOnSelect) {\n        this.hasScrolledToOption = false;\n      }\n\n      var updatedValue = this.props.onSelectResetsInput ? '' : this.state.inputValue;\n\n      if (this.props.multi) {\n        this.setState({\n          focusedIndex: null,\n          inputValue: this.handleInputValueChange(updatedValue),\n          isOpen: !this.props.closeOnSelect\n        }, function () {\n          var valueArray = _this3.getValueArray(_this3.props.value);\n\n          if (valueArray.some(function (i) {\n            return i[_this3.props.valueKey] === value[_this3.props.valueKey];\n          })) {\n            _this3.removeValue(value);\n          } else {\n            _this3.addValue(value);\n          }\n        });\n      } else {\n        this.setState({\n          inputValue: this.handleInputValueChange(updatedValue),\n          isOpen: !this.props.closeOnSelect,\n          isPseudoFocused: this.state.isFocused\n        }, function () {\n          _this3.setValue(value);\n        });\n      }\n    }\n  }, {\n    key: 'addValue',\n    value: function addValue(value) {\n      var valueArray = this.getValueArray(this.props.value);\n\n      var visibleOptions = this._visibleOptions.filter(function (val) {\n        return !val.disabled;\n      });\n\n      var lastValueIndex = visibleOptions.indexOf(value);\n      this.setValue(valueArray.concat(value));\n\n      if (!this.props.closeOnSelect) {\n        return;\n      }\n\n      if (visibleOptions.length - 1 === lastValueIndex) {\n        // the last option was selected; focus the second-last one\n        this.focusOption(visibleOptions[lastValueIndex - 1]);\n      } else if (visibleOptions.length > lastValueIndex) {\n        // focus the option below the selected one\n        this.focusOption(visibleOptions[lastValueIndex + 1]);\n      }\n    }\n  }, {\n    key: 'popValue',\n    value: function popValue() {\n      var valueArray = this.getValueArray(this.props.value);\n      if (!valueArray.length) return;\n      if (valueArray[valueArray.length - 1].clearableValue === false) return;\n      this.setValue(this.props.multi ? valueArray.slice(0, valueArray.length - 1) : null);\n    }\n  }, {\n    key: 'removeValue',\n    value: function removeValue(value) {\n      var _this4 = this;\n\n      var valueArray = this.getValueArray(this.props.value);\n      this.setValue(valueArray.filter(function (i) {\n        return i[_this4.props.valueKey] !== value[_this4.props.valueKey];\n      }));\n      this.focus();\n    }\n  }, {\n    key: 'clearValue',\n    value: function clearValue(event) {\n      // if the event was triggered by a mousedown and not the primary\n      // button, ignore it.\n      if (event && event.type === 'mousedown' && event.button !== 0) {\n        return;\n      }\n\n      event.preventDefault();\n      this.setValue(this.getResetValue());\n      this.setState({\n        inputValue: this.handleInputValueChange(''),\n        isOpen: false\n      }, this.focus);\n      this._focusAfterClear = true;\n    }\n  }, {\n    key: 'getResetValue',\n    value: function getResetValue() {\n      if (this.props.resetValue !== undefined) {\n        return this.props.resetValue;\n      } else if (this.props.multi) {\n        return [];\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: 'focusOption',\n    value: function focusOption(option) {\n      this.setState({\n        focusedOption: option\n      });\n    }\n  }, {\n    key: 'focusNextOption',\n    value: function focusNextOption() {\n      this.focusAdjacentOption('next');\n    }\n  }, {\n    key: 'focusPreviousOption',\n    value: function focusPreviousOption() {\n      this.focusAdjacentOption('previous');\n    }\n  }, {\n    key: 'focusPageUpOption',\n    value: function focusPageUpOption() {\n      this.focusAdjacentOption('page_up');\n    }\n  }, {\n    key: 'focusPageDownOption',\n    value: function focusPageDownOption() {\n      this.focusAdjacentOption('page_down');\n    }\n  }, {\n    key: 'focusStartOption',\n    value: function focusStartOption() {\n      this.focusAdjacentOption('start');\n    }\n  }, {\n    key: 'focusEndOption',\n    value: function focusEndOption() {\n      this.focusAdjacentOption('end');\n    }\n  }, {\n    key: 'focusAdjacentOption',\n    value: function focusAdjacentOption(dir) {\n      var options = this._visibleOptions.map(function (option, index) {\n        return {\n          option: option,\n          index: index\n        };\n      }).filter(function (option) {\n        return !option.option.disabled;\n      });\n\n      this._scrollToFocusedOptionOnUpdate = true;\n\n      if (!this.state.isOpen) {\n        var newState = {\n          focusedOption: this._focusedOption || (options.length ? options[dir === 'next' ? 0 : options.length - 1].option : null),\n          isOpen: true\n        };\n\n        if (this.props.onSelectResetsInput) {\n          newState.inputValue = '';\n        }\n\n        this.setState(newState);\n        return;\n      }\n\n      if (!options.length) return;\n      var focusedIndex = -1;\n\n      for (var i = 0; i < options.length; i++) {\n        if (this._focusedOption === options[i].option) {\n          focusedIndex = i;\n          break;\n        }\n      }\n\n      if (dir === 'next' && focusedIndex !== -1) {\n        focusedIndex = (focusedIndex + 1) % options.length;\n      } else if (dir === 'previous') {\n        if (focusedIndex > 0) {\n          focusedIndex = focusedIndex - 1;\n        } else {\n          focusedIndex = options.length - 1;\n        }\n      } else if (dir === 'start') {\n        focusedIndex = 0;\n      } else if (dir === 'end') {\n        focusedIndex = options.length - 1;\n      } else if (dir === 'page_up') {\n        var potentialIndex = focusedIndex - this.props.pageSize;\n\n        if (potentialIndex < 0) {\n          focusedIndex = 0;\n        } else {\n          focusedIndex = potentialIndex;\n        }\n      } else if (dir === 'page_down') {\n        var _potentialIndex = focusedIndex + this.props.pageSize;\n\n        if (_potentialIndex > options.length - 1) {\n          focusedIndex = options.length - 1;\n        } else {\n          focusedIndex = _potentialIndex;\n        }\n      }\n\n      if (focusedIndex === -1) {\n        focusedIndex = 0;\n      }\n\n      this.setState({\n        focusedIndex: options[focusedIndex].index,\n        focusedOption: options[focusedIndex].option\n      });\n    }\n  }, {\n    key: 'getFocusedOption',\n    value: function getFocusedOption() {\n      return this._focusedOption;\n    }\n  }, {\n    key: 'selectFocusedOption',\n    value: function selectFocusedOption() {\n      if (this._focusedOption) {\n        return this.selectValue(this._focusedOption);\n      }\n    }\n  }, {\n    key: 'renderLoading',\n    value: function renderLoading() {\n      if (!this.props.isLoading) return;\n      return React.createElement('span', {\n        className: 'Select-loading-zone',\n        'aria-hidden': 'true'\n      }, React.createElement('span', {\n        className: 'Select-loading'\n      }));\n    }\n  }, {\n    key: 'renderValue',\n    value: function renderValue(valueArray, isOpen) {\n      var _this5 = this;\n\n      var renderLabel = this.props.valueRenderer || this.getOptionLabel;\n      var ValueComponent = this.props.valueComponent;\n\n      if (!valueArray.length) {\n        var showPlaceholder = shouldShowPlaceholder(this.state, this.props, isOpen);\n        return showPlaceholder ? React.createElement('div', {\n          className: 'Select-placeholder'\n        }, this.props.placeholder) : null;\n      }\n\n      var onClick = this.props.onValueClick ? this.handleValueClick : null;\n\n      if (this.props.multi) {\n        return valueArray.map(function (value, i) {\n          return React.createElement(ValueComponent, {\n            disabled: _this5.props.disabled || value.clearableValue === false,\n            id: _this5._instancePrefix + '-value-' + i,\n            instancePrefix: _this5._instancePrefix,\n            key: 'value-' + i + '-' + value[_this5.props.valueKey],\n            onClick: onClick,\n            onRemove: _this5.removeValue,\n            placeholder: _this5.props.placeholder,\n            value: value,\n            values: valueArray\n          }, renderLabel(value, i), React.createElement('span', {\n            className: 'Select-aria-only'\n          }, '\\xA0'));\n        });\n      } else if (shouldShowValue(this.state, this.props)) {\n        if (isOpen) onClick = null;\n        return React.createElement(ValueComponent, {\n          disabled: this.props.disabled,\n          id: this._instancePrefix + '-value-item',\n          instancePrefix: this._instancePrefix,\n          onClick: onClick,\n          placeholder: this.props.placeholder,\n          value: valueArray[0]\n        }, renderLabel(valueArray[0]));\n      }\n    }\n  }, {\n    key: 'renderInput',\n    value: function renderInput(valueArray, focusedOptionIndex) {\n      var _classNames,\n          _this6 = this;\n\n      var className = classNames('Select-input', this.props.inputProps.className);\n      var isOpen = this.state.isOpen;\n      var ariaOwns = classNames((_classNames = {}, defineProperty(_classNames, this._instancePrefix + '-list', isOpen), defineProperty(_classNames, this._instancePrefix + '-backspace-remove-message', this.props.multi && !this.props.disabled && this.state.isFocused && !this.state.inputValue), _classNames));\n      var value = this.state.inputValue;\n\n      if (value && !this.props.onSelectResetsInput && !this.state.isFocused) {\n        // it hides input value when it is not focused and was not reset on select\n        value = '';\n      }\n\n      var inputProps = _extends({}, this.props.inputProps, {\n        'aria-activedescendant': isOpen ? this._instancePrefix + '-option-' + focusedOptionIndex : this._instancePrefix + '-value',\n        'aria-describedby': this.props['aria-describedby'],\n        'aria-expanded': '' + isOpen,\n        'aria-haspopup': '' + isOpen,\n        'aria-label': this.props['aria-label'],\n        'aria-labelledby': this.props['aria-labelledby'],\n        'aria-owns': ariaOwns,\n        onBlur: this.handleInputBlur,\n        onChange: this.handleInputChange,\n        onFocus: this.handleInputFocus,\n        ref: function ref(_ref) {\n          return _this6.input = _ref;\n        },\n        role: 'combobox',\n        required: this.state.required,\n        tabIndex: this.props.tabIndex,\n        value: value\n      });\n\n      if (this.props.inputRenderer) {\n        return this.props.inputRenderer(inputProps);\n      }\n\n      if (this.props.disabled || !this.props.searchable) {\n        var divProps = objectWithoutProperties(this.props.inputProps, []);\n\n        var _ariaOwns = classNames(defineProperty({}, this._instancePrefix + '-list', isOpen));\n\n        return React.createElement('div', _extends({}, divProps, {\n          'aria-expanded': isOpen,\n          'aria-owns': _ariaOwns,\n          'aria-activedescendant': isOpen ? this._instancePrefix + '-option-' + focusedOptionIndex : this._instancePrefix + '-value',\n          'aria-disabled': '' + this.props.disabled,\n          'aria-label': this.props['aria-label'],\n          'aria-labelledby': this.props['aria-labelledby'],\n          className: className,\n          onBlur: this.handleInputBlur,\n          onFocus: this.handleInputFocus,\n          ref: function ref(_ref2) {\n            return _this6.input = _ref2;\n          },\n          role: 'combobox',\n          style: {\n            border: 0,\n            width: 1,\n            display: 'inline-block'\n          },\n          tabIndex: this.props.tabIndex || 0\n        }));\n      }\n\n      if (this.props.autosize) {\n        return React.createElement(AutosizeInput, _extends({\n          id: this.props.id\n        }, inputProps, {\n          className: className,\n          minWidth: '5'\n        }));\n      }\n\n      return React.createElement('div', {\n        className: className,\n        key: 'input-wrap',\n        style: {\n          display: 'inline-block'\n        }\n      }, React.createElement('input', _extends({\n        id: this.props.id\n      }, inputProps)));\n    }\n  }, {\n    key: 'renderClear',\n    value: function renderClear() {\n      var valueArray = this.getValueArray(this.props.value);\n      if (!this.props.clearable || !valueArray.length || this.props.disabled || this.props.isLoading) return;\n      var ariaLabel = this.props.multi ? this.props.clearAllText : this.props.clearValueText;\n      var clear = this.props.clearRenderer();\n      return React.createElement('span', {\n        'aria-label': ariaLabel,\n        className: 'Select-clear-zone',\n        onMouseDown: this.clearValue,\n        onTouchEnd: this.handleTouchEndClearValue,\n        onTouchMove: this.handleTouchMove,\n        onTouchStart: this.handleTouchStart,\n        title: ariaLabel\n      }, clear);\n    }\n  }, {\n    key: 'renderArrow',\n    value: function renderArrow() {\n      if (!this.props.arrowRenderer) return;\n      var onMouseDown = this.handleMouseDownOnArrow;\n      var isOpen = this.state.isOpen;\n      var arrow = this.props.arrowRenderer({\n        onMouseDown: onMouseDown,\n        isOpen: isOpen\n      });\n\n      if (!arrow) {\n        return null;\n      }\n\n      return React.createElement('span', {\n        className: 'Select-arrow-zone',\n        onMouseDown: onMouseDown\n      }, arrow);\n    }\n  }, {\n    key: 'filterOptions',\n    value: function filterOptions$$1(excludeOptions) {\n      var filterValue = this.state.inputValue;\n      var options = this.props.options || [];\n\n      if (this.props.filterOptions) {\n        // Maintain backwards compatibility with boolean attribute\n        var filterOptions$$1 = typeof this.props.filterOptions === 'function' ? this.props.filterOptions : filterOptions;\n        return filterOptions$$1(options, filterValue, excludeOptions, {\n          filterOption: this.props.filterOption,\n          ignoreAccents: this.props.ignoreAccents,\n          ignoreCase: this.props.ignoreCase,\n          labelKey: this.props.labelKey,\n          matchPos: this.props.matchPos,\n          matchProp: this.props.matchProp,\n          trimFilter: this.props.trimFilter,\n          valueKey: this.props.valueKey\n        });\n      } else {\n        return options;\n      }\n    }\n  }, {\n    key: 'onOptionRef',\n    value: function onOptionRef(ref, isFocused) {\n      if (isFocused) {\n        this.focused = ref;\n      }\n    }\n  }, {\n    key: 'renderMenu',\n    value: function renderMenu(options, valueArray, focusedOption) {\n      if (options && options.length) {\n        return this.props.menuRenderer({\n          focusedOption: focusedOption,\n          focusOption: this.focusOption,\n          inputValue: this.state.inputValue,\n          instancePrefix: this._instancePrefix,\n          labelKey: this.props.labelKey,\n          onFocus: this.focusOption,\n          onOptionRef: this.onOptionRef,\n          onSelect: this.selectValue,\n          optionClassName: this.props.optionClassName,\n          optionComponent: this.props.optionComponent,\n          optionRenderer: this.props.optionRenderer || this.getOptionLabel,\n          options: options,\n          removeValue: this.removeValue,\n          selectValue: this.selectValue,\n          valueArray: valueArray,\n          valueKey: this.props.valueKey\n        });\n      } else if (this.props.noResultsText) {\n        return React.createElement('div', {\n          className: 'Select-noresults'\n        }, this.props.noResultsText);\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: 'renderHiddenField',\n    value: function renderHiddenField(valueArray) {\n      var _this7 = this;\n\n      if (!this.props.name) return;\n\n      if (this.props.joinValues) {\n        var value = valueArray.map(function (i) {\n          return stringifyValue(i[_this7.props.valueKey]);\n        }).join(this.props.delimiter);\n        return React.createElement('input', {\n          disabled: this.props.disabled,\n          name: this.props.name,\n          ref: function ref(_ref3) {\n            return _this7.value = _ref3;\n          },\n          type: 'hidden',\n          value: value\n        });\n      }\n\n      return valueArray.map(function (item, index) {\n        return React.createElement('input', {\n          disabled: _this7.props.disabled,\n          key: 'hidden.' + index,\n          name: _this7.props.name,\n          ref: 'value' + index,\n          type: 'hidden',\n          value: stringifyValue(item[_this7.props.valueKey])\n        });\n      });\n    }\n  }, {\n    key: 'getFocusableOptionIndex',\n    value: function getFocusableOptionIndex(selectedOption) {\n      var options = this._visibleOptions;\n      if (!options.length) return null;\n      var valueKey = this.props.valueKey;\n      var focusedOption = this.state.focusedOption || selectedOption;\n\n      if (focusedOption && !focusedOption.disabled) {\n        var focusedOptionIndex = -1;\n        options.some(function (option, index) {\n          var isOptionEqual = option[valueKey] === focusedOption[valueKey];\n\n          if (isOptionEqual) {\n            focusedOptionIndex = index;\n          }\n\n          return isOptionEqual;\n        });\n\n        if (focusedOptionIndex !== -1) {\n          return focusedOptionIndex;\n        }\n      }\n\n      for (var i = 0; i < options.length; i++) {\n        if (!options[i].disabled) return i;\n      }\n\n      return null;\n    }\n  }, {\n    key: 'renderOuter',\n    value: function renderOuter(options, valueArray, focusedOption) {\n      var _this8 = this;\n\n      var menu = this.renderMenu(options, valueArray, focusedOption);\n\n      if (!menu) {\n        return null;\n      }\n\n      return React.createElement('div', {\n        ref: function ref(_ref5) {\n          return _this8.menuContainer = _ref5;\n        },\n        className: 'Select-menu-outer',\n        style: this.props.menuContainerStyle\n      }, React.createElement('div', {\n        className: 'Select-menu',\n        id: this._instancePrefix + '-list',\n        onMouseDown: this.handleMouseDownOnMenu,\n        onScroll: this.handleMenuScroll,\n        ref: function ref(_ref4) {\n          return _this8.menu = _ref4;\n        },\n        role: 'listbox',\n        style: this.props.menuStyle,\n        tabIndex: -1\n      }, menu));\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this9 = this;\n\n      var valueArray = this.getValueArray(this.props.value);\n      var options = this._visibleOptions = this.filterOptions(this.props.multi && this.props.removeSelected ? valueArray : null);\n      var isOpen = this.state.isOpen;\n      if (this.props.multi && !options.length && valueArray.length && !this.state.inputValue) isOpen = false;\n      var focusedOptionIndex = this.getFocusableOptionIndex(valueArray[0]);\n      var focusedOption = null;\n\n      if (focusedOptionIndex !== null) {\n        focusedOption = this._focusedOption = options[focusedOptionIndex];\n      } else {\n        focusedOption = this._focusedOption = null;\n      }\n\n      var className = classNames('Select', this.props.className, {\n        'has-value': valueArray.length,\n        'is-clearable': this.props.clearable,\n        'is-disabled': this.props.disabled,\n        'is-focused': this.state.isFocused,\n        'is-loading': this.props.isLoading,\n        'is-open': isOpen,\n        'is-pseudo-focused': this.state.isPseudoFocused,\n        'is-searchable': this.props.searchable,\n        'Select--multi': this.props.multi,\n        'Select--rtl': this.props.rtl,\n        'Select--single': !this.props.multi\n      });\n      var removeMessage = null;\n\n      if (this.props.multi && !this.props.disabled && valueArray.length && !this.state.inputValue && this.state.isFocused && this.props.backspaceRemoves) {\n        removeMessage = React.createElement('span', {\n          id: this._instancePrefix + '-backspace-remove-message',\n          className: 'Select-aria-only',\n          'aria-live': 'assertive'\n        }, this.props.backspaceToRemoveMessage.replace('{label}', valueArray[valueArray.length - 1][this.props.labelKey]));\n      }\n\n      return React.createElement('div', {\n        ref: function ref(_ref7) {\n          return _this9.wrapper = _ref7;\n        },\n        className: className,\n        style: this.props.wrapperStyle\n      }, this.renderHiddenField(valueArray), React.createElement('div', {\n        ref: function ref(_ref6) {\n          return _this9.control = _ref6;\n        },\n        className: 'Select-control',\n        onKeyDown: this.handleKeyDown,\n        onMouseDown: this.handleMouseDown,\n        onTouchEnd: this.handleTouchEnd,\n        onTouchMove: this.handleTouchMove,\n        onTouchStart: this.handleTouchStart,\n        style: this.props.style\n      }, React.createElement('div', {\n        className: 'Select-multi-value-wrapper',\n        id: this._instancePrefix + '-value'\n      }, this.renderValue(valueArray, isOpen), this.renderInput(valueArray, focusedOptionIndex)), removeMessage, this.renderLoading(), this.renderClear(), this.renderArrow()), isOpen ? this.renderOuter(options, valueArray, focusedOption) : null);\n    }\n  }]);\n  return Select;\n}(React.Component);\n\nSelect$1.propTypes = {\n  'aria-describedby': PropTypes.string,\n  // html id(s) of element(s) that should be used to describe this input (for assistive tech)\n  'aria-label': PropTypes.string,\n  // aria label (for assistive tech)\n  'aria-labelledby': PropTypes.string,\n  // html id of an element that should be used as the label (for assistive tech)\n  arrowRenderer: PropTypes.func,\n  // create the drop-down caret element\n  autoBlur: PropTypes.bool,\n  // automatically blur the component when an option is selected\n  autoFocus: PropTypes.bool,\n  // autofocus the component on mount\n  autofocus: PropTypes.bool,\n  // deprecated; use autoFocus instead\n  autosize: PropTypes.bool,\n  // whether to enable autosizing or not\n  backspaceRemoves: PropTypes.bool,\n  // whether backspace removes an item if there is no text input\n  backspaceToRemoveMessage: PropTypes.string,\n  // message to use for screenreaders to press backspace to remove the current item - {label} is replaced with the item label\n  className: PropTypes.string,\n  // className for the outer element\n  clearAllText: stringOrNode,\n  // title for the \"clear\" control when multi: true\n  clearRenderer: PropTypes.func,\n  // create clearable x element\n  clearValueText: stringOrNode,\n  // title for the \"clear\" control\n  clearable: PropTypes.bool,\n  // should it be possible to reset value\n  closeOnSelect: PropTypes.bool,\n  // whether to close the menu when a value is selected\n  deleteRemoves: PropTypes.bool,\n  // whether delete removes an item if there is no text input\n  delimiter: PropTypes.string,\n  // delimiter to use to join multiple values for the hidden field value\n  disabled: PropTypes.bool,\n  // whether the Select is disabled or not\n  escapeClearsValue: PropTypes.bool,\n  // whether escape clears the value when the menu is closed\n  filterOption: PropTypes.func,\n  // method to filter a single option (option, filterString)\n  filterOptions: PropTypes.any,\n  // boolean to enable default filtering or function to filter the options array ([options], filterString, [values])\n  id: PropTypes.string,\n  // html id to set on the input element for accessibility or tests\n  ignoreAccents: PropTypes.bool,\n  // whether to strip diacritics when filtering\n  ignoreCase: PropTypes.bool,\n  // whether to perform case-insensitive filtering\n  inputProps: PropTypes.object,\n  // custom attributes for the Input\n  inputRenderer: PropTypes.func,\n  // returns a custom input component\n  instanceId: PropTypes.string,\n  // set the components instanceId\n  isLoading: PropTypes.bool,\n  // whether the Select is loading externally or not (such as options being loaded)\n  joinValues: PropTypes.bool,\n  // joins multiple values into a single form field with the delimiter (legacy mode)\n  labelKey: PropTypes.string,\n  // path of the label value in option objects\n  matchPos: PropTypes.string,\n  // (any|start) match the start or entire string when filtering\n  matchProp: PropTypes.string,\n  // (any|label|value) which option property to filter on\n  menuBuffer: PropTypes.number,\n  // optional buffer (in px) between the bottom of the viewport and the bottom of the menu\n  menuContainerStyle: PropTypes.object,\n  // optional style to apply to the menu container\n  menuRenderer: PropTypes.func,\n  // renders a custom menu with options\n  menuStyle: PropTypes.object,\n  // optional style to apply to the menu\n  multi: PropTypes.bool,\n  // multi-value input\n  name: PropTypes.string,\n  // generates a hidden <input /> tag with this field name for html forms\n  noResultsText: stringOrNode,\n  // placeholder displayed when there are no matching search results\n  onBlur: PropTypes.func,\n  // onBlur handler: function (event) {}\n  onBlurResetsInput: PropTypes.bool,\n  // whether input is cleared on blur\n  onChange: PropTypes.func,\n  // onChange handler: function (newValue) {}\n  onClose: PropTypes.func,\n  // fires when the menu is closed\n  onCloseResetsInput: PropTypes.bool,\n  // whether input is cleared when menu is closed through the arrow\n  onFocus: PropTypes.func,\n  // onFocus handler: function (event) {}\n  onInputChange: PropTypes.func,\n  // onInputChange handler: function (inputValue) {}\n  onInputKeyDown: PropTypes.func,\n  // input keyDown handler: function (event) {}\n  onMenuScrollToBottom: PropTypes.func,\n  // fires when the menu is scrolled to the bottom; can be used to paginate options\n  onOpen: PropTypes.func,\n  // fires when the menu is opened\n  onSelectResetsInput: PropTypes.bool,\n  // whether input is cleared on select (works only for multiselect)\n  onValueClick: PropTypes.func,\n  // onClick handler for value labels: function (value, event) {}\n  openOnClick: PropTypes.bool,\n  // boolean to control opening the menu when the control is clicked\n  openOnFocus: PropTypes.bool,\n  // always open options menu on focus\n  optionClassName: PropTypes.string,\n  // additional class(es) to apply to the <Option /> elements\n  optionComponent: PropTypes.func,\n  // option component to render in dropdown\n  optionRenderer: PropTypes.func,\n  // optionRenderer: function (option) {}\n  options: PropTypes.array,\n  // array of options\n  pageSize: PropTypes.number,\n  // number of entries to page when using page up/down keys\n  placeholder: stringOrNode,\n  // field placeholder, displayed when there's no value\n  removeSelected: PropTypes.bool,\n  // whether the selected option is removed from the dropdown on multi selects\n  required: PropTypes.bool,\n  // applies HTML5 required attribute when needed\n  resetValue: PropTypes.any,\n  // value to use when you clear the control\n  rtl: PropTypes.bool,\n  // set to true in order to use react-select in right-to-left direction\n  scrollMenuIntoView: PropTypes.bool,\n  // boolean to enable the viewport to shift so that the full menu fully visible when engaged\n  searchable: PropTypes.bool,\n  // whether to enable searching feature or not\n  simpleValue: PropTypes.bool,\n  // pass the value to onChange as a simple value (legacy pre 1.0 mode), defaults to false\n  style: PropTypes.object,\n  // optional style to apply to the control\n  tabIndex: stringOrNumber,\n  // optional tab index of the control\n  tabSelectsValue: PropTypes.bool,\n  // whether to treat tabbing out while focused to be value selection\n  trimFilter: PropTypes.bool,\n  // whether to trim whitespace around filter value\n  value: PropTypes.any,\n  // initial field value\n  valueComponent: PropTypes.func,\n  // value component to render\n  valueKey: PropTypes.string,\n  // path of the label value in option objects\n  valueRenderer: PropTypes.func,\n  // valueRenderer: function (option) {}\n  wrapperStyle: PropTypes.object // optional style to apply to the component wrapper\n\n};\nSelect$1.defaultProps = {\n  arrowRenderer: arrowRenderer,\n  autosize: true,\n  backspaceRemoves: true,\n  backspaceToRemoveMessage: 'Press backspace to remove {label}',\n  clearable: true,\n  clearAllText: 'Clear all',\n  clearRenderer: clearRenderer,\n  clearValueText: 'Clear value',\n  closeOnSelect: true,\n  deleteRemoves: true,\n  delimiter: ',',\n  disabled: false,\n  escapeClearsValue: true,\n  filterOptions: filterOptions,\n  ignoreAccents: true,\n  ignoreCase: true,\n  inputProps: {},\n  isLoading: false,\n  joinValues: false,\n  labelKey: 'label',\n  matchPos: 'any',\n  matchProp: 'any',\n  menuBuffer: 0,\n  menuRenderer: menuRenderer,\n  multi: false,\n  noResultsText: 'No results found',\n  onBlurResetsInput: true,\n  onCloseResetsInput: true,\n  onSelectResetsInput: true,\n  openOnClick: true,\n  optionComponent: Option,\n  pageSize: 5,\n  placeholder: 'Select...',\n  removeSelected: true,\n  required: false,\n  rtl: false,\n  scrollMenuIntoView: true,\n  searchable: true,\n  simpleValue: false,\n  tabSelectsValue: true,\n  trimFilter: true,\n  valueComponent: Value,\n  valueKey: 'value'\n};\nvar propTypes = {\n  autoload: PropTypes.bool.isRequired,\n  // automatically call the `loadOptions` prop on-mount; defaults to true\n  cache: PropTypes.any,\n  // object to use to cache results; set to null/false to disable caching\n  children: PropTypes.func.isRequired,\n  // Child function responsible for creating the inner Select component; (props: Object): PropTypes.element\n  ignoreAccents: PropTypes.bool,\n  // strip diacritics when filtering; defaults to true\n  ignoreCase: PropTypes.bool,\n  // perform case-insensitive filtering; defaults to true\n  loadOptions: PropTypes.func.isRequired,\n  // callback to load options asynchronously; (inputValue: string, callback: Function): ?Promise\n  loadingPlaceholder: PropTypes.oneOfType([// replaces the placeholder while options are loading\n  PropTypes.string, PropTypes.node]),\n  multi: PropTypes.bool,\n  // multi-value input\n  noResultsText: PropTypes.oneOfType([// field noResultsText, displayed when no options come back from the server\n  PropTypes.string, PropTypes.node]),\n  onChange: PropTypes.func,\n  // onChange handler: function (newValue) {}\n  onInputChange: PropTypes.func,\n  // optional for keeping track of what is being typed\n  options: PropTypes.array.isRequired,\n  // array of options\n  placeholder: PropTypes.oneOfType([// field placeholder, displayed when there's no value (shared with Select)\n  PropTypes.string, PropTypes.node]),\n  searchPromptText: PropTypes.oneOfType([// label to prompt for search input\n  PropTypes.string, PropTypes.node]),\n  value: PropTypes.any // initial field value\n\n};\nvar defaultCache = {};\n\nvar defaultChildren = function defaultChildren(props) {\n  return React.createElement(Select$1, props);\n};\n\nvar defaultProps = {\n  autoload: true,\n  cache: defaultCache,\n  children: defaultChildren,\n  ignoreAccents: true,\n  ignoreCase: true,\n  loadingPlaceholder: 'Loading...',\n  options: [],\n  searchPromptText: 'Type to search'\n};\n\nvar Async = function (_Component) {\n  inherits(Async, _Component);\n\n  function Async(props, context) {\n    classCallCheck(this, Async);\n\n    var _this = possibleConstructorReturn(this, (Async.__proto__ || Object.getPrototypeOf(Async)).call(this, props, context));\n\n    _this._cache = props.cache === defaultCache ? {} : props.cache;\n    _this.state = {\n      inputValue: '',\n      isLoading: false,\n      options: props.options\n    };\n    _this.onInputChange = _this.onInputChange.bind(_this);\n    return _this;\n  }\n\n  createClass(Async, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var autoload = this.props.autoload;\n\n      if (autoload) {\n        this.loadOptions('');\n      }\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.options !== this.props.options) {\n        this.setState({\n          options: nextProps.options\n        });\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this._callback = null;\n    }\n  }, {\n    key: 'loadOptions',\n    value: function loadOptions(inputValue) {\n      var _this2 = this;\n\n      var loadOptions = this.props.loadOptions;\n      var cache = this._cache;\n\n      if (cache && Object.prototype.hasOwnProperty.call(cache, inputValue)) {\n        this._callback = null;\n        this.setState({\n          isLoading: false,\n          options: cache[inputValue]\n        });\n        return;\n      }\n\n      var callback = function callback(error, data) {\n        var options = data && data.options || [];\n\n        if (cache) {\n          cache[inputValue] = options;\n        }\n\n        if (callback === _this2._callback) {\n          _this2._callback = null;\n\n          _this2.setState({\n            isLoading: false,\n            options: options\n          });\n        }\n      }; // Ignore all but the most recent request\n\n\n      this._callback = callback;\n      var promise = loadOptions(inputValue, callback);\n\n      if (promise) {\n        promise.then(function (data) {\n          return callback(null, data);\n        }, function (error) {\n          return callback(error);\n        });\n      }\n\n      if (this._callback && !this.state.isLoading) {\n        this.setState({\n          isLoading: true\n        });\n      }\n    }\n  }, {\n    key: 'onInputChange',\n    value: function onInputChange(inputValue) {\n      var _props = this.props,\n          ignoreAccents = _props.ignoreAccents,\n          ignoreCase = _props.ignoreCase,\n          onInputChange = _props.onInputChange;\n      var newInputValue = inputValue;\n\n      if (onInputChange) {\n        var value = onInputChange(newInputValue); // Note: != used deliberately here to catch undefined and null\n\n        if (value != null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') {\n          newInputValue = '' + value;\n        }\n      }\n\n      var transformedInputValue = newInputValue;\n\n      if (ignoreAccents) {\n        transformedInputValue = stripDiacritics(transformedInputValue);\n      }\n\n      if (ignoreCase) {\n        transformedInputValue = transformedInputValue.toLowerCase();\n      }\n\n      this.setState({\n        inputValue: newInputValue\n      });\n      this.loadOptions(transformedInputValue); // Return new input value, but without applying toLowerCase() to avoid modifying the user's view case of the input while typing.\n\n      return newInputValue;\n    }\n  }, {\n    key: 'noResultsText',\n    value: function noResultsText() {\n      var _props2 = this.props,\n          loadingPlaceholder = _props2.loadingPlaceholder,\n          noResultsText = _props2.noResultsText,\n          searchPromptText = _props2.searchPromptText;\n      var _state = this.state,\n          inputValue = _state.inputValue,\n          isLoading = _state.isLoading;\n\n      if (isLoading) {\n        return loadingPlaceholder;\n      }\n\n      if (inputValue && noResultsText) {\n        return noResultsText;\n      }\n\n      return searchPromptText;\n    }\n  }, {\n    key: 'focus',\n    value: function focus() {\n      this.select.focus();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      var _props3 = this.props,\n          children = _props3.children,\n          loadingPlaceholder = _props3.loadingPlaceholder,\n          placeholder = _props3.placeholder;\n      var _state2 = this.state,\n          isLoading = _state2.isLoading,\n          options = _state2.options;\n      var props = {\n        noResultsText: this.noResultsText(),\n        placeholder: isLoading ? loadingPlaceholder : placeholder,\n        options: isLoading && loadingPlaceholder ? [] : options,\n        ref: function ref(_ref) {\n          return _this3.select = _ref;\n        }\n      };\n      return children(_extends({}, this.props, props, {\n        isLoading: isLoading,\n        onInputChange: this.onInputChange\n      }));\n    }\n  }]);\n  return Async;\n}(Component);\n\nAsync.propTypes = propTypes;\nAsync.defaultProps = defaultProps;\n\nvar CreatableSelect = function (_React$Component) {\n  inherits(CreatableSelect, _React$Component);\n\n  function CreatableSelect(props, context) {\n    classCallCheck(this, CreatableSelect);\n\n    var _this = possibleConstructorReturn(this, (CreatableSelect.__proto__ || Object.getPrototypeOf(CreatableSelect)).call(this, props, context));\n\n    _this.filterOptions = _this.filterOptions.bind(_this);\n    _this.menuRenderer = _this.menuRenderer.bind(_this);\n    _this.onInputKeyDown = _this.onInputKeyDown.bind(_this);\n    _this.onInputChange = _this.onInputChange.bind(_this);\n    _this.onOptionSelect = _this.onOptionSelect.bind(_this);\n    return _this;\n  }\n\n  createClass(CreatableSelect, [{\n    key: 'createNewOption',\n    value: function createNewOption() {\n      var _props = this.props,\n          isValidNewOption = _props.isValidNewOption,\n          newOptionCreator = _props.newOptionCreator,\n          onNewOptionClick = _props.onNewOptionClick,\n          _props$options = _props.options,\n          options = _props$options === undefined ? [] : _props$options;\n\n      if (isValidNewOption({\n        label: this.inputValue\n      })) {\n        var option = newOptionCreator({\n          label: this.inputValue,\n          labelKey: this.labelKey,\n          valueKey: this.valueKey\n        });\n\n        var _isOptionUnique = this.isOptionUnique({\n          option: option,\n          options: options\n        }); // Don't add the same option twice.\n\n\n        if (_isOptionUnique) {\n          if (onNewOptionClick) {\n            onNewOptionClick(option);\n          } else {\n            options.unshift(option);\n            this.select.selectValue(option);\n          }\n        }\n      }\n    }\n  }, {\n    key: 'filterOptions',\n    value: function filterOptions$$1() {\n      var _props2 = this.props,\n          filterOptions$$1 = _props2.filterOptions,\n          isValidNewOption = _props2.isValidNewOption,\n          promptTextCreator = _props2.promptTextCreator,\n          showNewOptionAtTop = _props2.showNewOptionAtTop; // TRICKY Check currently selected options as well.\n      // Don't display a create-prompt for a value that's selected.\n      // This covers async edge-cases where a newly-created Option isn't yet in the async-loaded array.\n\n      var excludeOptions = (arguments.length <= 2 ? undefined : arguments[2]) || [];\n      var filteredOptions = filterOptions$$1.apply(undefined, arguments) || [];\n\n      if (isValidNewOption({\n        label: this.inputValue\n      })) {\n        var _newOptionCreator = this.props.newOptionCreator;\n\n        var option = _newOptionCreator({\n          label: this.inputValue,\n          labelKey: this.labelKey,\n          valueKey: this.valueKey\n        }); // TRICKY Compare to all options (not just filtered options) in case option has already been selected).\n        // For multi-selects, this would remove it from the filtered list.\n\n\n        var _isOptionUnique2 = this.isOptionUnique({\n          option: option,\n          options: excludeOptions.concat(filteredOptions)\n        });\n\n        if (_isOptionUnique2) {\n          var prompt = promptTextCreator(this.inputValue);\n          this._createPlaceholderOption = _newOptionCreator({\n            label: prompt,\n            labelKey: this.labelKey,\n            valueKey: this.valueKey\n          });\n\n          if (showNewOptionAtTop) {\n            filteredOptions.unshift(this._createPlaceholderOption);\n          } else {\n            filteredOptions.push(this._createPlaceholderOption);\n          }\n        }\n      }\n\n      return filteredOptions;\n    }\n  }, {\n    key: 'isOptionUnique',\n    value: function isOptionUnique(_ref) {\n      var option = _ref.option,\n          options = _ref.options;\n      var isOptionUnique = this.props.isOptionUnique;\n      options = options || this.props.options;\n      return isOptionUnique({\n        labelKey: this.labelKey,\n        option: option,\n        options: options,\n        valueKey: this.valueKey\n      });\n    }\n  }, {\n    key: 'menuRenderer',\n    value: function menuRenderer$$1(params) {\n      var menuRenderer$$1 = this.props.menuRenderer;\n      return menuRenderer$$1(_extends({}, params, {\n        onSelect: this.onOptionSelect,\n        selectValue: this.onOptionSelect\n      }));\n    }\n  }, {\n    key: 'onInputChange',\n    value: function onInputChange(input) {\n      var onInputChange = this.props.onInputChange; // This value may be needed in between Select mounts (when this.select is null)\n\n      this.inputValue = input;\n\n      if (onInputChange) {\n        this.inputValue = onInputChange(input);\n      }\n\n      return this.inputValue;\n    }\n  }, {\n    key: 'onInputKeyDown',\n    value: function onInputKeyDown(event) {\n      var _props3 = this.props,\n          shouldKeyDownEventCreateNewOption = _props3.shouldKeyDownEventCreateNewOption,\n          onInputKeyDown = _props3.onInputKeyDown;\n      var focusedOption = this.select.getFocusedOption();\n\n      if (focusedOption && focusedOption === this._createPlaceholderOption && shouldKeyDownEventCreateNewOption(event)) {\n        this.createNewOption(); // Prevent decorated Select from doing anything additional with this keyDown event\n\n        event.preventDefault();\n      } else if (onInputKeyDown) {\n        onInputKeyDown(event);\n      }\n    }\n  }, {\n    key: 'onOptionSelect',\n    value: function onOptionSelect(option) {\n      if (option === this._createPlaceholderOption) {\n        this.createNewOption();\n      } else {\n        this.select.selectValue(option);\n      }\n    }\n  }, {\n    key: 'focus',\n    value: function focus() {\n      this.select.focus();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props4 = this.props,\n          refProp = _props4.ref,\n          restProps = objectWithoutProperties(_props4, ['ref']);\n      var children = this.props.children; // We can't use destructuring default values to set the children,\n      // because it won't apply work if `children` is null. A falsy check is\n      // more reliable in real world use-cases.\n\n      if (!children) {\n        children = defaultChildren$2;\n      }\n\n      var props = _extends({}, restProps, {\n        allowCreate: true,\n        filterOptions: this.filterOptions,\n        menuRenderer: this.menuRenderer,\n        onInputChange: this.onInputChange,\n        onInputKeyDown: this.onInputKeyDown,\n        ref: function ref(_ref2) {\n          _this2.select = _ref2; // These values may be needed in between Select mounts (when this.select is null)\n\n          if (_ref2) {\n            _this2.labelKey = _ref2.props.labelKey;\n            _this2.valueKey = _ref2.props.valueKey;\n          }\n\n          if (refProp) {\n            refProp(_ref2);\n          }\n        }\n      });\n\n      return children(props);\n    }\n  }]);\n  return CreatableSelect;\n}(React.Component);\n\nvar defaultChildren$2 = function defaultChildren(props) {\n  return React.createElement(Select$1, props);\n};\n\nvar isOptionUnique = function isOptionUnique(_ref3) {\n  var option = _ref3.option,\n      options = _ref3.options,\n      labelKey = _ref3.labelKey,\n      valueKey = _ref3.valueKey;\n\n  if (!options || !options.length) {\n    return true;\n  }\n\n  return options.filter(function (existingOption) {\n    return existingOption[labelKey] === option[labelKey] || existingOption[valueKey] === option[valueKey];\n  }).length === 0;\n};\n\nvar isValidNewOption = function isValidNewOption(_ref4) {\n  var label = _ref4.label;\n  return !!label;\n};\n\nvar newOptionCreator = function newOptionCreator(_ref5) {\n  var label = _ref5.label,\n      labelKey = _ref5.labelKey,\n      valueKey = _ref5.valueKey;\n  var option = {};\n  option[valueKey] = label;\n  option[labelKey] = label;\n  option.className = 'Select-create-option-placeholder';\n  return option;\n};\n\nvar promptTextCreator = function promptTextCreator(label) {\n  return 'Create option \"' + label + '\"';\n};\n\nvar shouldKeyDownEventCreateNewOption = function shouldKeyDownEventCreateNewOption(_ref6) {\n  var keyCode = _ref6.keyCode;\n\n  switch (keyCode) {\n    case 9: // TAB\n\n    case 13: // ENTER\n\n    case 188:\n      // COMMA\n      return true;\n\n    default:\n      return false;\n  }\n}; // Default prop methods\n\n\nCreatableSelect.isOptionUnique = isOptionUnique;\nCreatableSelect.isValidNewOption = isValidNewOption;\nCreatableSelect.newOptionCreator = newOptionCreator;\nCreatableSelect.promptTextCreator = promptTextCreator;\nCreatableSelect.shouldKeyDownEventCreateNewOption = shouldKeyDownEventCreateNewOption;\nCreatableSelect.defaultProps = {\n  filterOptions: filterOptions,\n  isOptionUnique: isOptionUnique,\n  isValidNewOption: isValidNewOption,\n  menuRenderer: menuRenderer,\n  newOptionCreator: newOptionCreator,\n  promptTextCreator: promptTextCreator,\n  shouldKeyDownEventCreateNewOption: shouldKeyDownEventCreateNewOption,\n  showNewOptionAtTop: true\n};\nCreatableSelect.propTypes = {\n  // Child function responsible for creating the inner Select component\n  // This component can be used to compose HOCs (eg Creatable and Async)\n  // (props: Object): PropTypes.element\n  children: PropTypes.func,\n  // See Select.propTypes.filterOptions\n  filterOptions: PropTypes.any,\n  // Searches for any matching option within the set of options.\n  // This function prevents duplicate options from being created.\n  // ({ option: Object, options: Array, labelKey: string, valueKey: string }): boolean\n  isOptionUnique: PropTypes.func,\n  // Determines if the current input text represents a valid option.\n  // ({ label: string }): boolean\n  isValidNewOption: PropTypes.func,\n  // See Select.propTypes.menuRenderer\n  menuRenderer: PropTypes.any,\n  // Factory to create new option.\n  // ({ label: string, labelKey: string, valueKey: string }): Object\n  newOptionCreator: PropTypes.func,\n  // input change handler: function (inputValue) {}\n  onInputChange: PropTypes.func,\n  // input keyDown handler: function (event) {}\n  onInputKeyDown: PropTypes.func,\n  // new option click handler: function (option) {}\n  onNewOptionClick: PropTypes.func,\n  // See Select.propTypes.options\n  options: PropTypes.array,\n  // Creates prompt/placeholder option text.\n  // (filterText: string): string\n  promptTextCreator: PropTypes.func,\n  ref: PropTypes.func,\n  // Decides if a keyDown event (eg its `keyCode`) should result in the creation of a new option.\n  shouldKeyDownEventCreateNewOption: PropTypes.func,\n  // Where to show prompt/placeholder option text.\n  // true: new option prompt at top of list (default)\n  // false: new option prompt at bottom of list\n  showNewOptionAtTop: PropTypes.bool\n};\n\nvar AsyncCreatableSelect = function (_React$Component) {\n  inherits(AsyncCreatableSelect, _React$Component);\n\n  function AsyncCreatableSelect() {\n    classCallCheck(this, AsyncCreatableSelect);\n    return possibleConstructorReturn(this, (AsyncCreatableSelect.__proto__ || Object.getPrototypeOf(AsyncCreatableSelect)).apply(this, arguments));\n  }\n\n  createClass(AsyncCreatableSelect, [{\n    key: 'focus',\n    value: function focus() {\n      this.select.focus();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Async, this.props, function (_ref) {\n        var ref = _ref.ref,\n            asyncProps = objectWithoutProperties(_ref, ['ref']);\n        var asyncRef = ref;\n        return React.createElement(CreatableSelect, asyncProps, function (_ref2) {\n          var ref = _ref2.ref,\n              creatableProps = objectWithoutProperties(_ref2, ['ref']);\n          var creatableRef = ref;\n          return _this2.props.children(_extends({}, creatableProps, {\n            ref: function ref(select) {\n              creatableRef(select);\n              asyncRef(select);\n              _this2.select = select;\n            }\n          }));\n        });\n      });\n    }\n  }]);\n  return AsyncCreatableSelect;\n}(React.Component);\n\nvar defaultChildren$1 = function defaultChildren(props) {\n  return React.createElement(Select$1, props);\n};\n\nAsyncCreatableSelect.propTypes = {\n  children: PropTypes.func.isRequired // Child function responsible for creating the inner Select component; (props: Object): PropTypes.element\n\n};\nAsyncCreatableSelect.defaultProps = {\n  children: defaultChildren$1\n};\nSelect$1.Async = Async;\nSelect$1.AsyncCreatable = AsyncCreatableSelect;\nSelect$1.Creatable = CreatableSelect;\nSelect$1.Value = Value;\nSelect$1.Option = Option;\nexport { Async, AsyncCreatableSelect as AsyncCreatable, CreatableSelect as Creatable, Value, Option, menuRenderer as defaultMenuRenderer, arrowRenderer as defaultArrowRenderer, clearRenderer as defaultClearRenderer, filterOptions as defaultFilterOptions };\nexport default Select$1;","map":null,"metadata":{},"sourceType":"module"}