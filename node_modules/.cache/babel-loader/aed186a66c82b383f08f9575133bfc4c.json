{"ast":null,"code":"import firebase from './Firebase.js';\nimport { reset } from 'redux-form';\nvar db = firebase.firestore();\nvar UrlServerless = 'https://us-central1-serverless-278902.cloudfunctions.net/serverless';\n\nfunction dbMLoad() {\n  console.log(\"Iniciamos la llamada \");\n  var myHeaders = new Headers({\n    \"mode\": \"opaque\",\n    \"method\": \"get\",\n    \"contentType\": \"application/json\"\n  }); // Where we're fetching data from\n\n  fetch('https://us-central1-serverless-278902.cloudfunctions.net/serverless/users', myHeaders) // We get the API response and receive data in JSON format...\n  //.then(response => response.json())\n  // ...then we update the users state\n  .then(function (response) {\n    //this.setState({\n    //     users: response,\n    //     isLoading: false,\n    // })\n    console.log(\"Los datos consultados son \" + $.parseJSON(response));\n  }) // Catch any errors we hit and update the app\n  .catch(function (error) {\n    console.log(\"Error cargando datos \" + error);\n  });\n} //Busca un registro puntual utilizando una llave o value fijo para en un campo o file \n\n\nfunction dbFindRegister(dispatch, type, colletion, file, value) {\n  db.collection(colletion).where(file, \"==\", value).get().then(function (snapshot) {\n    snapshot.forEach(function (doc) {\n      dispatch({\n        type: type,\n        data: doc.data()\n      });\n    });\n  }).catch(function (error) {\n    console.log(\"Error getting documents: \" + error);\n  });\n} //Recupera todos los valores de una Collection de datos \n\n\nfunction dbFindColletion(dispatch, type, colletion) {\n  dbMLoad(); //Hacemos la llamada a la bd para buscar todos los datos de una collection\n\n  db.collection(colletion).get().then(function (snapshot) {\n    dispatch({\n      type: type,\n      data: snapshot\n    });\n  }).catch(function (error) {\n    console.log(\"Error getting documents: \" + error);\n  });\n}\n\nfunction objDb(e) {\n  //Recuperamos todos los objetos que tienen una etiqueta refs\n  var dateRef = e.refs;\n  var formData = {};\n  var latitude = 0;\n  var longitude = 0;\n  var valorTmp = ''; //Recorremos el array con todas las etiquetas refs\n\n  for (var field in dateRef) {\n    //Recuperamos el valor que tiene el objeto del formulario \n    valorTmp = document.getElementById(field).value; //Como los tipos Geopoint se component de dos datos tenemos un if que nos permite identificarlos para posteriormente construir el array que correponde a la cordenada\n\n    if (dateRef[field].props.format == 'latitude') latitude = parseFloat(valorTmp);else if (dateRef[field].props.format == 'longitude') longitude = parseFloat(valorTmp);else formData[field] = valorTmp; //Al utilizar maskaras en input utilizamos el caracter * que rechena valores blancos por lo que antes de almacenar \n    //en la bd tenemos que retirar estos caracteres\n  }\n\n  if (latitude != 0 && longitude != 0) formData[\"geopoint\"] = new firebase.firestore.GeoPoint(latitude, longitude);\n  return formData;\n} //Crea un nuevo registro en la base de datos \n\n\nfunction dbCreate(dispatch, type, colletion, component, e) {\n  var formData = objDb(e); //Procedemos ha ingresar el valor en la collection, utilizando como documento id un valor autogenerado \n  //dejamos que Firebase sea quien lo genere \n\n  db.collection(colletion).add(formData).then(function (docRef) {\n    //agregamos al objeto nuevo el valor retornado de identificaci√≥n \n    formData[\"documentId\"] = docRef.id; //Para tener los listados actualizados reseteamos el componente listado\n\n    dispatch(reset(component)); //Ahora procedemos a llamar la funcion dispatcher quien se encargara de adicionar al state el nuevo objeto \n    //sin tener que realizar una consulta a la bd para recargar los datos.\n\n    dispatch({\n      type: type,\n      data: formData\n    });\n  }).catch(function (error) {\n    console.error(\"Error al crear documento \", error);\n  });\n} //Eliminar un registro o documento en una collection\n\n\nfunction dbDelete(dispatch, type, colletion, component, documentId) {\n  db.collection(colletion).doc(documentId).delete().then(function () {\n    dispatch(reset(component));\n    dispatch({\n      type: type,\n      data: documentId\n    });\n  }).catch(function (error) {\n    console.error(\"Error removing document: \", error);\n  });\n} //Actualizar un registro\n\n\nfunction dbUpdate(dispatch, type, colletion, component, e, documentId) {\n  var formData = objDb(e);\n  formData[\"documentId\"] = documentId; // To update age and favorite color:\n\n  db.collection(colletion).doc(documentId).update(formData).then(function () {\n    dispatch(reset(component));\n    dispatch({\n      type: type,\n      data: formData\n    });\n  });\n} //Actualizar el campo de un registro \n\n\nfunction dbEditFile(dispatch, type, colletion, component, documentId, fileEdit, newFileEdit) {\n  var formData = {};\n  formData[fileEdit] = newFileEdit;\n  var coll = db.collection(colletion).doc(documentId).update(formData).then(function () {\n    dispatch(reset(component));\n    dispatch({\n      type: type,\n      data: formData\n    });\n  });\n}\n\nvar DbCrud = {\n  dbFindRegister: dbFindRegister,\n  dbFindColletion: dbFindColletion,\n  dbCreate: dbCreate,\n  dbDelete: dbDelete,\n  dbUpdate: dbUpdate,\n  dbEditFile: dbEditFile\n};\nexport default DbCrud;","map":{"version":3,"sources":["/Users/danielobedortegahernandez/iCloud/Documents/GitHub/bobSeller/src/Pojo/DbCrud.js"],"names":["firebase","reset","db","firestore","UrlServerless","dbMLoad","console","log","myHeaders","Headers","fetch","then","response","$","parseJSON","catch","error","dbFindRegister","dispatch","type","colletion","file","value","collection","where","get","snapshot","forEach","doc","data","dbFindColletion","objDb","e","dateRef","refs","formData","latitude","longitude","valorTmp","field","document","getElementById","props","format","parseFloat","GeoPoint","dbCreate","component","add","docRef","id","dbDelete","documentId","delete","dbUpdate","update","dbEditFile","fileEdit","newFileEdit","coll","DbCrud"],"mappings":"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","sourcesContent":["import firebase from './Firebase.js';\nimport { reset } from 'redux-form';\nlet db = firebase.firestore();\n\nvar UrlServerless = 'https://us-central1-serverless-278902.cloudfunctions.net/serverless';\n\nfunction dbMLoad(){\n    console.log(\"Iniciamos la llamada \" );\n    var myHeaders = new Headers({\n        \"mode\": \"opaque\",\n        \"method\" : \"get\",\n        \"contentType\" : \"application/json\"\n      });\n\n    // Where we're fetching data from\n    fetch('https://us-central1-serverless-278902.cloudfunctions.net/serverless/users',myHeaders)\n    // We get the API response and receive data in JSON format...\n    //.then(response => response.json())\n    // ...then we update the users state\n    .then(function(response){\n        //this.setState({\n       //     users: response,\n       //     isLoading: false,\n       // })\n        console.log(\"Los datos consultados son \" +$.parseJSON(response));  \n    })\n    // Catch any errors we hit and update the app\n    .catch(function (error) {\n        console.log(\"Error cargando datos \" + error);\n    });\n        \n}\n\n//Busca un registro puntual utilizando una llave o value fijo para en un campo o file \nfunction dbFindRegister(dispatch, type, colletion, file, value) {\n    db.collection(colletion)\n        .where(file, \"==\", value).get()\n        .then(function (snapshot) {\n            snapshot.forEach(function (doc) {\n                dispatch({ type: type, data: doc.data() })\n            });\n        })\n        .catch(function (error) {\n            console.log(\"Error getting documents: \" + error);\n        });\n}\n\n//Recupera todos los valores de una Collection de datos \nfunction dbFindColletion(dispatch, type, colletion) {\n    dbMLoad();\n    //Hacemos la llamada a la bd para buscar todos los datos de una collection\n    db.collection(colletion)\n        .get()\n        .then(function (snapshot) {\n            dispatch({ type: type, data: snapshot });\n        })\n        .catch(function (error) {\n            console.log(\"Error getting documents: \" + error);\n        });\n}\n\nfunction objDb(e){\n     //Recuperamos todos los objetos que tienen una etiqueta refs\n     const dateRef = e.refs;\n     const formData = {};\n     var latitude = 0;\n     var longitude = 0;\n     var valorTmp = '';\n     //Recorremos el array con todas las etiquetas refs\n     for (const field in dateRef) {\n         //Recuperamos el valor que tiene el objeto del formulario \n         valorTmp = document.getElementById(field).value;\n         //Como los tipos Geopoint se component de dos datos tenemos un if que nos permite identificarlos para posteriormente construir el array que correponde a la cordenada\n         if (dateRef[field].props.format == 'latitude') latitude = parseFloat(valorTmp);\n         else if (dateRef[field].props.format == 'longitude') longitude = parseFloat(valorTmp);\n         else formData[field] = valorTmp;\n         //Al utilizar maskaras en input utilizamos el caracter * que rechena valores blancos por lo que antes de almacenar \n         //en la bd tenemos que retirar estos caracteres\n     }\n \n     if (latitude != 0 && longitude != 0) formData[\"geopoint\"] = new firebase.firestore.GeoPoint(latitude, longitude);\n     return formData;\n}\n\n//Crea un nuevo registro en la base de datos \nfunction dbCreate(dispatch, type, colletion, component, e) {\n    const formData = objDb(e);\n    //Procedemos ha ingresar el valor en la collection, utilizando como documento id un valor autogenerado \n    //dejamos que Firebase sea quien lo genere \n    db.collection(colletion).add(formData)\n        .then(function (docRef) {\n            //agregamos al objeto nuevo el valor retornado de identificaci√≥n \n            formData[\"documentId\"] = docRef.id;\n            //Para tener los listados actualizados reseteamos el componente listado\n            dispatch(reset(component));\n            //Ahora procedemos a llamar la funcion dispatcher quien se encargara de adicionar al state el nuevo objeto \n            //sin tener que realizar una consulta a la bd para recargar los datos.\n            dispatch({ type: type, data: formData });\n        })\n        .catch(function (error) { console.error(\"Error al crear documento \", error); });\n}\n\n//Eliminar un registro o documento en una collection\nfunction dbDelete(dispatch, type, colletion, component, documentId) {\n    db.collection(colletion).doc(documentId).delete().then(function () {\n        dispatch(reset(component));\n        dispatch({ type: type, data: documentId });\n    }).catch(function (error) { console.error(\"Error removing document: \", error); });\n}\n\n//Actualizar un registro\nfunction dbUpdate(dispatch, type, colletion, component, e, documentId) {\n    const formData = objDb(e);\n    formData[\"documentId\"] = documentId;\n    // To update age and favorite color:\n    db.collection(colletion).doc(documentId).update(formData)\n    .then(function () {\n        dispatch(reset(component));\n        dispatch({ type: type, data: formData });\n    });\n\n}\n\n//Actualizar el campo de un registro \nfunction dbEditFile(dispatch, type, colletion, component, documentId, fileEdit, newFileEdit){\n    const formData = {};\n    formData[fileEdit] = newFileEdit;\n    var coll = db.collection(colletion).doc(documentId)\n    .update(formData)\n    .then(function () {\n        dispatch(reset(component));\n        dispatch({ type: type, data: formData });\n    });\n}\n\nconst DbCrud = { dbFindRegister, dbFindColletion, dbCreate, dbDelete, dbUpdate, dbEditFile }\n\nexport default DbCrud;"]},"metadata":{},"sourceType":"module"}