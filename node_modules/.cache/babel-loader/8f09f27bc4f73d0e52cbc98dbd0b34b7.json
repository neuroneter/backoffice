{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { Component } from 'react';\nimport { Badge, Nav, NavItem, NavLink as RsNavLink } from 'reactstrap';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nimport '../css/scrollbar.css';\nimport LayoutHelper from './Shared/layout/layout';\nvar propTypes = process.env.NODE_ENV !== \"production\" ? {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  navConfig: PropTypes.any,\n  navFunc: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  isOpen: PropTypes.bool,\n  staticContext: PropTypes.any,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  router: PropTypes.any,\n  props: PropTypes.any\n} : {};\nvar defaultProps = {\n  tag: 'nav',\n  navConfig: {\n    items: [{\n      name: 'Dashboard',\n      url: '/dashboard',\n      icon: 'icon-speedometer',\n      badge: {\n        variant: 'info',\n        text: 'NEW'\n      }\n    }]\n  },\n  isOpen: false,\n  router: {\n    RsNavLink: RsNavLink\n  }\n};\n\nvar AppSidebarNav2 =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(AppSidebarNav2, _Component);\n\n  function AppSidebarNav2(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n\n    _defineProperty(_assertThisInitialized(_this), \"_scrollBarRef\", null);\n\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));\n    _this.activeRoute = _this.activeRoute.bind(_assertThisInitialized(_this));\n    _this.hideMobile = _this.hideMobile.bind(_assertThisInitialized(_this));\n    _this.changes = null;\n    _this.state = {\n      sidebarMinimized: false\n    };\n    return _this;\n  }\n\n  var _proto = AppSidebarNav2.prototype;\n\n  _proto.handleClick = function handleClick(e, item) {\n    if (item.attributes && typeof item.attributes.onClick === 'function' && !this.isActiveRoute(item.url, this.props)) {\n      item.attributes.onClick(e, item);\n    } else {\n      e.preventDefault();\n    }\n\n    e.currentTarget.parentElement.classList.toggle('open');\n  };\n\n  _proto.isActiveRoute = function isActiveRoute(routeName, props) {\n    return props.location.pathname.indexOf(routeName) > -1;\n  };\n\n  _proto.activeRoute = function activeRoute(routeName, props) {\n    return this.isActiveRoute(routeName, props) ? 'nav-item nav-dropdown open' : 'nav-item nav-dropdown';\n  };\n\n  _proto.hideMobile = function hideMobile() {\n    if (document.body.classList.contains('sidebar-show')) {\n      document.body.classList.toggle('sidebar-show');\n    }\n  };\n\n  _proto.getAttribs = function getAttribs(attributes) {\n    return _extends({}, attributes);\n  } // nav list\n  ;\n\n  _proto.navList = function navList(items) {\n    var _this2 = this;\n\n    return items.map(function (item, index) {\n      return _this2.navType(item, index);\n    });\n  } // nav type\n  ;\n\n  _proto.navType = function navType(item, idx) {\n    return item.title ? this.navTitle(item, idx) : item.divider ? this.navDivider(item, idx) : item.label ? this.navLabel(item, idx) : item.children ? this.navDropdown(item, idx) : this.navItem(item, idx);\n  } // nav list section title\n  ;\n\n  _proto.navTitle = function navTitle(title, key) {\n    var classes = classNames('nav-title', title[\"class\"], title.className);\n    return (\n      /*#__PURE__*/\n      React.createElement(\"li\", {\n        key: key,\n        className: classes\n      }, this.navWrapper(title), \" \")\n    );\n  } // simple wrapper for nav-title item\n  ;\n\n  _proto.navWrapper = function navWrapper(item) {\n    return item.wrapper && item.wrapper.element ? React.createElement(item.wrapper.element, item.wrapper.attributes, item.name) : item.name;\n  } // nav list divider\n  ;\n\n  _proto.navDivider = function navDivider(divider, key) {\n    var classes = classNames('divider', divider[\"class\"], divider.className);\n    return (\n      /*#__PURE__*/\n      React.createElement(\"li\", {\n        key: key,\n        className: classes\n      })\n    );\n  } // nav label with nav link\n  ;\n\n  _proto.navLabel = function navLabel(item, key) {\n    var classes = {\n      item: classNames('hidden-cn', item[\"class\"]),\n      link: classNames('nav-label', item[\"class\"] ? item[\"class\"] : ''),\n      icon: classNames('nav-icon', !item.icon ? 'fa fa-circle' : item.icon, item.label.variant ? \"text-\" + item.label.variant : '', item.label[\"class\"] ? item.label[\"class\"] : '')\n    };\n    return this.navLink(item, key, classes);\n  } // nav dropdown\n  ;\n\n  _proto.navDropdown = function navDropdown(item, key) {\n    var _this3 = this;\n\n    var itemIcon = this.navIcon(item);\n    var attributes = this.getAttribs(item.attributes);\n    var classes = classNames('nav-link', 'nav-dropdown-toggle', item[\"class\"], attributes[\"class\"], attributes.className);\n    delete attributes[\"class\"];\n    delete attributes.className;\n    var itemAttr = this.getAttribs(item.itemAttr);\n    var liClasses = classNames('nav-item', 'nav-dropdown', itemAttr[\"class\"], itemAttr.className);\n    delete itemAttr[\"class\"];\n    delete itemAttr.className;\n    var NavLink = this.props.router.NavLink || RsNavLink;\n    return (\n      /*#__PURE__*/\n      React.createElement(\"li\", _extends({\n        key: key,\n        className: classNames(liClasses, {\n          'open': this.isActiveRoute(item.url, this.props)\n        })\n      }, itemAttr),\n      /*#__PURE__*/\n      React.createElement(NavLink, _extends({\n        activeClassName: \"open\",\n        className: classes,\n        to: item.url || ''\n      }, attributes, {\n        onClick: function onClick(e) {\n          return _this3.handleClick(e, item);\n        }\n      }), itemIcon, item.name, this.navBadge(item.badge)),\n      /*#__PURE__*/\n      React.createElement(\"ul\", {\n        className: \"nav-dropdown-items\"\n      }, this.navList(item.children)))\n    );\n  } // nav item with nav link\n  ;\n\n  _proto.navItem = function navItem(item, key) {\n    var classes = {\n      item: classNames(item[\"class\"]),\n      link: classNames('nav-link', item.variant ? \"nav-link-\" + item.variant : ''),\n      icon: classNames('nav-icon', item.icon)\n    };\n    return this.navLink(item, key, classes);\n  };\n\n  _proto.navIcon = function navIcon(item) {\n    var icon = item.icon;\n    var iconObject = typeof icon === 'object' && icon !== null ? _extends({\n      iconClass: icon[\"class\"],\n      iconClassName: icon.className\n    }, icon) : {\n      iconClass: icon\n    };\n    var iconClass = iconObject.iconClass,\n        iconClassName = iconObject.iconClassName,\n        innerText = iconObject.innerText,\n        img = iconObject.img,\n        attributes = iconObject.attributes;\n\n    var iconAttr = _extends({}, attributes);\n\n    delete iconAttr[\"class\"];\n    delete iconAttr.className;\n    delete iconAttr.img;\n    var iconImg = img && img.src ? img : null;\n    var iconInner = innerText || null;\n    var classIcon = classNames('nav-icon', iconClass, iconClassName);\n    var iconComponent = iconImg ?\n    /*#__PURE__*/\n    React.createElement(\"img\", _extends({}, iconAttr, {\n      className: classIcon,\n      src: iconImg.src\n    })) :\n    /*#__PURE__*/\n    React.createElement(\"i\", _extends({}, iconAttr, {\n      className: classIcon\n    }), iconInner);\n    return iconComponent;\n  } // nav link\n  ;\n\n  _proto.navLink = function navLink(item, key, classes) {\n    var _this4 = this;\n\n    var ref = React.createRef();\n    var url = item.url || '';\n    var itemIcon = this.navIcon(item);\n    var itemBadge = this.navBadge(item.badge);\n    var attributes = this.getAttribs(item.attributes);\n    classes.link = classNames(classes.link, attributes[\"class\"], attributes.className);\n    delete attributes[\"class\"];\n    delete attributes.className;\n    var itemAttr = this.getAttribs(item.itemAttr);\n    classes.item = classNames(classes.item, itemAttr[\"class\"], itemAttr.className);\n    delete itemAttr[\"class\"];\n    delete itemAttr.className;\n    var NavLink = this.props.router.NavLink || RsNavLink;\n    return (\n      /*#__PURE__*/\n      React.createElement(NavItem, _extends({\n        key: key,\n        className: classes.item\n      }, itemAttr), attributes.disabled ?\n      /*#__PURE__*/\n      React.createElement(RsNavLink, _extends({\n        href: '',\n        className: classes.link\n      }, attributes), itemIcon, item.name, itemBadge) : this.isExternal(url, this.props) || NavLink === RsNavLink ?\n      /*#__PURE__*/\n      React.createElement(RsNavLink, _extends({\n        href: url,\n        className: classes.link,\n        active: true\n      }, attributes), itemIcon, item.name, itemBadge) :\n      /*#__PURE__*/\n      React.createElement(NavLink, _extends({\n        to: url,\n        className: classes.link,\n        activeClassName: \"active\",\n        onClick: function onClick() {\n          return _this4.hideMobile(ref);\n        },\n        ref: ref\n      }, attributes), itemIcon, item.name, itemBadge))\n    );\n  } // badge addon to NavItem\n  ;\n\n  _proto.navBadge = function navBadge(badge) {\n    if (badge) {\n      var classes = classNames(badge[\"class\"], badge.className);\n      return (\n        /*#__PURE__*/\n        React.createElement(Badge, {\n          className: classes,\n          color: badge.variant\n        }, badge.text)\n      );\n    }\n\n    return null;\n  };\n\n  _proto.isExternal = function isExternal(url, props) {\n    var linkType = typeof url;\n    var link = linkType === 'string' ? url : linkType === 'object' && url.pathname ? url.pathname : linkType === 'function' && typeof url(props.location) === 'string' ? url(props.location) : linkType === 'function' && typeof url(props.location) === 'object' ? url(props.location).pathname : '';\n    return link.substring(0, 4) === 'http';\n  };\n\n  _proto.observeDomMutations = function observeDomMutations() {\n    var _this5 = this;\n\n    if (window.MutationObserver) {\n      // eslint-disable-next-line\n      this.changes = new MutationObserver(function (mutations) {\n        var isSidebarMinimized = document.body.classList.contains('sidebar-minimized') || false;\n\n        _this5.setState({\n          sidebarMinimized: isSidebarMinimized\n        });\n\n        LayoutHelper.sidebarPSToggle(!isSidebarMinimized);\n      });\n      var element = document.body;\n      this.changes.observe(element, {\n        attributes: true,\n        attributeFilter: ['class']\n      });\n    }\n\n    window.addEventListener('resize', this.onResize);\n  };\n\n  _proto.onResize = function onResize() {\n    LayoutHelper.sidebarPSToggle(true);\n  };\n\n  _proto.componentDidMount = function componentDidMount() {\n    this.observeDomMutations();\n  };\n\n  _proto.componentWillUnmount = function componentWillUnmount() {\n    try {\n      this.changes.disconnect();\n      window.removeEventListener('resize', this.onResize);\n    } catch (ignore) {\n      // eslint-disable-next-line\n      console.warn('CoreUI SidebarNav failed to disconnect from MutationObserver', ignore);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this6 = this;\n\n    var _this$props = this.props,\n        className = _this$props.className,\n        children = _this$props.children,\n        navConfig = _this$props.navConfig,\n        attributes = _objectWithoutPropertiesLoose(_this$props, [\"className\", \"children\", \"navConfig\"]);\n\n    delete attributes.isOpen;\n    delete attributes.staticContext;\n    delete attributes.Tag;\n    delete attributes.router;\n    var navClasses = classNames(className, 'sidebar-nav');\n    var options = Object.assign({}, {\n      suppressScrollX: true,\n      suppressScrollY: this.state.sidebarMinimized\n    }); // sidebar-nav root\n\n    return (\n      /*#__PURE__*/\n      React.createElement(PerfectScrollbar, _extends({\n        className: navClasses\n      }, attributes, {\n        options: options,\n        ref: function ref(_ref) {\n          _this6._scrollBarRef = _ref;\n        }\n      }),\n      /*#__PURE__*/\n      React.createElement(Nav, null, children || this.navList(navConfig.items)))\n    );\n  };\n\n  return AppSidebarNav2;\n}(Component);\n\nAppSidebarNav2.propTypes = process.env.NODE_ENV !== \"production\" ? propTypes : {};\nAppSidebarNav2.defaultProps = defaultProps;\nexport default AppSidebarNav2;","map":null,"metadata":{},"sourceType":"module"}