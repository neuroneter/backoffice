{"ast":null,"code":"import stylesEqual from 'style-equal';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/* eslint-disable import/prefer-default-export */\n\n\nfunction type(value) {\n  if (value === null) return 'null';\n  if (Array.isArray(value)) return 'array';\n  return typeof value === 'undefined' ? 'undefined' : _typeof(value);\n}\n\nfunction elementsEqual(a, b) {\n  var typeOfA = type(a);\n  if (typeOfA !== type(b)) return false;\n\n  switch (typeOfA) {\n    case 'array':\n      if (a.length !== b.length) return false;\n\n      for (var i = 0; i < a.length; i++) {\n        if (!elementsEqual(a[i], b[i])) return false;\n      }\n\n      return true;\n\n    case 'object':\n      if (a.type !== b.type) return false;\n      if (a.key !== b.key) return false;\n      if (a.ref !== b.ref) return false;\n      return propsEqual(a.props, b.props);\n    // eslint-disable-line no-use-before-define\n\n    default:\n      return a === b;\n  }\n}\n\nfunction propsEqual(a, b) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var aKeys = Object.keys(a);\n  var aCount = 0;\n  var bCount = 0;\n\n  for (var i = 0, l = aKeys.length; i < l; i++) {\n    var key = aKeys[i];\n\n    if (!options.ignore || options.ignore.indexOf(key) === -1) {\n      // Compare `style` and `children` props later\n      if (key !== 'style' && key !== 'children' && a[key] !== b[key]) return false;\n      aCount += 1;\n    }\n  }\n\n  var bKeys = Object.keys(b);\n\n  for (var _i = 0, _l = bKeys.length; _i < _l; _i++) {\n    var _key = bKeys[_i];\n\n    if (!options.ignore || options.ignore.indexOf(_key) === -1) {\n      bCount += 1;\n    }\n  }\n\n  if (aCount !== bCount) return false; // NOTE: Kind of risky, but I'm assuming that a `style` prop is a React Native style,\n  // and using the `styleEqual` algorithm here.\n\n  if (!stylesEqual(a.style, b.style)) return false; // Compare children last\n\n  return elementsEqual(a.children, b.children);\n}\n\nexport { stylesEqual, propsEqual, elementsEqual };","map":null,"metadata":{},"sourceType":"module"}