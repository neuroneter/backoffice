{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _cloudinaryCore = require(\"cloudinary-core\");\n\nvar _CloudinaryContextType = require(\"../CloudinaryContext/CloudinaryContextType\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar camelCase = _cloudinaryCore.Util.camelCase;\n/**\n * Check if given component is a Cloudinary Component with given displayName\n * @param component the component to check\n * @param displayName of wanted component\n * @return {boolean}\n */\n\nvar isCloudinaryComponent = function isCloudinaryComponent(component, displayName) {\n  return !!(\n  /*#__PURE__*/\n  _react[\"default\"].isValidElement(component) && component.type && component.type.displayName === displayName);\n};\n/**\n * Return a new object containing keys and values where keys are in the keys list\n * @param {object} source Object to copy values from\n * @param {string[]} [keys=[]] a list of keys\n * @returns {object} an object with copied values\n */\n\n\nfunction only(source) {\n  var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  if (!source) {\n    return source;\n  }\n\n  return keys.reduce(function (tr, key) {\n    if (key in source) {\n      tr[key] = source[key];\n    }\n\n    return tr;\n  }, {});\n}\n/**\n * A base component for Cloudinary components.\n * @protected\n */\n\n\nvar CloudinaryComponent =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(CloudinaryComponent, _PureComponent);\n\n  var _super = _createSuper(CloudinaryComponent);\n\n  function CloudinaryComponent(_props, _context) {\n    var _this;\n\n    _classCallCheck(this, CloudinaryComponent);\n\n    _this = _super.call(this, _props, _context);\n\n    _defineProperty(_assertThisInitialized(_this), \"getContext\", function () {\n      return _this.context || {};\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onIntersect\", function () {\n      _this.setState({\n        isInView: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getExtendedProps\", function () {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this.props;\n      var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.getContext();\n      return CloudinaryComponent.normalizeOptions(context, props);\n    });\n\n    return _this;\n  }\n\n  _createClass(CloudinaryComponent, [{\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }, {\n    key: \"getChildPlaceholder\",\n    value: function getChildPlaceholder(children) {\n      if (children) {\n        return _react[\"default\"].Children.toArray(children).find(function (child) {\n          return isCloudinaryComponent(child, \"CloudinaryPlaceholder\");\n        });\n      }\n    }\n  }, {\n    key: \"getChildTransformations\",\n    value: function getChildTransformations(children) {\n      var _this2 = this;\n\n      var result = children ? _react[\"default\"].Children.toArray(children).filter(function (child) {\n        return isCloudinaryComponent(child, \"CloudinaryTransformation\");\n      }).map(function (child) {\n        var options = CloudinaryComponent.normalizeOptions(child.props, child.context);\n\n        var childOptions = _this2.getChildTransformations(child.props.children);\n\n        if (childOptions) {\n          options.transformation = childOptions;\n        }\n\n        return options;\n      }) : [];\n      return result.length ? result : null;\n    }\n    /**\n     * Returns an object with all the transformation parameters based on the context and properties of this element\n     * and any children.\n     * @param extendedProps\n     * @returns {object} a hash of transformation and configuration parameters\n     * @protected\n     */\n\n  }, {\n    key: \"getTransformation\",\n    value: function getTransformation(extendedProps) {\n      var children = extendedProps.children,\n          accessibility = extendedProps.accessibility,\n          placeholder = extendedProps.placeholder,\n          rest = _objectWithoutProperties(extendedProps, [\"children\", \"accessibility\", \"placeholder\"]);\n\n      var ownTransformation = only(_cloudinaryCore.Util.withCamelCaseKeys(rest), _cloudinaryCore.Transformation.methods) || {};\n      var childrenOptions = this.getChildTransformations(children);\n\n      if (!_cloudinaryCore.Util.isEmpty(childrenOptions)) {\n        ownTransformation.transformation = childrenOptions;\n      } //Append placeholder and accessibility if exists\n\n\n      var advancedTransformations = {\n        accessibility: accessibility,\n        placeholder: placeholder\n      };\n      Object.keys(advancedTransformations).filter(function (k) {\n        return advancedTransformations[k];\n      }).map(function (k) {\n        ownTransformation[k] = advancedTransformations[k];\n      });\n      return ownTransformation;\n    }\n    /**\n     * Combine properties of all options to create an option Object that can be passed to Cloudinary methods.<br>\n     *   `undefined` and `null` values are filtered out.\n     * @protected\n     * @returns {Object}\n     * @param options one or more options objects\n     */\n\n  }, {\n    key: \"getConfiguredCloudinary\",\n\n    /**\n     * Generated a configured Cloudinary object.\n     * @param extendedProps React props combined with custom Cloudinary configuration options\n     * @return {Cloudinary} configured using extendedProps\n     */\n    value: function getConfiguredCloudinary(extendedProps) {\n      var options = _cloudinaryCore.Util.extractUrlParams(_cloudinaryCore.Util.withSnakeCaseKeys(extendedProps));\n\n      return Cloudinary[\"new\"](options);\n    }\n    /**\n     * Generate a Cloudinary resource URL based on the options provided and child Transformation elements\n     * @param extendedProps React props combined with custom Cloudinary configuration options\n     * @returns {string} a cloudinary URL\n     * @protected\n     */\n\n  }, {\n    key: \"getUrl\",\n    value: function getUrl(extendedProps) {\n      var publicId = extendedProps.publicId;\n      var cl = getConfiguredCloudinary(extendedProps);\n      return cl.url(publicId, this.getTransformation(extendedProps));\n    }\n    /**\n     * Merges context & props\n     * @param props of this component\n     * @param context of this component\n     * @return {Object}\n     */\n\n  }], [{\n    key: \"normalizeOptions\",\n    value: function normalizeOptions() {\n      for (var _len = arguments.length, options = new Array(_len), _key = 0; _key < _len; _key++) {\n        options[_key] = arguments[_key];\n      }\n\n      return options.reduce(function (left, right) {\n        Object.keys(right || {}).forEach(function (key) {\n          var value = right[key];\n\n          if (value !== null && value !== undefined) {\n            left[key] = value;\n          }\n        });\n        return left;\n      }, {});\n    }\n  }]);\n\n  return CloudinaryComponent;\n}(_react.PureComponent);\n\n_defineProperty(CloudinaryComponent, \"contextType\", _CloudinaryContextType.CloudinaryContextType);\n\nCloudinaryComponent.propTypes = typesFrom(_cloudinaryCore.Transformation.PARAM_NAMES.map(camelCase));\nCloudinaryComponent.propTypes.publicId = _propTypes[\"default\"].string;\n/**\n * Create a React type definition object. All items are PropTypes.string or [string] or object or [object].\n * @param {Array} configParams a list of parameter names\n * @returns {Object}\n * @private\n */\n\nfunction typesFrom(configParams) {\n  configParams = configParams || [];\n  var types = {};\n\n  for (var i = 0; i < configParams.length; i++) {\n    var key = configParams[i];\n    types[camelCase(key)] = _propTypes[\"default\"].any;\n  }\n\n  return types;\n}\n\nvar _default = CloudinaryComponent;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}