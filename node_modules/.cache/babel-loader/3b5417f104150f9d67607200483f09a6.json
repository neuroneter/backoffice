{"ast":null,"code":"import _classCallCheck from \"/Users/danielobedortegahernandez/iCloud/Documents/GitHub/Seller/bobSeller/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/danielobedortegahernandez/iCloud/Documents/GitHub/Seller/bobSeller/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/danielobedortegahernandez/iCloud/Documents/GitHub/Seller/bobSeller/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/danielobedortegahernandez/iCloud/Documents/GitHub/Seller/bobSeller/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/danielobedortegahernandez/iCloud/Documents/GitHub/Seller/bobSeller/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/danielobedortegahernandez/iCloud/Documents/GitHub/Seller/bobSeller/src/views/Owner/Geo/StatesAdd.js\";\nimport { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport DbCrud from '../../../Actions/DbCrud';\nimport { Button, Card, CardBody, CardHeader, Col, Form, FormGroup, Input, InputGroup, Label, Row } from 'reactstrap';\nimport { TextMask, InputAdapter } from 'react-text-mask-hoc'; //Objeto que describe el nodo en la base de datos de los estados que hacen parte de un pais\n//lo usamos para reconocer la estructura no tiene funcionalidad dentro del codigo \n\nvar states = [{\n  cities: {\n    code: undefined,\n    geopoint: [undefined, undefined],\n    nameCity: undefined,\n    neighborhoods: {\n      code: undefined,\n      geopoint: [undefined, undefined],\n      nameNeighbordhood: undefined\n    }\n  },\n  code: undefined,\n  geopoint: [undefined, undefined],\n  isoCode: undefined,\n  stateName: undefined\n}];\n\nvar StatesAdd =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(StatesAdd, _Component);\n\n  function StatesAdd(props) {\n    var _this;\n\n    _classCallCheck(this, StatesAdd);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StatesAdd).call(this, props));\n    if (props.location.documentId == undefined) _this.documentId = _this.props.match.params.documentId; //Si no se envia la información para actualizar un registro se carga en blanco los campos ya que se esta \n    //creando uno nuevo\n    //console.log(\"llegando\");\n\n    if (!props.location.documentId) {\n      _this.props.history.push('/Geo/CountriesList');\n    } else {\n      //Procedemos a buscar en el objeto el estado cargado de geo cual es el nodo donde se requiere adicionar la información\n      console.log(_this.props.obj);\n      /*this.props.obj.forEach(function(country) {\n          //Dentro del objeto identificamos si el nodo en donde me encuentro parado es el que estoy editando \n          if(country.documentId == this.documentId){\n              //una vez encontramos el objeto verificamos si este ya tiene un nodo detipo state creado \n              //ya que si el pais fue creado pero nunca se le ha adicionado un estado no tendra este nodo \n              if(country.states == undefined){\n                //Creamos un objeto de tipo Array donde podemos almacenar los datos de este nodo \n                country.states = [\n                 {\n                   countryName: '',\n                   isoCode: '',\n                   active: '',\n                   geopoint: {latitude:'',longitude:''}\n                 }\n                ];\n              }\n             \n              //Creamos el state que almacenara localmente la información que llega al componente\n              this.state = {\n                  //Identificador del documento al que tenemos que afectar \n                  documentId: props.location.documentId,\n                  //Objeto completo de pais\n                  rootObj:country,\n                  //Objeto completo de estados, si no existe este objeto se creo previamente un array vacio\n                  statesObj:country.states\n              };\n             \n              //Eliminamos del objeto su identificador para poder utilizarlo para poder adicionar un nuevo registro hijo \n              //Esto lo hacemos ya que el objeto que se enviara a la base de datos no tiene dentro del hijo el id del documento \n              delete this.state.rootObj[\"documentId\"];\n          }\n      }.bind(this)); */\n    } //if(this.props.location.row){\n    // this.state = this.props.location.row;\n    //}else{\n    //  this.state = {\n    //   countryName: '',\n    //   isoCode: '',\n    //  active: '',\n    //   geopoint: {latitude:'',longitude:''}\n    // }\n    //}\n\n\n    return _this;\n  }\n\n  _createClass(StatesAdd, [{\n    key: \"callList\",\n    value: function callList() {\n      this.props.history.push('/Geo/CountriesList');\n    }\n  }, {\n    key: \"callSave\",\n    value: function callSave(e) {\n      e.preventDefault();\n\n      if (this.state.documentId) {\n        this.props.update('updateGeo', \"geo\", \"CountriesList\", this, this.state.documentId);\n        this.props.history.push('/Geo/CountriesList');\n      } else {\n        this.props.create('addGeo', \"geo\", \"CountriesList\", this);\n        this.props.history.push('/Geo/CountriesList');\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"animated fadeIn\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"dfg\"));\n    }\n  }]);\n\n  return StatesAdd;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    email: state.login.email,\n    password: state.login.password,\n    obj: state.MyAccount\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    create: function create(type, colletion, component, e) {\n      DbCrud.dbCreate(dispatch, type, colletion, component, e);\n    },\n    update: function update(type, colletion, component, e, documentId) {\n      DbCrud.dbUpdate(dispatch, type, colletion, component, e, documentId);\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StatesAdd);","map":{"version":3,"sources":["/Users/danielobedortegahernandez/iCloud/Documents/GitHub/Seller/bobSeller/src/views/Owner/Geo/StatesAdd.js"],"names":["connect","React","Component","DbCrud","Button","Card","CardBody","CardHeader","Col","Form","FormGroup","Input","InputGroup","Label","Row","TextMask","InputAdapter","states","cities","code","undefined","geopoint","nameCity","neighborhoods","nameNeighbordhood","isoCode","stateName","StatesAdd","props","location","documentId","match","params","history","push","console","log","obj","e","preventDefault","state","update","create","mapStateToProps","email","login","password","MyAccount","mapDispatchToProps","dispatch","type","colletion","component","dbCreate","dbUpdate"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\nimport React, { Component } from 'react';\nimport DbCrud from '../../../Actions/DbCrud';\nimport {Button, Card, CardBody, CardHeader, Col, Form, FormGroup, Input, InputGroup, Label, Row} from 'reactstrap';\nimport { TextMask, InputAdapter } from 'react-text-mask-hoc';\n\n//Objeto que describe el nodo en la base de datos de los estados que hacen parte de un pais\n//lo usamos para reconocer la estructura no tiene funcionalidad dentro del codigo \nconst states =  [\n  {\n      cities   :   {\n        code:  undefined,\n        geopoint    :  [undefined,undefined],\n        nameCity: undefined,\n        neighborhoods:{\n          code:  undefined,\n          geopoint    :  [undefined,undefined],\n          nameNeighbordhood: undefined\n        }\n      },\n      code :   undefined,\n      geopoint    :  [undefined,undefined],\n      isoCode   :   undefined,\n      stateName  :   undefined\n  }\n];\n\n\nclass StatesAdd extends Component {\n\n  constructor(props) {\n    super(props);\n    if(props.location.documentId == undefined) \n    this.documentId = this.props.match.params.documentId;\n    //Si no se envia la información para actualizar un registro se carga en blanco los campos ya que se esta \n    //creando uno nuevo\n    //console.log(\"llegando\");\n\n    if(!props.location.documentId){\n      this.props.history.push('/Geo/CountriesList');\n    }else{\n         //Procedemos a buscar en el objeto el estado cargado de geo cual es el nodo donde se requiere adicionar la información\n         console.log(this.props.obj);\n         /*this.props.obj.forEach(function(country) {\n             //Dentro del objeto identificamos si el nodo en donde me encuentro parado es el que estoy editando \n             if(country.documentId == this.documentId){\n                 //una vez encontramos el objeto verificamos si este ya tiene un nodo detipo state creado \n                 //ya que si el pais fue creado pero nunca se le ha adicionado un estado no tendra este nodo \n                 if(country.states == undefined){\n                   //Creamos un objeto de tipo Array donde podemos almacenar los datos de este nodo \n                   country.states = [\n                    {\n                      countryName: '',\n                      isoCode: '',\n                      active: '',\n                      geopoint: {latitude:'',longitude:''}\n                    }\n                   ];\n                 }\n                \n                 //Creamos el state que almacenara localmente la información que llega al componente\n                 this.state = {\n                     //Identificador del documento al que tenemos que afectar \n                     documentId: props.location.documentId,\n                     //Objeto completo de pais\n                     rootObj:country,\n                     //Objeto completo de estados, si no existe este objeto se creo previamente un array vacio\n                     statesObj:country.states\n                 };\n                \n                 //Eliminamos del objeto su identificador para poder utilizarlo para poder adicionar un nuevo registro hijo \n                 //Esto lo hacemos ya que el objeto que se enviara a la base de datos no tiene dentro del hijo el id del documento \n                 delete this.state.rootObj[\"documentId\"];\n             }\n         }.bind(this)); */\n    }\n    \n    \n    //if(this.props.location.row){\n     // this.state = this.props.location.row;\n    //}else{\n    //  this.state = {\n     //   countryName: '',\n     //   isoCode: '',\n      //  active: '',\n     //   geopoint: {latitude:'',longitude:''}\n     // }\n    //}\n  }\n\n  callList() { this.props.history.push('/Geo/CountriesList'); }\n\n  callSave(e) {\n    e.preventDefault();\n    if(this.state.documentId){\n      this.props.update('updateGeo', \"geo\", \"CountriesList\", this, this.state.documentId);\n      this.props.history.push('/Geo/CountriesList');\n    }else{\n      this.props.create('addGeo', \"geo\", \"CountriesList\", this);\n      this.props.history.push('/Geo/CountriesList');\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"animated fadeIn\">\n\n        <Row>\n          dfg\n        </Row>\n      \n      </div>\n    );\n  }\n\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    email: state.login.email,\n    password: state.login.password,\n    obj: state.MyAccount\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    create: (type, colletion, component, e) => {\n      DbCrud.dbCreate(dispatch, type, colletion, component, e);\n    },\n    update: (type, colletion, component, e, documentId) => {\n      DbCrud.dbUpdate(dispatch, type, colletion, component, e, documentId);\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StatesAdd);"]},"metadata":{},"sourceType":"module"}