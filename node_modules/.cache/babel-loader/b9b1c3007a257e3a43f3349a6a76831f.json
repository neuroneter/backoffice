{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { Badge, Nav, NavItem, NavLink as RsNavLink } from 'reactstrap';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport 'react-perfect-scrollbar/dist/css/styles.css';\nvar propTypes = process.env.NODE_ENV !== \"production\" ? {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  navConfig: PropTypes.any,\n  navFunc: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  isOpen: PropTypes.bool,\n  staticContext: PropTypes.any,\n  tag: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n} : {};\nvar defaultProps = {\n  tag: 'nav',\n  navConfig: {\n    items: [{\n      name: 'Dashboard',\n      url: '/dashboard',\n      icon: 'icon-speedometer',\n      badge: {\n        variant: 'info',\n        text: 'NEW'\n      }\n    }]\n  },\n  isOpen: false\n};\n\nvar AppSidebarNav =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(AppSidebarNav, _Component);\n\n  function AppSidebarNav(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));\n    _this.activeRoute = _this.activeRoute.bind(_assertThisInitialized(_this));\n    _this.hideMobile = _this.hideMobile.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  var _proto = AppSidebarNav.prototype;\n\n  _proto.handleClick = function handleClick(e) {\n    e.preventDefault();\n    e.currentTarget.parentElement.classList.toggle('open');\n  };\n\n  _proto.activeRoute = function activeRoute(routeName, props) {\n    return props.location.pathname.indexOf(routeName) > -1 ? 'nav-item nav-dropdown open' : 'nav-item nav-dropdown';\n  };\n\n  _proto.hideMobile = function hideMobile() {\n    if (document.body.classList.contains('sidebar-show')) {\n      document.body.classList.toggle('sidebar-show');\n    }\n  } // nav list\n  ;\n\n  _proto.navList = function navList(items) {\n    var _this2 = this;\n\n    return items.map(function (item, index) {\n      return _this2.navType(item, index);\n    });\n  } // nav type\n  ;\n\n  _proto.navType = function navType(item, idx) {\n    return item.title ? this.navTitle(item, idx) : item.divider ? this.navDivider(item, idx) : item.label ? this.navLabel(item, idx) : item.children ? this.navDropdown(item, idx) : this.navItem(item, idx);\n  } // nav list section title\n  ;\n\n  _proto.navTitle = function navTitle(title, key) {\n    var classes = classNames('nav-title', title[\"class\"]);\n    return (\n      /*#__PURE__*/\n      React.createElement(\"li\", {\n        key: key,\n        className: classes\n      }, this.navWrapper(title), \" \")\n    );\n  } // simple wrapper for nav-title item\n  ;\n\n  _proto.navWrapper = function navWrapper(item) {\n    return item.wrapper && item.wrapper.element ? React.createElement(item.wrapper.element, item.wrapper.attributes, item.name) : item.name;\n  } // nav list divider\n  ;\n\n  _proto.navDivider = function navDivider(divider, key) {\n    var classes = classNames('divider', divider[\"class\"]);\n    return (\n      /*#__PURE__*/\n      React.createElement(\"li\", {\n        key: key,\n        className: classes\n      })\n    );\n  } // nav label with nav link\n  ;\n\n  _proto.navLabel = function navLabel(item, key) {\n    var classes = {\n      item: classNames('hidden-cn', item[\"class\"]),\n      link: classNames('nav-label', item[\"class\"] ? item[\"class\"] : ''),\n      icon: classNames('nav-icon', !item.icon ? 'fa fa-circle' : item.icon, item.label.variant ? \"text-\" + item.label.variant : '', item.label[\"class\"] ? item.label[\"class\"] : '')\n    };\n    return this.navLink(item, key, classes);\n  } // nav dropdown\n  ;\n\n  _proto.navDropdown = function navDropdown(item, key) {\n    var classIcon = classNames('nav-icon', item.icon);\n    var attributes = JSON.parse(JSON.stringify(item.attributes || {}));\n    var classes = classNames('nav-link', 'nav-dropdown-toggle', item[\"class\"], attributes[\"class\"]);\n    delete attributes[\"class\"];\n    return (\n      /*#__PURE__*/\n      React.createElement(\"li\", {\n        key: key,\n        className: this.activeRoute(item.url, this.props)\n      },\n      /*#__PURE__*/\n      React.createElement(\"a\", _extends({\n        className: classes,\n        href: \"#\",\n        onClick: this.handleClick\n      }, attributes),\n      /*#__PURE__*/\n      React.createElement(\"i\", {\n        className: classIcon\n      }), item.name, this.navBadge(item.badge)),\n      /*#__PURE__*/\n      React.createElement(\"ul\", {\n        className: \"nav-dropdown-items\"\n      }, this.navList(item.children)))\n    );\n  } // nav item with nav link\n  ;\n\n  _proto.navItem = function navItem(item, key) {\n    var classes = {\n      item: classNames(item[\"class\"]),\n      link: classNames('nav-link', item.variant ? \"nav-link-\" + item.variant : ''),\n      icon: classNames('nav-icon', item.icon)\n    };\n    return this.navLink(item, key, classes);\n  } // nav link\n  ;\n\n  _proto.navLink = function navLink(item, key, classes) {\n    var url = item.url || '';\n    var itemIcon =\n    /*#__PURE__*/\n    React.createElement(\"i\", {\n      className: classes.icon\n    });\n    var itemBadge = this.navBadge(item.badge);\n    var attributes = item.attributes || {};\n    return (\n      /*#__PURE__*/\n      React.createElement(NavItem, {\n        key: key,\n        className: classes.item\n      }, attributes.disabled ?\n      /*#__PURE__*/\n      React.createElement(RsNavLink, _extends({\n        href: '',\n        className: classes.link\n      }, attributes), itemIcon, item.name, itemBadge) : this.isExternal(url) ?\n      /*#__PURE__*/\n      React.createElement(RsNavLink, _extends({\n        href: url,\n        className: classes.link,\n        active: true\n      }, attributes), itemIcon, item.name, itemBadge) :\n      /*#__PURE__*/\n      React.createElement(NavLink, _extends({\n        to: url,\n        className: classes.link,\n        activeClassName: \"active\",\n        onClick: this.hideMobile\n      }, attributes), itemIcon, item.name, itemBadge))\n    );\n  } // badge addon to NavItem\n  ;\n\n  _proto.navBadge = function navBadge(badge) {\n    if (badge) {\n      var classes = classNames(badge[\"class\"]);\n      return (\n        /*#__PURE__*/\n        React.createElement(Badge, {\n          className: classes,\n          color: badge.variant\n        }, badge.text)\n      );\n    }\n\n    return null;\n  };\n\n  _proto.isExternal = function isExternal(url) {\n    var link = url ? url.substring(0, 4) : '';\n    return link === 'http';\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        className = _this$props.className,\n        children = _this$props.children,\n        navConfig = _this$props.navConfig,\n        attributes = _objectWithoutPropertiesLoose(_this$props, [\"className\", \"children\", \"navConfig\"]);\n\n    delete attributes.isOpen;\n    delete attributes.staticContext;\n    delete attributes.Tag;\n    var navClasses = classNames(className, 'sidebar-nav'); // ToDo: find better rtl fix\n\n    var isRtl = getComputedStyle(document.documentElement).direction === 'rtl'; // sidebar-nav root\n\n    return (\n      /*#__PURE__*/\n      React.createElement(PerfectScrollbar, _extends({\n        className: navClasses\n      }, attributes, {\n        options: {\n          suppressScrollX: !isRtl\n        }\n      }),\n      /*#__PURE__*/\n      React.createElement(Nav, null, children || this.navList(navConfig.items)))\n    );\n  };\n\n  return AppSidebarNav;\n}(Component);\n\nAppSidebarNav.propTypes = process.env.NODE_ENV !== \"production\" ? propTypes : {};\nAppSidebarNav.defaultProps = defaultProps;\nexport default AppSidebarNav;","map":null,"metadata":{},"sourceType":"module"}